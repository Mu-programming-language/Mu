/* This file was generated by SableCC (http://www.sablecc.org/). */

package parser;

import lexer.*;
import node.*;
import analysis.*;
import java.util.*;

import java.io.DataInputStream;
import java.io.BufferedInputStream;
import java.io.IOException;

@SuppressWarnings("nls")
public class Parser
{
    public final Analysis ignoredTokens = new AnalysisAdapter();

    protected ArrayList<Object> nodeList;

    private final Lexer lexer;
    private final ListIterator<Object> stack = new LinkedList<Object>().listIterator();
    private int last_pos;
    private int last_line;
    private Token last_token;
    private final TokenIndex converter = new TokenIndex();
    private final int[] action = new int[2];

    private final static int SHIFT = 0;
    private final static int REDUCE = 1;
    private final static int ACCEPT = 2;
    private final static int ERROR = 3;

    public Parser(@SuppressWarnings("hiding") Lexer lexer)
    {
        this.lexer = lexer;
    }

    protected void filter() throws ParserException, LexerException, IOException
    {
        // Empty body
    }

    private void push(int numstate, ArrayList<Object> listNode, boolean hidden) throws ParserException, LexerException, IOException
    {
        this.nodeList = listNode;

        if(!hidden)
        {
            filter();
        }

        if(!this.stack.hasNext())
        {
            this.stack.add(new State(numstate, this.nodeList));
            return;
        }

        State s = (State) this.stack.next();
        s.state = numstate;
        s.nodes = this.nodeList;
    }

    private int goTo(int index)
    {
        int state = state();
        int low = 1;
        int high = gotoTable[index].length - 1;
        int value = gotoTable[index][0][1];

        while(low <= high)
        {
            // int middle = (low + high) / 2;
            int middle = (low + high) >>> 1;

            if(state < gotoTable[index][middle][0])
            {
                high = middle - 1;
            }
            else if(state > gotoTable[index][middle][0])
            {
                low = middle + 1;
            }
            else
            {
                value = gotoTable[index][middle][1];
                break;
            }
        }

        return value;
    }

    private int state()
    {
        State s = (State) this.stack.previous();
        this.stack.next();
        return s.state;
    }

    private ArrayList<Object> pop()
    {
        return ((State) this.stack.previous()).nodes;
    }

    private int index(Switchable token)
    {
        this.converter.index = -1;
        token.apply(this.converter);
        return this.converter.index;
    }

    @SuppressWarnings("unchecked")
    public Start parse() throws ParserException, LexerException, IOException
    {
        push(0, null, true);
        List<Node> ign = null;
        while(true)
        {
            while(index(this.lexer.peek()) == -1)
            {
                if(ign == null)
                {
                    ign = new LinkedList<Node>();
                }

                ign.add(this.lexer.next());
            }

            if(ign != null)
            {
                this.ignoredTokens.setIn(this.lexer.peek(), ign);
                ign = null;
            }

            this.last_pos = this.lexer.peek().getPos();
            this.last_line = this.lexer.peek().getLine();
            this.last_token = this.lexer.peek();

            int index = index(this.lexer.peek());
            this.action[0] = Parser.actionTable[state()][0][1];
            this.action[1] = Parser.actionTable[state()][0][2];

            int low = 1;
            int high = Parser.actionTable[state()].length - 1;

            while(low <= high)
            {
                int middle = (low + high) / 2;

                if(index < Parser.actionTable[state()][middle][0])
                {
                    high = middle - 1;
                }
                else if(index > Parser.actionTable[state()][middle][0])
                {
                    low = middle + 1;
                }
                else
                {
                    this.action[0] = Parser.actionTable[state()][middle][1];
                    this.action[1] = Parser.actionTable[state()][middle][2];
                    break;
                }
            }

            switch(this.action[0])
            {
                case SHIFT:
		    {
		        ArrayList<Object> list = new ArrayList<Object>();
		        list.add(this.lexer.next());
                        push(this.action[1], list, false);
                    }
		    break;
                case REDUCE:
                    {
                        int reduction = this.action[1];
                        if(reduction < 500) reduce_0(reduction);
                    }
                    break;
                case ACCEPT:
                    {
                        EOF node2 = (EOF) this.lexer.next();
                        PProgram node1 = (PProgram) pop().get(0);
                        Start node = new Start(node1, node2);
                        return node;
                    }
                case ERROR:
                    throw new ParserException(this.last_token,
                        "[" + this.last_line + "," + this.last_pos + "] " +
                        Parser.errorMessages[Parser.errors[this.action[1]]]);
            }
        }
    }

    private void reduce_0(int reduction) throws IOException, LexerException, ParserException
    {
        switch(reduction)
        {
            case 0: /* reduce AProgram */
            {
                ArrayList<Object> list = new0();
                push(goTo(0), list, false);
            }
            break;
            case 1: /* reduce AInstructions */
            {
                ArrayList<Object> list = new1();
                push(goTo(1), list, false);
            }
            break;
            case 2: /* reduce AStatementBlock */
            {
                ArrayList<Object> list = new2();
                push(goTo(2), list, false);
            }
            break;
            case 3: /* reduce AQuestionBlock */
            {
                ArrayList<Object> list = new3();
                push(goTo(3), list, false);
            }
            break;
            case 4: /* reduce AProofBlock */
            {
                ArrayList<Object> list = new4();
                push(goTo(4), list, false);
            }
            break;
            case 5: /* reduce AAstatementinstructionlist1StatementInstructionList */
            {
                ArrayList<Object> list = new5();
                push(goTo(5), list, false);
            }
            break;
            case 6: /* reduce AAstatementinstructionlist2StatementInstructionList */
            {
                ArrayList<Object> list = new6();
                push(goTo(5), list, false);
            }
            break;
            case 7: /* reduce AAdditionalStatementInstruction */
            {
                ArrayList<Object> list = new7();
                push(goTo(6), list, false);
            }
            break;
            case 8: /* reduce ADeclarationStatementInstruction */
            {
                ArrayList<Object> list = new8();
                push(goTo(7), list, false);
            }
            break;
            case 9: /* reduce AAssignmentStatementInstruction */
            {
                ArrayList<Object> list = new9();
                push(goTo(7), list, false);
            }
            break;
            case 10: /* reduce ADefinitionStatementInstruction */
            {
                ArrayList<Object> list = new10();
                push(goTo(7), list, false);
            }
            break;
            case 11: /* reduce AAquestioninstructionlist1QuestionInstructionList */
            {
                ArrayList<Object> list = new11();
                push(goTo(8), list, false);
            }
            break;
            case 12: /* reduce AAquestioninstructionlist2QuestionInstructionList */
            {
                ArrayList<Object> list = new12();
                push(goTo(8), list, false);
            }
            break;
            case 13: /* reduce AAdditionalQuestionInstruction */
            {
                ArrayList<Object> list = new13();
                push(goTo(9), list, false);
            }
            break;
            case 14: /* reduce AQuestionInstruction */
            {
                ArrayList<Object> list = new14();
                push(goTo(10), list, false);
            }
            break;
            case 15: /* reduce AAproofinstructionlist1ProofInstructionList */
            {
                ArrayList<Object> list = new15();
                push(goTo(11), list, false);
            }
            break;
            case 16: /* reduce AAproofinstructionlist2ProofInstructionList */
            {
                ArrayList<Object> list = new16();
                push(goTo(11), list, false);
            }
            break;
            case 17: /* reduce AAdditionalProofInstruction */
            {
                ArrayList<Object> list = new17();
                push(goTo(12), list, false);
            }
            break;
            case 18: /* reduce AProofInstruction */
            {
                ArrayList<Object> list = new18();
                push(goTo(13), list, false);
            }
            break;
            case 19: /* reduce ADemonstration */
            {
                ArrayList<Object> list = new19();
                push(goTo(14), list, false);
            }
            break;
            case 20: /* reduce AApropositionlist1PropositionList */
            {
                ArrayList<Object> list = new20();
                push(goTo(15), list, false);
            }
            break;
            case 21: /* reduce AApropositionlist2PropositionList */
            {
                ArrayList<Object> list = new21();
                push(goTo(15), list, false);
            }
            break;
            case 22: /* reduce AImplicationAdditionalProposition */
            {
                ArrayList<Object> list = new22();
                push(goTo(16), list, false);
            }
            break;
            case 23: /* reduce AEquivalenceAdditionalProposition */
            {
                ArrayList<Object> list = new23();
                push(goTo(16), list, false);
            }
            break;
            case 24: /* reduce AExpressionProposition */
            {
                ArrayList<Object> list = new24();
                push(goTo(17), list, false);
            }
            break;
            case 25: /* reduce AForAllProposition */
            {
                ArrayList<Object> list = new25();
                push(goTo(17), list, false);
            }
            break;
            case 26: /* reduce AExistProposition */
            {
                ArrayList<Object> list = new26();
                push(goTo(17), list, false);
            }
            break;
            case 27: /* reduce AExpressionExpression */
            {
                ArrayList<Object> list = new27();
                push(goTo(18), list, false);
            }
            break;
            case 28: /* reduce ASetExpressionExpression */
            {
                ArrayList<Object> list = new28();
                push(goTo(18), list, false);
            }
            break;
            case 29: /* reduce AElementExpressionExpression */
            {
                ArrayList<Object> list = new29();
                push(goTo(18), list, false);
            }
            break;
            case 30: /* reduce AComparisonSetExpression */
            {
                ArrayList<Object> list = new30();
                push(goTo(19), list, false);
            }
            break;
            case 31: /* reduce ALogicalAndSetExpression */
            {
                ArrayList<Object> list = new31();
                push(goTo(19), list, false);
            }
            break;
            case 32: /* reduce ALogicalOrSetExpression */
            {
                ArrayList<Object> list = new32();
                push(goTo(19), list, false);
            }
            break;
            case 33: /* reduce AArithmeticSetComparison */
            {
                ArrayList<Object> list = new33();
                push(goTo(20), list, false);
            }
            break;
            case 34: /* reduce AEqualToSetComparison */
            {
                ArrayList<Object> list = new34();
                push(goTo(20), list, false);
            }
            break;
            case 35: /* reduce ANotEqualToSetComparison */
            {
                ArrayList<Object> list = new35();
                push(goTo(20), list, false);
            }
            break;
            case 36: /* reduce ASubsetOfSetComparison */
            {
                ArrayList<Object> list = new36();
                push(goTo(20), list, false);
            }
            break;
            case 37: /* reduce ANotASubsetOfSetComparison */
            {
                ArrayList<Object> list = new37();
                push(goTo(20), list, false);
            }
            break;
            case 38: /* reduce ASupersetOfSetComparison */
            {
                ArrayList<Object> list = new38();
                push(goTo(20), list, false);
            }
            break;
            case 39: /* reduce ANotASupersetOfSetComparison */
            {
                ArrayList<Object> list = new39();
                push(goTo(20), list, false);
            }
            break;
            case 40: /* reduce AFactorSetArithmetic */
            {
                ArrayList<Object> list = new40();
                push(goTo(21), list, false);
            }
            break;
            case 41: /* reduce APlusSetArithmetic */
            {
                ArrayList<Object> list = new41();
                push(goTo(21), list, false);
            }
            break;
            case 42: /* reduce ADeprivedOfSetArithmetic */
            {
                ArrayList<Object> list = new42();
                push(goTo(21), list, false);
            }
            break;
            case 43: /* reduce ATermSetFactor */
            {
                ArrayList<Object> list = new43();
                push(goTo(22), list, false);
            }
            break;
            case 44: /* reduce AMultSetFactor */
            {
                ArrayList<Object> list = new44();
                push(goTo(22), list, false);
            }
            break;
            case 45: /* reduce ATermSetExponent */
            {
                ArrayList<Object> list = new45();
                push(goTo(23), list, false);
            }
            break;
            case 46: /* reduce AExpSetExponent */
            {
                ArrayList<Object> list = new46();
                push(goTo(23), list, false);
            }
            break;
            case 47: /* reduce ASetSetTerm */
            {
                ArrayList<Object> list = new47();
                push(goTo(24), list, false);
            }
            break;
            case 48: /* reduce AExpressionSetTerm */
            {
                ArrayList<Object> list = new48();
                push(goTo(24), list, false);
            }
            break;
            case 49: /* reduce AComparisonElementExpression */
            {
                ArrayList<Object> list = new49();
                push(goTo(25), list, false);
            }
            break;
            case 50: /* reduce ALogicalAndElementExpression */
            {
                ArrayList<Object> list = new50();
                push(goTo(25), list, false);
            }
            break;
            case 51: /* reduce ALogicalOrElementExpression */
            {
                ArrayList<Object> list = new51();
                push(goTo(25), list, false);
            }
            break;
            case 52: /* reduce AArithmeticElementComparison */
            {
                ArrayList<Object> list = new52();
                push(goTo(26), list, false);
            }
            break;
            case 53: /* reduce AEqualToElementComparison */
            {
                ArrayList<Object> list = new53();
                push(goTo(26), list, false);
            }
            break;
            case 54: /* reduce ANotEqualToElementComparison */
            {
                ArrayList<Object> list = new54();
                push(goTo(26), list, false);
            }
            break;
            case 55: /* reduce AGreaterThanElementComparison */
            {
                ArrayList<Object> list = new55();
                push(goTo(26), list, false);
            }
            break;
            case 56: /* reduce ANotGreaterThanElementComparison */
            {
                ArrayList<Object> list = new56();
                push(goTo(26), list, false);
            }
            break;
            case 57: /* reduce ALessThanElementComparison */
            {
                ArrayList<Object> list = new57();
                push(goTo(26), list, false);
            }
            break;
            case 58: /* reduce ANotLessThanElementComparison */
            {
                ArrayList<Object> list = new58();
                push(goTo(26), list, false);
            }
            break;
            case 59: /* reduce AGreaterThanOrEqualToElementComparison */
            {
                ArrayList<Object> list = new59();
                push(goTo(26), list, false);
            }
            break;
            case 60: /* reduce ANeitherGreaterThanNorEqualToElementComparison */
            {
                ArrayList<Object> list = new60();
                push(goTo(26), list, false);
            }
            break;
            case 61: /* reduce ALessThanOrEqualToElementComparison */
            {
                ArrayList<Object> list = new61();
                push(goTo(26), list, false);
            }
            break;
            case 62: /* reduce ANeitherLessThanNorEqualToElementComparison */
            {
                ArrayList<Object> list = new62();
                push(goTo(26), list, false);
            }
            break;
            case 63: /* reduce AFactorElementArithmetic */
            {
                ArrayList<Object> list = new63();
                push(goTo(27), list, false);
            }
            break;
            case 64: /* reduce APlusElementArithmetic */
            {
                ArrayList<Object> list = new64();
                push(goTo(27), list, false);
            }
            break;
            case 65: /* reduce AMinusElementArithmetic */
            {
                ArrayList<Object> list = new65();
                push(goTo(27), list, false);
            }
            break;
            case 66: /* reduce ATermElementFactor */
            {
                ArrayList<Object> list = new66();
                push(goTo(28), list, false);
            }
            break;
            case 67: /* reduce AMultiplicationElementFactor */
            {
                ArrayList<Object> list = new67();
                push(goTo(28), list, false);
            }
            break;
            case 68: /* reduce ADivisionElementFactor */
            {
                ArrayList<Object> list = new68();
                push(goTo(28), list, false);
            }
            break;
            case 69: /* reduce AModuloElementFactor */
            {
                ArrayList<Object> list = new69();
                push(goTo(28), list, false);
            }
            break;
            case 70: /* reduce ANumberElementTerm */
            {
                ArrayList<Object> list = new70();
                push(goTo(29), list, false);
            }
            break;
            case 71: /* reduce AElementElementTerm */
            {
                ArrayList<Object> list = new71();
                push(goTo(29), list, false);
            }
            break;
            case 72: /* reduce AExpressionElementTerm */
            {
                ArrayList<Object> list = new72();
                push(goTo(29), list, false);
            }
            break;
            case 73: /* reduce ATerminal$AdditionalStatementInstruction */
            {
                ArrayList<Object> list = new73();
                push(goTo(30), list, true);
            }
            break;
            case 74: /* reduce ANonTerminal$AdditionalStatementInstruction */
            {
                ArrayList<Object> list = new74();
                push(goTo(30), list, true);
            }
            break;
            case 75: /* reduce ATerminal$AdditionalQuestionInstruction */
            {
                ArrayList<Object> list = new75();
                push(goTo(31), list, true);
            }
            break;
            case 76: /* reduce ANonTerminal$AdditionalQuestionInstruction */
            {
                ArrayList<Object> list = new76();
                push(goTo(31), list, true);
            }
            break;
            case 77: /* reduce ATerminal$AdditionalProofInstruction */
            {
                ArrayList<Object> list = new77();
                push(goTo(32), list, true);
            }
            break;
            case 78: /* reduce ANonTerminal$AdditionalProofInstruction */
            {
                ArrayList<Object> list = new78();
                push(goTo(32), list, true);
            }
            break;
            case 79: /* reduce ATerminal$PropositionList */
            {
                ArrayList<Object> list = new79();
                push(goTo(33), list, true);
            }
            break;
            case 80: /* reduce ANonTerminal$PropositionList */
            {
                ArrayList<Object> list = new80();
                push(goTo(33), list, true);
            }
            break;
            case 81: /* reduce ATerminal$AdditionalProposition */
            {
                ArrayList<Object> list = new81();
                push(goTo(34), list, true);
            }
            break;
            case 82: /* reduce ANonTerminal$AdditionalProposition */
            {
                ArrayList<Object> list = new82();
                push(goTo(34), list, true);
            }
            break;
        }
    }



    @SuppressWarnings({ "unchecked", "rawtypes" })
    ArrayList<Object> new0() /* reduce AProgram */
    {
        @SuppressWarnings("hiding") ArrayList<Object> nodeList = new ArrayList<Object>();

        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList3 = pop();
        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList2 = pop();
        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList1 = pop();
        PProgram pprogramNode1;
        {
            // Block
        TCategory tcategoryNode2;
        TSemicolon tsemicolonNode3;
        PInstructions pinstructionsNode4;
        tcategoryNode2 = (TCategory)nodeArrayList1.get(0);
        tsemicolonNode3 = (TSemicolon)nodeArrayList2.get(0);
        pinstructionsNode4 = (PInstructions)nodeArrayList3.get(0);

        pprogramNode1 = new AProgram(tcategoryNode2, tsemicolonNode3, pinstructionsNode4);
        }
	nodeList.add(pprogramNode1);
        return nodeList;
    }



    @SuppressWarnings({ "unchecked", "rawtypes" })
    ArrayList<Object> new1() /* reduce AInstructions */
    {
        @SuppressWarnings("hiding") ArrayList<Object> nodeList = new ArrayList<Object>();

        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList3 = pop();
        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList2 = pop();
        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList1 = pop();
        PInstructions pinstructionsNode1;
        {
            // Block
        PStatementBlock pstatementblockNode2;
        PQuestionBlock pquestionblockNode3;
        PProofBlock pproofblockNode4;
        pstatementblockNode2 = (PStatementBlock)nodeArrayList1.get(0);
        pquestionblockNode3 = (PQuestionBlock)nodeArrayList2.get(0);
        pproofblockNode4 = (PProofBlock)nodeArrayList3.get(0);

        pinstructionsNode1 = new AInstructions(pstatementblockNode2, pquestionblockNode3, pproofblockNode4);
        }
	nodeList.add(pinstructionsNode1);
        return nodeList;
    }



    @SuppressWarnings({ "unchecked", "rawtypes" })
    ArrayList<Object> new2() /* reduce AStatementBlock */
    {
        @SuppressWarnings("hiding") ArrayList<Object> nodeList = new ArrayList<Object>();

        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList3 = pop();
        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList2 = pop();
        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList1 = pop();
        PStatementBlock pstatementblockNode1;
        {
            // Block
        TStatement tstatementNode2;
        TColumn tcolumnNode3;
        PStatementInstructionList pstatementinstructionlistNode4;
        tstatementNode2 = (TStatement)nodeArrayList1.get(0);
        tcolumnNode3 = (TColumn)nodeArrayList2.get(0);
        pstatementinstructionlistNode4 = (PStatementInstructionList)nodeArrayList3.get(0);

        pstatementblockNode1 = new AStatementBlock(tstatementNode2, tcolumnNode3, pstatementinstructionlistNode4);
        }
	nodeList.add(pstatementblockNode1);
        return nodeList;
    }



    @SuppressWarnings({ "unchecked", "rawtypes" })
    ArrayList<Object> new3() /* reduce AQuestionBlock */
    {
        @SuppressWarnings("hiding") ArrayList<Object> nodeList = new ArrayList<Object>();

        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList3 = pop();
        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList2 = pop();
        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList1 = pop();
        PQuestionBlock pquestionblockNode1;
        {
            // Block
        TQuestion tquestionNode2;
        TColumn tcolumnNode3;
        PQuestionInstructionList pquestioninstructionlistNode4;
        tquestionNode2 = (TQuestion)nodeArrayList1.get(0);
        tcolumnNode3 = (TColumn)nodeArrayList2.get(0);
        pquestioninstructionlistNode4 = (PQuestionInstructionList)nodeArrayList3.get(0);

        pquestionblockNode1 = new AQuestionBlock(tquestionNode2, tcolumnNode3, pquestioninstructionlistNode4);
        }
	nodeList.add(pquestionblockNode1);
        return nodeList;
    }



    @SuppressWarnings({ "unchecked", "rawtypes" })
    ArrayList<Object> new4() /* reduce AProofBlock */
    {
        @SuppressWarnings("hiding") ArrayList<Object> nodeList = new ArrayList<Object>();

        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList3 = pop();
        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList2 = pop();
        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList1 = pop();
        PProofBlock pproofblockNode1;
        {
            // Block
        TProof tproofNode2;
        TColumn tcolumnNode3;
        PProofInstructionList pproofinstructionlistNode4;
        tproofNode2 = (TProof)nodeArrayList1.get(0);
        tcolumnNode3 = (TColumn)nodeArrayList2.get(0);
        pproofinstructionlistNode4 = (PProofInstructionList)nodeArrayList3.get(0);

        pproofblockNode1 = new AProofBlock(tproofNode2, tcolumnNode3, pproofinstructionlistNode4);
        }
	nodeList.add(pproofblockNode1);
        return nodeList;
    }



    @SuppressWarnings({ "unchecked", "rawtypes" })
    ArrayList<Object> new5() /* reduce AAstatementinstructionlist1StatementInstructionList */
    {
        @SuppressWarnings("hiding") ArrayList<Object> nodeList = new ArrayList<Object>();

        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList2 = pop();
        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList1 = pop();
        PStatementInstructionList pstatementinstructionlistNode1;
        {
            // Block
        PStatementInstruction pstatementinstructionNode2;
        LinkedList<Object> listNode3 = new LinkedList<Object>();
        TSemicolon tsemicolonNode4;
        pstatementinstructionNode2 = (PStatementInstruction)nodeArrayList1.get(0);
        {
            // Block
        }
        tsemicolonNode4 = (TSemicolon)nodeArrayList2.get(0);

        pstatementinstructionlistNode1 = new AStatementInstructionList(pstatementinstructionNode2, listNode3, tsemicolonNode4);
        }
	nodeList.add(pstatementinstructionlistNode1);
        return nodeList;
    }



    @SuppressWarnings({ "unchecked", "rawtypes" })
    ArrayList<Object> new6() /* reduce AAstatementinstructionlist2StatementInstructionList */
    {
        @SuppressWarnings("hiding") ArrayList<Object> nodeList = new ArrayList<Object>();

        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList3 = pop();
        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList2 = pop();
        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList1 = pop();
        PStatementInstructionList pstatementinstructionlistNode1;
        {
            // Block
        PStatementInstruction pstatementinstructionNode2;
        LinkedList<Object> listNode4 = new LinkedList<Object>();
        TSemicolon tsemicolonNode5;
        pstatementinstructionNode2 = (PStatementInstruction)nodeArrayList1.get(0);
        {
            // Block
        LinkedList<Object> listNode3 = new LinkedList<Object>();
        listNode3 = (LinkedList)nodeArrayList2.get(0);
	if(listNode3 != null)
	{
	  listNode4.addAll(listNode3);
	}
        }
        tsemicolonNode5 = (TSemicolon)nodeArrayList3.get(0);

        pstatementinstructionlistNode1 = new AStatementInstructionList(pstatementinstructionNode2, listNode4, tsemicolonNode5);
        }
	nodeList.add(pstatementinstructionlistNode1);
        return nodeList;
    }



    @SuppressWarnings({ "unchecked", "rawtypes" })
    ArrayList<Object> new7() /* reduce AAdditionalStatementInstruction */
    {
        @SuppressWarnings("hiding") ArrayList<Object> nodeList = new ArrayList<Object>();

        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList2 = pop();
        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList1 = pop();
        PAdditionalStatementInstruction padditionalstatementinstructionNode1;
        {
            // Block
        TComma tcommaNode2;
        PStatementInstruction pstatementinstructionNode3;
        tcommaNode2 = (TComma)nodeArrayList1.get(0);
        pstatementinstructionNode3 = (PStatementInstruction)nodeArrayList2.get(0);

        padditionalstatementinstructionNode1 = new AAdditionalStatementInstruction(tcommaNode2, pstatementinstructionNode3);
        }
	nodeList.add(padditionalstatementinstructionNode1);
        return nodeList;
    }



    @SuppressWarnings({ "unchecked", "rawtypes" })
    ArrayList<Object> new8() /* reduce ADeclarationStatementInstruction */
    {
        @SuppressWarnings("hiding") ArrayList<Object> nodeList = new ArrayList<Object>();

        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList2 = pop();
        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList1 = pop();
        PStatementInstruction pstatementinstructionNode1;
        {
            // Block
        TLet tletNode2;
        TSetIdentifier tsetidentifierNode3;
        tletNode2 = (TLet)nodeArrayList1.get(0);
        tsetidentifierNode3 = (TSetIdentifier)nodeArrayList2.get(0);

        pstatementinstructionNode1 = new ADeclarationStatementInstruction(tletNode2, tsetidentifierNode3);
        }
	nodeList.add(pstatementinstructionNode1);
        return nodeList;
    }



    @SuppressWarnings({ "unchecked", "rawtypes" })
    ArrayList<Object> new9() /* reduce AAssignmentStatementInstruction */
    {
        @SuppressWarnings("hiding") ArrayList<Object> nodeList = new ArrayList<Object>();

        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList9 = pop();
        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList8 = pop();
        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList7 = pop();
        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList6 = pop();
        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList5 = pop();
        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList4 = pop();
        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList3 = pop();
        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList2 = pop();
        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList1 = pop();
        PStatementInstruction pstatementinstructionNode1;
        {
            // Block
        TSetIdentifier tsetidentifierNode2;
        TEqualTo tequaltoNode3;
        TLeftBrace tleftbraceNode4;
        TElementIdentifier telementidentifierNode5;
        TElementOf telementofNode6;
        TSetIdentifier tsetidentifierNode7;
        TSuchAs tsuchasNode8;
        PElementExpression pelementexpressionNode9;
        TRightBrace trightbraceNode10;
        tsetidentifierNode2 = (TSetIdentifier)nodeArrayList1.get(0);
        tequaltoNode3 = (TEqualTo)nodeArrayList2.get(0);
        tleftbraceNode4 = (TLeftBrace)nodeArrayList3.get(0);
        telementidentifierNode5 = (TElementIdentifier)nodeArrayList4.get(0);
        telementofNode6 = (TElementOf)nodeArrayList5.get(0);
        tsetidentifierNode7 = (TSetIdentifier)nodeArrayList6.get(0);
        tsuchasNode8 = (TSuchAs)nodeArrayList7.get(0);
        pelementexpressionNode9 = (PElementExpression)nodeArrayList8.get(0);
        trightbraceNode10 = (TRightBrace)nodeArrayList9.get(0);

        pstatementinstructionNode1 = new AAssignmentStatementInstruction(tsetidentifierNode2, tequaltoNode3, tleftbraceNode4, telementidentifierNode5, telementofNode6, tsetidentifierNode7, tsuchasNode8, pelementexpressionNode9, trightbraceNode10);
        }
	nodeList.add(pstatementinstructionNode1);
        return nodeList;
    }



    @SuppressWarnings({ "unchecked", "rawtypes" })
    ArrayList<Object> new10() /* reduce ADefinitionStatementInstruction */
    {
        @SuppressWarnings("hiding") ArrayList<Object> nodeList = new ArrayList<Object>();

        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList10 = pop();
        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList9 = pop();
        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList8 = pop();
        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList7 = pop();
        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList6 = pop();
        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList5 = pop();
        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList4 = pop();
        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList3 = pop();
        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList2 = pop();
        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList1 = pop();
        PStatementInstruction pstatementinstructionNode1;
        {
            // Block
        TLet tletNode2;
        TSetIdentifier tsetidentifierNode3;
        TEqualTo tequaltoNode4;
        TLeftBrace tleftbraceNode5;
        TElementIdentifier telementidentifierNode6;
        TElementOf telementofNode7;
        TSetIdentifier tsetidentifierNode8;
        TSuchAs tsuchasNode9;
        PElementExpression pelementexpressionNode10;
        TRightBrace trightbraceNode11;
        tletNode2 = (TLet)nodeArrayList1.get(0);
        tsetidentifierNode3 = (TSetIdentifier)nodeArrayList2.get(0);
        tequaltoNode4 = (TEqualTo)nodeArrayList3.get(0);
        tleftbraceNode5 = (TLeftBrace)nodeArrayList4.get(0);
        telementidentifierNode6 = (TElementIdentifier)nodeArrayList5.get(0);
        telementofNode7 = (TElementOf)nodeArrayList6.get(0);
        tsetidentifierNode8 = (TSetIdentifier)nodeArrayList7.get(0);
        tsuchasNode9 = (TSuchAs)nodeArrayList8.get(0);
        pelementexpressionNode10 = (PElementExpression)nodeArrayList9.get(0);
        trightbraceNode11 = (TRightBrace)nodeArrayList10.get(0);

        pstatementinstructionNode1 = new ADefinitionStatementInstruction(tletNode2, tsetidentifierNode3, tequaltoNode4, tleftbraceNode5, telementidentifierNode6, telementofNode7, tsetidentifierNode8, tsuchasNode9, pelementexpressionNode10, trightbraceNode11);
        }
	nodeList.add(pstatementinstructionNode1);
        return nodeList;
    }



    @SuppressWarnings({ "unchecked", "rawtypes" })
    ArrayList<Object> new11() /* reduce AAquestioninstructionlist1QuestionInstructionList */
    {
        @SuppressWarnings("hiding") ArrayList<Object> nodeList = new ArrayList<Object>();

        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList2 = pop();
        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList1 = pop();
        PQuestionInstructionList pquestioninstructionlistNode1;
        {
            // Block
        PQuestionInstruction pquestioninstructionNode2;
        LinkedList<Object> listNode3 = new LinkedList<Object>();
        TSemicolon tsemicolonNode4;
        pquestioninstructionNode2 = (PQuestionInstruction)nodeArrayList1.get(0);
        {
            // Block
        }
        tsemicolonNode4 = (TSemicolon)nodeArrayList2.get(0);

        pquestioninstructionlistNode1 = new AQuestionInstructionList(pquestioninstructionNode2, listNode3, tsemicolonNode4);
        }
	nodeList.add(pquestioninstructionlistNode1);
        return nodeList;
    }



    @SuppressWarnings({ "unchecked", "rawtypes" })
    ArrayList<Object> new12() /* reduce AAquestioninstructionlist2QuestionInstructionList */
    {
        @SuppressWarnings("hiding") ArrayList<Object> nodeList = new ArrayList<Object>();

        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList3 = pop();
        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList2 = pop();
        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList1 = pop();
        PQuestionInstructionList pquestioninstructionlistNode1;
        {
            // Block
        PQuestionInstruction pquestioninstructionNode2;
        LinkedList<Object> listNode4 = new LinkedList<Object>();
        TSemicolon tsemicolonNode5;
        pquestioninstructionNode2 = (PQuestionInstruction)nodeArrayList1.get(0);
        {
            // Block
        LinkedList<Object> listNode3 = new LinkedList<Object>();
        listNode3 = (LinkedList)nodeArrayList2.get(0);
	if(listNode3 != null)
	{
	  listNode4.addAll(listNode3);
	}
        }
        tsemicolonNode5 = (TSemicolon)nodeArrayList3.get(0);

        pquestioninstructionlistNode1 = new AQuestionInstructionList(pquestioninstructionNode2, listNode4, tsemicolonNode5);
        }
	nodeList.add(pquestioninstructionlistNode1);
        return nodeList;
    }



    @SuppressWarnings({ "unchecked", "rawtypes" })
    ArrayList<Object> new13() /* reduce AAdditionalQuestionInstruction */
    {
        @SuppressWarnings("hiding") ArrayList<Object> nodeList = new ArrayList<Object>();

        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList2 = pop();
        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList1 = pop();
        PAdditionalQuestionInstruction padditionalquestioninstructionNode1;
        {
            // Block
        TComma tcommaNode2;
        PQuestionInstruction pquestioninstructionNode3;
        tcommaNode2 = (TComma)nodeArrayList1.get(0);
        pquestioninstructionNode3 = (PQuestionInstruction)nodeArrayList2.get(0);

        padditionalquestioninstructionNode1 = new AAdditionalQuestionInstruction(tcommaNode2, pquestioninstructionNode3);
        }
	nodeList.add(padditionalquestioninstructionNode1);
        return nodeList;
    }



    @SuppressWarnings({ "unchecked", "rawtypes" })
    ArrayList<Object> new14() /* reduce AQuestionInstruction */
    {
        @SuppressWarnings("hiding") ArrayList<Object> nodeList = new ArrayList<Object>();

        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList4 = pop();
        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList3 = pop();
        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList2 = pop();
        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList1 = pop();
        PQuestionInstruction pquestioninstructionNode1;
        {
            // Block
        TTagNumber ttagnumberNode2;
        TColumn tcolumnNode3;
        TShow tshowNode4;
        PSetExpression psetexpressionNode5;
        ttagnumberNode2 = (TTagNumber)nodeArrayList1.get(0);
        tcolumnNode3 = (TColumn)nodeArrayList2.get(0);
        tshowNode4 = (TShow)nodeArrayList3.get(0);
        psetexpressionNode5 = (PSetExpression)nodeArrayList4.get(0);

        pquestioninstructionNode1 = new AQuestionInstruction(ttagnumberNode2, tcolumnNode3, tshowNode4, psetexpressionNode5);
        }
	nodeList.add(pquestioninstructionNode1);
        return nodeList;
    }



    @SuppressWarnings({ "unchecked", "rawtypes" })
    ArrayList<Object> new15() /* reduce AAproofinstructionlist1ProofInstructionList */
    {
        @SuppressWarnings("hiding") ArrayList<Object> nodeList = new ArrayList<Object>();

        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList1 = pop();
        PProofInstructionList pproofinstructionlistNode1;
        {
            // Block
        PProofInstruction pproofinstructionNode2;
        LinkedList<Object> listNode3 = new LinkedList<Object>();
        pproofinstructionNode2 = (PProofInstruction)nodeArrayList1.get(0);
        {
            // Block
        }

        pproofinstructionlistNode1 = new AProofInstructionList(pproofinstructionNode2, listNode3);
        }
	nodeList.add(pproofinstructionlistNode1);
        return nodeList;
    }



    @SuppressWarnings({ "unchecked", "rawtypes" })
    ArrayList<Object> new16() /* reduce AAproofinstructionlist2ProofInstructionList */
    {
        @SuppressWarnings("hiding") ArrayList<Object> nodeList = new ArrayList<Object>();

        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList2 = pop();
        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList1 = pop();
        PProofInstructionList pproofinstructionlistNode1;
        {
            // Block
        PProofInstruction pproofinstructionNode2;
        LinkedList<Object> listNode4 = new LinkedList<Object>();
        pproofinstructionNode2 = (PProofInstruction)nodeArrayList1.get(0);
        {
            // Block
        LinkedList<Object> listNode3 = new LinkedList<Object>();
        listNode3 = (LinkedList)nodeArrayList2.get(0);
	if(listNode3 != null)
	{
	  listNode4.addAll(listNode3);
	}
        }

        pproofinstructionlistNode1 = new AProofInstructionList(pproofinstructionNode2, listNode4);
        }
	nodeList.add(pproofinstructionlistNode1);
        return nodeList;
    }



    @SuppressWarnings({ "unchecked", "rawtypes" })
    ArrayList<Object> new17() /* reduce AAdditionalProofInstruction */
    {
        @SuppressWarnings("hiding") ArrayList<Object> nodeList = new ArrayList<Object>();

        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList1 = pop();
        PAdditionalProofInstruction padditionalproofinstructionNode1;
        {
            // Block
        PProofInstruction pproofinstructionNode2;
        pproofinstructionNode2 = (PProofInstruction)nodeArrayList1.get(0);

        padditionalproofinstructionNode1 = new AAdditionalProofInstruction(pproofinstructionNode2);
        }
	nodeList.add(padditionalproofinstructionNode1);
        return nodeList;
    }



    @SuppressWarnings({ "unchecked", "rawtypes" })
    ArrayList<Object> new18() /* reduce AProofInstruction */
    {
        @SuppressWarnings("hiding") ArrayList<Object> nodeList = new ArrayList<Object>();

        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList5 = pop();
        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList4 = pop();
        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList3 = pop();
        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList2 = pop();
        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList1 = pop();
        PProofInstruction pproofinstructionNode1;
        {
            // Block
        TTagNumber ttagnumberNode2;
        TColumn tcolumnNode3;
        PDemonstration pdemonstrationNode4;
        TDone tdoneNode5;
        TSemicolon tsemicolonNode6;
        ttagnumberNode2 = (TTagNumber)nodeArrayList1.get(0);
        tcolumnNode3 = (TColumn)nodeArrayList2.get(0);
        pdemonstrationNode4 = (PDemonstration)nodeArrayList3.get(0);
        tdoneNode5 = (TDone)nodeArrayList4.get(0);
        tsemicolonNode6 = (TSemicolon)nodeArrayList5.get(0);

        pproofinstructionNode1 = new AProofInstruction(ttagnumberNode2, tcolumnNode3, pdemonstrationNode4, tdoneNode5, tsemicolonNode6);
        }
	nodeList.add(pproofinstructionNode1);
        return nodeList;
    }



    @SuppressWarnings({ "unchecked", "rawtypes" })
    ArrayList<Object> new19() /* reduce ADemonstration */
    {
        @SuppressWarnings("hiding") ArrayList<Object> nodeList = new ArrayList<Object>();

        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList1 = pop();
        PDemonstration pdemonstrationNode1;
        {
            // Block
        LinkedList<Object> listNode3 = new LinkedList<Object>();
        {
            // Block
        LinkedList<Object> listNode2 = new LinkedList<Object>();
        listNode2 = (LinkedList)nodeArrayList1.get(0);
	if(listNode2 != null)
	{
	  listNode3.addAll(listNode2);
	}
        }

        pdemonstrationNode1 = new ADemonstration(listNode3);
        }
	nodeList.add(pdemonstrationNode1);
        return nodeList;
    }



    @SuppressWarnings({ "unchecked", "rawtypes" })
    ArrayList<Object> new20() /* reduce AApropositionlist1PropositionList */
    {
        @SuppressWarnings("hiding") ArrayList<Object> nodeList = new ArrayList<Object>();

        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList2 = pop();
        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList1 = pop();
        PPropositionList ppropositionlistNode1;
        {
            // Block
        PProposition ppropositionNode2;
        LinkedList<Object> listNode3 = new LinkedList<Object>();
        TSemicolon tsemicolonNode4;
        ppropositionNode2 = (PProposition)nodeArrayList1.get(0);
        {
            // Block
        }
        tsemicolonNode4 = (TSemicolon)nodeArrayList2.get(0);

        ppropositionlistNode1 = new APropositionList(ppropositionNode2, listNode3, tsemicolonNode4);
        }
	nodeList.add(ppropositionlistNode1);
        return nodeList;
    }



    @SuppressWarnings({ "unchecked", "rawtypes" })
    ArrayList<Object> new21() /* reduce AApropositionlist2PropositionList */
    {
        @SuppressWarnings("hiding") ArrayList<Object> nodeList = new ArrayList<Object>();

        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList3 = pop();
        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList2 = pop();
        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList1 = pop();
        PPropositionList ppropositionlistNode1;
        {
            // Block
        PProposition ppropositionNode2;
        LinkedList<Object> listNode4 = new LinkedList<Object>();
        TSemicolon tsemicolonNode5;
        ppropositionNode2 = (PProposition)nodeArrayList1.get(0);
        {
            // Block
        LinkedList<Object> listNode3 = new LinkedList<Object>();
        listNode3 = (LinkedList)nodeArrayList2.get(0);
	if(listNode3 != null)
	{
	  listNode4.addAll(listNode3);
	}
        }
        tsemicolonNode5 = (TSemicolon)nodeArrayList3.get(0);

        ppropositionlistNode1 = new APropositionList(ppropositionNode2, listNode4, tsemicolonNode5);
        }
	nodeList.add(ppropositionlistNode1);
        return nodeList;
    }



    @SuppressWarnings({ "unchecked", "rawtypes" })
    ArrayList<Object> new22() /* reduce AImplicationAdditionalProposition */
    {
        @SuppressWarnings("hiding") ArrayList<Object> nodeList = new ArrayList<Object>();

        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList2 = pop();
        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList1 = pop();
        PAdditionalProposition padditionalpropositionNode1;
        {
            // Block
        TImplicationSign timplicationsignNode2;
        PProposition ppropositionNode3;
        timplicationsignNode2 = (TImplicationSign)nodeArrayList1.get(0);
        ppropositionNode3 = (PProposition)nodeArrayList2.get(0);

        padditionalpropositionNode1 = new AImplicationAdditionalProposition(timplicationsignNode2, ppropositionNode3);
        }
	nodeList.add(padditionalpropositionNode1);
        return nodeList;
    }



    @SuppressWarnings({ "unchecked", "rawtypes" })
    ArrayList<Object> new23() /* reduce AEquivalenceAdditionalProposition */
    {
        @SuppressWarnings("hiding") ArrayList<Object> nodeList = new ArrayList<Object>();

        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList2 = pop();
        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList1 = pop();
        PAdditionalProposition padditionalpropositionNode1;
        {
            // Block
        TEquivalenceSign tequivalencesignNode2;
        PProposition ppropositionNode3;
        tequivalencesignNode2 = (TEquivalenceSign)nodeArrayList1.get(0);
        ppropositionNode3 = (PProposition)nodeArrayList2.get(0);

        padditionalpropositionNode1 = new AEquivalenceAdditionalProposition(tequivalencesignNode2, ppropositionNode3);
        }
	nodeList.add(padditionalpropositionNode1);
        return nodeList;
    }



    @SuppressWarnings({ "unchecked", "rawtypes" })
    ArrayList<Object> new24() /* reduce AExpressionProposition */
    {
        @SuppressWarnings("hiding") ArrayList<Object> nodeList = new ArrayList<Object>();

        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList1 = pop();
        PProposition ppropositionNode1;
        {
            // Block
        PExpression pexpressionNode2;
        pexpressionNode2 = (PExpression)nodeArrayList1.get(0);

        ppropositionNode1 = new AExpressionProposition(pexpressionNode2);
        }
	nodeList.add(ppropositionNode1);
        return nodeList;
    }



    @SuppressWarnings({ "unchecked", "rawtypes" })
    ArrayList<Object> new25() /* reduce AForAllProposition */
    {
        @SuppressWarnings("hiding") ArrayList<Object> nodeList = new ArrayList<Object>();

        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList6 = pop();
        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList5 = pop();
        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList4 = pop();
        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList3 = pop();
        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList2 = pop();
        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList1 = pop();
        PProposition ppropositionNode1;
        {
            // Block
        TForAll tforallNode2;
        TElementIdentifier telementidentifierNode3;
        TElementOf telementofNode4;
        TSetIdentifier tsetidentifierNode5;
        TComma tcommaNode6;
        PExpression pexpressionNode7;
        tforallNode2 = (TForAll)nodeArrayList1.get(0);
        telementidentifierNode3 = (TElementIdentifier)nodeArrayList2.get(0);
        telementofNode4 = (TElementOf)nodeArrayList3.get(0);
        tsetidentifierNode5 = (TSetIdentifier)nodeArrayList4.get(0);
        tcommaNode6 = (TComma)nodeArrayList5.get(0);
        pexpressionNode7 = (PExpression)nodeArrayList6.get(0);

        ppropositionNode1 = new AForAllProposition(tforallNode2, telementidentifierNode3, telementofNode4, tsetidentifierNode5, tcommaNode6, pexpressionNode7);
        }
	nodeList.add(ppropositionNode1);
        return nodeList;
    }



    @SuppressWarnings({ "unchecked", "rawtypes" })
    ArrayList<Object> new26() /* reduce AExistProposition */
    {
        @SuppressWarnings("hiding") ArrayList<Object> nodeList = new ArrayList<Object>();

        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList6 = pop();
        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList5 = pop();
        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList4 = pop();
        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList3 = pop();
        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList2 = pop();
        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList1 = pop();
        PProposition ppropositionNode1;
        {
            // Block
        TExist texistNode2;
        TElementIdentifier telementidentifierNode3;
        TElementOf telementofNode4;
        TSetIdentifier tsetidentifierNode5;
        TComma tcommaNode6;
        PExpression pexpressionNode7;
        texistNode2 = (TExist)nodeArrayList1.get(0);
        telementidentifierNode3 = (TElementIdentifier)nodeArrayList2.get(0);
        telementofNode4 = (TElementOf)nodeArrayList3.get(0);
        tsetidentifierNode5 = (TSetIdentifier)nodeArrayList4.get(0);
        tcommaNode6 = (TComma)nodeArrayList5.get(0);
        pexpressionNode7 = (PExpression)nodeArrayList6.get(0);

        ppropositionNode1 = new AExistProposition(texistNode2, telementidentifierNode3, telementofNode4, tsetidentifierNode5, tcommaNode6, pexpressionNode7);
        }
	nodeList.add(ppropositionNode1);
        return nodeList;
    }



    @SuppressWarnings({ "unchecked", "rawtypes" })
    ArrayList<Object> new27() /* reduce AExpressionExpression */
    {
        @SuppressWarnings("hiding") ArrayList<Object> nodeList = new ArrayList<Object>();

        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList3 = pop();
        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList2 = pop();
        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList1 = pop();
        PExpression pexpressionNode1;
        {
            // Block
        PElementExpression pelementexpressionNode2;
        TElementOf telementofNode3;
        PSetExpression psetexpressionNode4;
        pelementexpressionNode2 = (PElementExpression)nodeArrayList1.get(0);
        telementofNode3 = (TElementOf)nodeArrayList2.get(0);
        psetexpressionNode4 = (PSetExpression)nodeArrayList3.get(0);

        pexpressionNode1 = new AExpressionExpression(pelementexpressionNode2, telementofNode3, psetexpressionNode4);
        }
	nodeList.add(pexpressionNode1);
        return nodeList;
    }



    @SuppressWarnings({ "unchecked", "rawtypes" })
    ArrayList<Object> new28() /* reduce ASetExpressionExpression */
    {
        @SuppressWarnings("hiding") ArrayList<Object> nodeList = new ArrayList<Object>();

        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList1 = pop();
        PExpression pexpressionNode1;
        {
            // Block
        PSetExpression psetexpressionNode2;
        psetexpressionNode2 = (PSetExpression)nodeArrayList1.get(0);

        pexpressionNode1 = new ASetExpressionExpression(psetexpressionNode2);
        }
	nodeList.add(pexpressionNode1);
        return nodeList;
    }



    @SuppressWarnings({ "unchecked", "rawtypes" })
    ArrayList<Object> new29() /* reduce AElementExpressionExpression */
    {
        @SuppressWarnings("hiding") ArrayList<Object> nodeList = new ArrayList<Object>();

        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList1 = pop();
        PExpression pexpressionNode1;
        {
            // Block
        PElementExpression pelementexpressionNode2;
        pelementexpressionNode2 = (PElementExpression)nodeArrayList1.get(0);

        pexpressionNode1 = new AElementExpressionExpression(pelementexpressionNode2);
        }
	nodeList.add(pexpressionNode1);
        return nodeList;
    }



    @SuppressWarnings({ "unchecked", "rawtypes" })
    ArrayList<Object> new30() /* reduce AComparisonSetExpression */
    {
        @SuppressWarnings("hiding") ArrayList<Object> nodeList = new ArrayList<Object>();

        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList1 = pop();
        PSetExpression psetexpressionNode1;
        {
            // Block
        PSetComparison psetcomparisonNode2;
        psetcomparisonNode2 = (PSetComparison)nodeArrayList1.get(0);

        psetexpressionNode1 = new AComparisonSetExpression(psetcomparisonNode2);
        }
	nodeList.add(psetexpressionNode1);
        return nodeList;
    }



    @SuppressWarnings({ "unchecked", "rawtypes" })
    ArrayList<Object> new31() /* reduce ALogicalAndSetExpression */
    {
        @SuppressWarnings("hiding") ArrayList<Object> nodeList = new ArrayList<Object>();

        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList3 = pop();
        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList2 = pop();
        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList1 = pop();
        PSetExpression psetexpressionNode1;
        {
            // Block
        PSetExpression psetexpressionNode2;
        TLogicalAnd tlogicalandNode3;
        PSetComparison psetcomparisonNode4;
        psetexpressionNode2 = (PSetExpression)nodeArrayList1.get(0);
        tlogicalandNode3 = (TLogicalAnd)nodeArrayList2.get(0);
        psetcomparisonNode4 = (PSetComparison)nodeArrayList3.get(0);

        psetexpressionNode1 = new ALogicalAndSetExpression(psetexpressionNode2, tlogicalandNode3, psetcomparisonNode4);
        }
	nodeList.add(psetexpressionNode1);
        return nodeList;
    }



    @SuppressWarnings({ "unchecked", "rawtypes" })
    ArrayList<Object> new32() /* reduce ALogicalOrSetExpression */
    {
        @SuppressWarnings("hiding") ArrayList<Object> nodeList = new ArrayList<Object>();

        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList3 = pop();
        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList2 = pop();
        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList1 = pop();
        PSetExpression psetexpressionNode1;
        {
            // Block
        PSetExpression psetexpressionNode2;
        TLogicalOr tlogicalorNode3;
        PSetComparison psetcomparisonNode4;
        psetexpressionNode2 = (PSetExpression)nodeArrayList1.get(0);
        tlogicalorNode3 = (TLogicalOr)nodeArrayList2.get(0);
        psetcomparisonNode4 = (PSetComparison)nodeArrayList3.get(0);

        psetexpressionNode1 = new ALogicalOrSetExpression(psetexpressionNode2, tlogicalorNode3, psetcomparisonNode4);
        }
	nodeList.add(psetexpressionNode1);
        return nodeList;
    }



    @SuppressWarnings({ "unchecked", "rawtypes" })
    ArrayList<Object> new33() /* reduce AArithmeticSetComparison */
    {
        @SuppressWarnings("hiding") ArrayList<Object> nodeList = new ArrayList<Object>();

        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList1 = pop();
        PSetComparison psetcomparisonNode1;
        {
            // Block
        PSetArithmetic psetarithmeticNode2;
        psetarithmeticNode2 = (PSetArithmetic)nodeArrayList1.get(0);

        psetcomparisonNode1 = new AArithmeticSetComparison(psetarithmeticNode2);
        }
	nodeList.add(psetcomparisonNode1);
        return nodeList;
    }



    @SuppressWarnings({ "unchecked", "rawtypes" })
    ArrayList<Object> new34() /* reduce AEqualToSetComparison */
    {
        @SuppressWarnings("hiding") ArrayList<Object> nodeList = new ArrayList<Object>();

        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList3 = pop();
        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList2 = pop();
        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList1 = pop();
        PSetComparison psetcomparisonNode1;
        {
            // Block
        PSetComparison psetcomparisonNode2;
        TEqualTo tequaltoNode3;
        PSetArithmetic psetarithmeticNode4;
        psetcomparisonNode2 = (PSetComparison)nodeArrayList1.get(0);
        tequaltoNode3 = (TEqualTo)nodeArrayList2.get(0);
        psetarithmeticNode4 = (PSetArithmetic)nodeArrayList3.get(0);

        psetcomparisonNode1 = new AEqualToSetComparison(psetcomparisonNode2, tequaltoNode3, psetarithmeticNode4);
        }
	nodeList.add(psetcomparisonNode1);
        return nodeList;
    }



    @SuppressWarnings({ "unchecked", "rawtypes" })
    ArrayList<Object> new35() /* reduce ANotEqualToSetComparison */
    {
        @SuppressWarnings("hiding") ArrayList<Object> nodeList = new ArrayList<Object>();

        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList3 = pop();
        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList2 = pop();
        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList1 = pop();
        PSetComparison psetcomparisonNode1;
        {
            // Block
        PSetComparison psetcomparisonNode2;
        TNotEqualTo tnotequaltoNode3;
        PSetArithmetic psetarithmeticNode4;
        psetcomparisonNode2 = (PSetComparison)nodeArrayList1.get(0);
        tnotequaltoNode3 = (TNotEqualTo)nodeArrayList2.get(0);
        psetarithmeticNode4 = (PSetArithmetic)nodeArrayList3.get(0);

        psetcomparisonNode1 = new ANotEqualToSetComparison(psetcomparisonNode2, tnotequaltoNode3, psetarithmeticNode4);
        }
	nodeList.add(psetcomparisonNode1);
        return nodeList;
    }



    @SuppressWarnings({ "unchecked", "rawtypes" })
    ArrayList<Object> new36() /* reduce ASubsetOfSetComparison */
    {
        @SuppressWarnings("hiding") ArrayList<Object> nodeList = new ArrayList<Object>();

        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList3 = pop();
        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList2 = pop();
        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList1 = pop();
        PSetComparison psetcomparisonNode1;
        {
            // Block
        PSetComparison psetcomparisonNode2;
        TSubsetOf tsubsetofNode3;
        PSetArithmetic psetarithmeticNode4;
        psetcomparisonNode2 = (PSetComparison)nodeArrayList1.get(0);
        tsubsetofNode3 = (TSubsetOf)nodeArrayList2.get(0);
        psetarithmeticNode4 = (PSetArithmetic)nodeArrayList3.get(0);

        psetcomparisonNode1 = new ASubsetOfSetComparison(psetcomparisonNode2, tsubsetofNode3, psetarithmeticNode4);
        }
	nodeList.add(psetcomparisonNode1);
        return nodeList;
    }



    @SuppressWarnings({ "unchecked", "rawtypes" })
    ArrayList<Object> new37() /* reduce ANotASubsetOfSetComparison */
    {
        @SuppressWarnings("hiding") ArrayList<Object> nodeList = new ArrayList<Object>();

        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList3 = pop();
        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList2 = pop();
        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList1 = pop();
        PSetComparison psetcomparisonNode1;
        {
            // Block
        PSetComparison psetcomparisonNode2;
        TNotASubsetOf tnotasubsetofNode3;
        PSetArithmetic psetarithmeticNode4;
        psetcomparisonNode2 = (PSetComparison)nodeArrayList1.get(0);
        tnotasubsetofNode3 = (TNotASubsetOf)nodeArrayList2.get(0);
        psetarithmeticNode4 = (PSetArithmetic)nodeArrayList3.get(0);

        psetcomparisonNode1 = new ANotASubsetOfSetComparison(psetcomparisonNode2, tnotasubsetofNode3, psetarithmeticNode4);
        }
	nodeList.add(psetcomparisonNode1);
        return nodeList;
    }



    @SuppressWarnings({ "unchecked", "rawtypes" })
    ArrayList<Object> new38() /* reduce ASupersetOfSetComparison */
    {
        @SuppressWarnings("hiding") ArrayList<Object> nodeList = new ArrayList<Object>();

        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList3 = pop();
        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList2 = pop();
        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList1 = pop();
        PSetComparison psetcomparisonNode1;
        {
            // Block
        PSetComparison psetcomparisonNode2;
        TSupersetOf tsupersetofNode3;
        PSetArithmetic psetarithmeticNode4;
        psetcomparisonNode2 = (PSetComparison)nodeArrayList1.get(0);
        tsupersetofNode3 = (TSupersetOf)nodeArrayList2.get(0);
        psetarithmeticNode4 = (PSetArithmetic)nodeArrayList3.get(0);

        psetcomparisonNode1 = new ASupersetOfSetComparison(psetcomparisonNode2, tsupersetofNode3, psetarithmeticNode4);
        }
	nodeList.add(psetcomparisonNode1);
        return nodeList;
    }



    @SuppressWarnings({ "unchecked", "rawtypes" })
    ArrayList<Object> new39() /* reduce ANotASupersetOfSetComparison */
    {
        @SuppressWarnings("hiding") ArrayList<Object> nodeList = new ArrayList<Object>();

        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList3 = pop();
        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList2 = pop();
        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList1 = pop();
        PSetComparison psetcomparisonNode1;
        {
            // Block
        PSetComparison psetcomparisonNode2;
        TNotASupersetOf tnotasupersetofNode3;
        PSetArithmetic psetarithmeticNode4;
        psetcomparisonNode2 = (PSetComparison)nodeArrayList1.get(0);
        tnotasupersetofNode3 = (TNotASupersetOf)nodeArrayList2.get(0);
        psetarithmeticNode4 = (PSetArithmetic)nodeArrayList3.get(0);

        psetcomparisonNode1 = new ANotASupersetOfSetComparison(psetcomparisonNode2, tnotasupersetofNode3, psetarithmeticNode4);
        }
	nodeList.add(psetcomparisonNode1);
        return nodeList;
    }



    @SuppressWarnings({ "unchecked", "rawtypes" })
    ArrayList<Object> new40() /* reduce AFactorSetArithmetic */
    {
        @SuppressWarnings("hiding") ArrayList<Object> nodeList = new ArrayList<Object>();

        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList1 = pop();
        PSetArithmetic psetarithmeticNode1;
        {
            // Block
        PSetFactor psetfactorNode2;
        psetfactorNode2 = (PSetFactor)nodeArrayList1.get(0);

        psetarithmeticNode1 = new AFactorSetArithmetic(psetfactorNode2);
        }
	nodeList.add(psetarithmeticNode1);
        return nodeList;
    }



    @SuppressWarnings({ "unchecked", "rawtypes" })
    ArrayList<Object> new41() /* reduce APlusSetArithmetic */
    {
        @SuppressWarnings("hiding") ArrayList<Object> nodeList = new ArrayList<Object>();

        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList3 = pop();
        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList2 = pop();
        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList1 = pop();
        PSetArithmetic psetarithmeticNode1;
        {
            // Block
        PSetArithmetic psetarithmeticNode2;
        TPlus tplusNode3;
        PSetFactor psetfactorNode4;
        psetarithmeticNode2 = (PSetArithmetic)nodeArrayList1.get(0);
        tplusNode3 = (TPlus)nodeArrayList2.get(0);
        psetfactorNode4 = (PSetFactor)nodeArrayList3.get(0);

        psetarithmeticNode1 = new APlusSetArithmetic(psetarithmeticNode2, tplusNode3, psetfactorNode4);
        }
	nodeList.add(psetarithmeticNode1);
        return nodeList;
    }



    @SuppressWarnings({ "unchecked", "rawtypes" })
    ArrayList<Object> new42() /* reduce ADeprivedOfSetArithmetic */
    {
        @SuppressWarnings("hiding") ArrayList<Object> nodeList = new ArrayList<Object>();

        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList3 = pop();
        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList2 = pop();
        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList1 = pop();
        PSetArithmetic psetarithmeticNode1;
        {
            // Block
        PSetArithmetic psetarithmeticNode2;
        TDeprivedOf tdeprivedofNode3;
        PSetFactor psetfactorNode4;
        psetarithmeticNode2 = (PSetArithmetic)nodeArrayList1.get(0);
        tdeprivedofNode3 = (TDeprivedOf)nodeArrayList2.get(0);
        psetfactorNode4 = (PSetFactor)nodeArrayList3.get(0);

        psetarithmeticNode1 = new ADeprivedOfSetArithmetic(psetarithmeticNode2, tdeprivedofNode3, psetfactorNode4);
        }
	nodeList.add(psetarithmeticNode1);
        return nodeList;
    }



    @SuppressWarnings({ "unchecked", "rawtypes" })
    ArrayList<Object> new43() /* reduce ATermSetFactor */
    {
        @SuppressWarnings("hiding") ArrayList<Object> nodeList = new ArrayList<Object>();

        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList1 = pop();
        PSetFactor psetfactorNode1;
        {
            // Block
        PSetExponent psetexponentNode2;
        psetexponentNode2 = (PSetExponent)nodeArrayList1.get(0);

        psetfactorNode1 = new ATermSetFactor(psetexponentNode2);
        }
	nodeList.add(psetfactorNode1);
        return nodeList;
    }



    @SuppressWarnings({ "unchecked", "rawtypes" })
    ArrayList<Object> new44() /* reduce AMultSetFactor */
    {
        @SuppressWarnings("hiding") ArrayList<Object> nodeList = new ArrayList<Object>();

        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList3 = pop();
        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList2 = pop();
        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList1 = pop();
        PSetFactor psetfactorNode1;
        {
            // Block
        PSetFactor psetfactorNode2;
        TMultiplication tmultiplicationNode3;
        PSetExponent psetexponentNode4;
        psetfactorNode2 = (PSetFactor)nodeArrayList1.get(0);
        tmultiplicationNode3 = (TMultiplication)nodeArrayList2.get(0);
        psetexponentNode4 = (PSetExponent)nodeArrayList3.get(0);

        psetfactorNode1 = new AMultSetFactor(psetfactorNode2, tmultiplicationNode3, psetexponentNode4);
        }
	nodeList.add(psetfactorNode1);
        return nodeList;
    }



    @SuppressWarnings({ "unchecked", "rawtypes" })
    ArrayList<Object> new45() /* reduce ATermSetExponent */
    {
        @SuppressWarnings("hiding") ArrayList<Object> nodeList = new ArrayList<Object>();

        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList1 = pop();
        PSetExponent psetexponentNode1;
        {
            // Block
        PSetTerm psettermNode2;
        psettermNode2 = (PSetTerm)nodeArrayList1.get(0);

        psetexponentNode1 = new ATermSetExponent(psettermNode2);
        }
	nodeList.add(psetexponentNode1);
        return nodeList;
    }



    @SuppressWarnings({ "unchecked", "rawtypes" })
    ArrayList<Object> new46() /* reduce AExpSetExponent */
    {
        @SuppressWarnings("hiding") ArrayList<Object> nodeList = new ArrayList<Object>();

        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList3 = pop();
        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList2 = pop();
        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList1 = pop();
        PSetExponent psetexponentNode1;
        {
            // Block
        PSetExponent psetexponentNode2;
        TPower tpowerNode3;
        PSetTerm psettermNode4;
        psetexponentNode2 = (PSetExponent)nodeArrayList1.get(0);
        tpowerNode3 = (TPower)nodeArrayList2.get(0);
        psettermNode4 = (PSetTerm)nodeArrayList3.get(0);

        psetexponentNode1 = new AExpSetExponent(psetexponentNode2, tpowerNode3, psettermNode4);
        }
	nodeList.add(psetexponentNode1);
        return nodeList;
    }



    @SuppressWarnings({ "unchecked", "rawtypes" })
    ArrayList<Object> new47() /* reduce ASetSetTerm */
    {
        @SuppressWarnings("hiding") ArrayList<Object> nodeList = new ArrayList<Object>();

        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList1 = pop();
        PSetTerm psettermNode1;
        {
            // Block
        TSetIdentifier tsetidentifierNode2;
        tsetidentifierNode2 = (TSetIdentifier)nodeArrayList1.get(0);

        psettermNode1 = new ASetSetTerm(tsetidentifierNode2);
        }
	nodeList.add(psettermNode1);
        return nodeList;
    }



    @SuppressWarnings({ "unchecked", "rawtypes" })
    ArrayList<Object> new48() /* reduce AExpressionSetTerm */
    {
        @SuppressWarnings("hiding") ArrayList<Object> nodeList = new ArrayList<Object>();

        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList3 = pop();
        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList2 = pop();
        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList1 = pop();
        PSetTerm psettermNode1;
        {
            // Block
        TLeftParenthesis tleftparenthesisNode2;
        PSetExpression psetexpressionNode3;
        TRightParenthesis trightparenthesisNode4;
        tleftparenthesisNode2 = (TLeftParenthesis)nodeArrayList1.get(0);
        psetexpressionNode3 = (PSetExpression)nodeArrayList2.get(0);
        trightparenthesisNode4 = (TRightParenthesis)nodeArrayList3.get(0);

        psettermNode1 = new AExpressionSetTerm(tleftparenthesisNode2, psetexpressionNode3, trightparenthesisNode4);
        }
	nodeList.add(psettermNode1);
        return nodeList;
    }



    @SuppressWarnings({ "unchecked", "rawtypes" })
    ArrayList<Object> new49() /* reduce AComparisonElementExpression */
    {
        @SuppressWarnings("hiding") ArrayList<Object> nodeList = new ArrayList<Object>();

        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList1 = pop();
        PElementExpression pelementexpressionNode1;
        {
            // Block
        PElementComparison pelementcomparisonNode2;
        pelementcomparisonNode2 = (PElementComparison)nodeArrayList1.get(0);

        pelementexpressionNode1 = new AComparisonElementExpression(pelementcomparisonNode2);
        }
	nodeList.add(pelementexpressionNode1);
        return nodeList;
    }



    @SuppressWarnings({ "unchecked", "rawtypes" })
    ArrayList<Object> new50() /* reduce ALogicalAndElementExpression */
    {
        @SuppressWarnings("hiding") ArrayList<Object> nodeList = new ArrayList<Object>();

        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList3 = pop();
        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList2 = pop();
        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList1 = pop();
        PElementExpression pelementexpressionNode1;
        {
            // Block
        PElementExpression pelementexpressionNode2;
        TLogicalAnd tlogicalandNode3;
        PElementComparison pelementcomparisonNode4;
        pelementexpressionNode2 = (PElementExpression)nodeArrayList1.get(0);
        tlogicalandNode3 = (TLogicalAnd)nodeArrayList2.get(0);
        pelementcomparisonNode4 = (PElementComparison)nodeArrayList3.get(0);

        pelementexpressionNode1 = new ALogicalAndElementExpression(pelementexpressionNode2, tlogicalandNode3, pelementcomparisonNode4);
        }
	nodeList.add(pelementexpressionNode1);
        return nodeList;
    }



    @SuppressWarnings({ "unchecked", "rawtypes" })
    ArrayList<Object> new51() /* reduce ALogicalOrElementExpression */
    {
        @SuppressWarnings("hiding") ArrayList<Object> nodeList = new ArrayList<Object>();

        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList3 = pop();
        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList2 = pop();
        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList1 = pop();
        PElementExpression pelementexpressionNode1;
        {
            // Block
        PElementExpression pelementexpressionNode2;
        TLogicalOr tlogicalorNode3;
        PElementComparison pelementcomparisonNode4;
        pelementexpressionNode2 = (PElementExpression)nodeArrayList1.get(0);
        tlogicalorNode3 = (TLogicalOr)nodeArrayList2.get(0);
        pelementcomparisonNode4 = (PElementComparison)nodeArrayList3.get(0);

        pelementexpressionNode1 = new ALogicalOrElementExpression(pelementexpressionNode2, tlogicalorNode3, pelementcomparisonNode4);
        }
	nodeList.add(pelementexpressionNode1);
        return nodeList;
    }



    @SuppressWarnings({ "unchecked", "rawtypes" })
    ArrayList<Object> new52() /* reduce AArithmeticElementComparison */
    {
        @SuppressWarnings("hiding") ArrayList<Object> nodeList = new ArrayList<Object>();

        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList1 = pop();
        PElementComparison pelementcomparisonNode1;
        {
            // Block
        PElementArithmetic pelementarithmeticNode2;
        pelementarithmeticNode2 = (PElementArithmetic)nodeArrayList1.get(0);

        pelementcomparisonNode1 = new AArithmeticElementComparison(pelementarithmeticNode2);
        }
	nodeList.add(pelementcomparisonNode1);
        return nodeList;
    }



    @SuppressWarnings({ "unchecked", "rawtypes" })
    ArrayList<Object> new53() /* reduce AEqualToElementComparison */
    {
        @SuppressWarnings("hiding") ArrayList<Object> nodeList = new ArrayList<Object>();

        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList3 = pop();
        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList2 = pop();
        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList1 = pop();
        PElementComparison pelementcomparisonNode1;
        {
            // Block
        PElementComparison pelementcomparisonNode2;
        TEqualTo tequaltoNode3;
        PElementArithmetic pelementarithmeticNode4;
        pelementcomparisonNode2 = (PElementComparison)nodeArrayList1.get(0);
        tequaltoNode3 = (TEqualTo)nodeArrayList2.get(0);
        pelementarithmeticNode4 = (PElementArithmetic)nodeArrayList3.get(0);

        pelementcomparisonNode1 = new AEqualToElementComparison(pelementcomparisonNode2, tequaltoNode3, pelementarithmeticNode4);
        }
	nodeList.add(pelementcomparisonNode1);
        return nodeList;
    }



    @SuppressWarnings({ "unchecked", "rawtypes" })
    ArrayList<Object> new54() /* reduce ANotEqualToElementComparison */
    {
        @SuppressWarnings("hiding") ArrayList<Object> nodeList = new ArrayList<Object>();

        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList3 = pop();
        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList2 = pop();
        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList1 = pop();
        PElementComparison pelementcomparisonNode1;
        {
            // Block
        PElementComparison pelementcomparisonNode2;
        TNotEqualTo tnotequaltoNode3;
        PElementArithmetic pelementarithmeticNode4;
        pelementcomparisonNode2 = (PElementComparison)nodeArrayList1.get(0);
        tnotequaltoNode3 = (TNotEqualTo)nodeArrayList2.get(0);
        pelementarithmeticNode4 = (PElementArithmetic)nodeArrayList3.get(0);

        pelementcomparisonNode1 = new ANotEqualToElementComparison(pelementcomparisonNode2, tnotequaltoNode3, pelementarithmeticNode4);
        }
	nodeList.add(pelementcomparisonNode1);
        return nodeList;
    }



    @SuppressWarnings({ "unchecked", "rawtypes" })
    ArrayList<Object> new55() /* reduce AGreaterThanElementComparison */
    {
        @SuppressWarnings("hiding") ArrayList<Object> nodeList = new ArrayList<Object>();

        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList3 = pop();
        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList2 = pop();
        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList1 = pop();
        PElementComparison pelementcomparisonNode1;
        {
            // Block
        PElementComparison pelementcomparisonNode2;
        TGreaterThan tgreaterthanNode3;
        PElementArithmetic pelementarithmeticNode4;
        pelementcomparisonNode2 = (PElementComparison)nodeArrayList1.get(0);
        tgreaterthanNode3 = (TGreaterThan)nodeArrayList2.get(0);
        pelementarithmeticNode4 = (PElementArithmetic)nodeArrayList3.get(0);

        pelementcomparisonNode1 = new AGreaterThanElementComparison(pelementcomparisonNode2, tgreaterthanNode3, pelementarithmeticNode4);
        }
	nodeList.add(pelementcomparisonNode1);
        return nodeList;
    }



    @SuppressWarnings({ "unchecked", "rawtypes" })
    ArrayList<Object> new56() /* reduce ANotGreaterThanElementComparison */
    {
        @SuppressWarnings("hiding") ArrayList<Object> nodeList = new ArrayList<Object>();

        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList3 = pop();
        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList2 = pop();
        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList1 = pop();
        PElementComparison pelementcomparisonNode1;
        {
            // Block
        PElementComparison pelementcomparisonNode2;
        TNotGreaterThan tnotgreaterthanNode3;
        PElementArithmetic pelementarithmeticNode4;
        pelementcomparisonNode2 = (PElementComparison)nodeArrayList1.get(0);
        tnotgreaterthanNode3 = (TNotGreaterThan)nodeArrayList2.get(0);
        pelementarithmeticNode4 = (PElementArithmetic)nodeArrayList3.get(0);

        pelementcomparisonNode1 = new ANotGreaterThanElementComparison(pelementcomparisonNode2, tnotgreaterthanNode3, pelementarithmeticNode4);
        }
	nodeList.add(pelementcomparisonNode1);
        return nodeList;
    }



    @SuppressWarnings({ "unchecked", "rawtypes" })
    ArrayList<Object> new57() /* reduce ALessThanElementComparison */
    {
        @SuppressWarnings("hiding") ArrayList<Object> nodeList = new ArrayList<Object>();

        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList3 = pop();
        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList2 = pop();
        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList1 = pop();
        PElementComparison pelementcomparisonNode1;
        {
            // Block
        PElementComparison pelementcomparisonNode2;
        TLessThan tlessthanNode3;
        PElementArithmetic pelementarithmeticNode4;
        pelementcomparisonNode2 = (PElementComparison)nodeArrayList1.get(0);
        tlessthanNode3 = (TLessThan)nodeArrayList2.get(0);
        pelementarithmeticNode4 = (PElementArithmetic)nodeArrayList3.get(0);

        pelementcomparisonNode1 = new ALessThanElementComparison(pelementcomparisonNode2, tlessthanNode3, pelementarithmeticNode4);
        }
	nodeList.add(pelementcomparisonNode1);
        return nodeList;
    }



    @SuppressWarnings({ "unchecked", "rawtypes" })
    ArrayList<Object> new58() /* reduce ANotLessThanElementComparison */
    {
        @SuppressWarnings("hiding") ArrayList<Object> nodeList = new ArrayList<Object>();

        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList3 = pop();
        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList2 = pop();
        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList1 = pop();
        PElementComparison pelementcomparisonNode1;
        {
            // Block
        PElementComparison pelementcomparisonNode2;
        TNotLessThan tnotlessthanNode3;
        PElementArithmetic pelementarithmeticNode4;
        pelementcomparisonNode2 = (PElementComparison)nodeArrayList1.get(0);
        tnotlessthanNode3 = (TNotLessThan)nodeArrayList2.get(0);
        pelementarithmeticNode4 = (PElementArithmetic)nodeArrayList3.get(0);

        pelementcomparisonNode1 = new ANotLessThanElementComparison(pelementcomparisonNode2, tnotlessthanNode3, pelementarithmeticNode4);
        }
	nodeList.add(pelementcomparisonNode1);
        return nodeList;
    }



    @SuppressWarnings({ "unchecked", "rawtypes" })
    ArrayList<Object> new59() /* reduce AGreaterThanOrEqualToElementComparison */
    {
        @SuppressWarnings("hiding") ArrayList<Object> nodeList = new ArrayList<Object>();

        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList3 = pop();
        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList2 = pop();
        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList1 = pop();
        PElementComparison pelementcomparisonNode1;
        {
            // Block
        PElementComparison pelementcomparisonNode2;
        TGreaterThanOrEqualTo tgreaterthanorequaltoNode3;
        PElementArithmetic pelementarithmeticNode4;
        pelementcomparisonNode2 = (PElementComparison)nodeArrayList1.get(0);
        tgreaterthanorequaltoNode3 = (TGreaterThanOrEqualTo)nodeArrayList2.get(0);
        pelementarithmeticNode4 = (PElementArithmetic)nodeArrayList3.get(0);

        pelementcomparisonNode1 = new AGreaterThanOrEqualToElementComparison(pelementcomparisonNode2, tgreaterthanorequaltoNode3, pelementarithmeticNode4);
        }
	nodeList.add(pelementcomparisonNode1);
        return nodeList;
    }



    @SuppressWarnings({ "unchecked", "rawtypes" })
    ArrayList<Object> new60() /* reduce ANeitherGreaterThanNorEqualToElementComparison */
    {
        @SuppressWarnings("hiding") ArrayList<Object> nodeList = new ArrayList<Object>();

        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList3 = pop();
        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList2 = pop();
        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList1 = pop();
        PElementComparison pelementcomparisonNode1;
        {
            // Block
        PElementComparison pelementcomparisonNode2;
        TNeitherGreaterThanNorEqualTo tneithergreaterthannorequaltoNode3;
        PElementArithmetic pelementarithmeticNode4;
        pelementcomparisonNode2 = (PElementComparison)nodeArrayList1.get(0);
        tneithergreaterthannorequaltoNode3 = (TNeitherGreaterThanNorEqualTo)nodeArrayList2.get(0);
        pelementarithmeticNode4 = (PElementArithmetic)nodeArrayList3.get(0);

        pelementcomparisonNode1 = new ANeitherGreaterThanNorEqualToElementComparison(pelementcomparisonNode2, tneithergreaterthannorequaltoNode3, pelementarithmeticNode4);
        }
	nodeList.add(pelementcomparisonNode1);
        return nodeList;
    }



    @SuppressWarnings({ "unchecked", "rawtypes" })
    ArrayList<Object> new61() /* reduce ALessThanOrEqualToElementComparison */
    {
        @SuppressWarnings("hiding") ArrayList<Object> nodeList = new ArrayList<Object>();

        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList3 = pop();
        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList2 = pop();
        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList1 = pop();
        PElementComparison pelementcomparisonNode1;
        {
            // Block
        PElementComparison pelementcomparisonNode2;
        TLessThanOrEqualTo tlessthanorequaltoNode3;
        PElementArithmetic pelementarithmeticNode4;
        pelementcomparisonNode2 = (PElementComparison)nodeArrayList1.get(0);
        tlessthanorequaltoNode3 = (TLessThanOrEqualTo)nodeArrayList2.get(0);
        pelementarithmeticNode4 = (PElementArithmetic)nodeArrayList3.get(0);

        pelementcomparisonNode1 = new ALessThanOrEqualToElementComparison(pelementcomparisonNode2, tlessthanorequaltoNode3, pelementarithmeticNode4);
        }
	nodeList.add(pelementcomparisonNode1);
        return nodeList;
    }



    @SuppressWarnings({ "unchecked", "rawtypes" })
    ArrayList<Object> new62() /* reduce ANeitherLessThanNorEqualToElementComparison */
    {
        @SuppressWarnings("hiding") ArrayList<Object> nodeList = new ArrayList<Object>();

        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList3 = pop();
        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList2 = pop();
        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList1 = pop();
        PElementComparison pelementcomparisonNode1;
        {
            // Block
        PElementComparison pelementcomparisonNode2;
        TNeitherLessThanNorEqualTo tneitherlessthannorequaltoNode3;
        PElementArithmetic pelementarithmeticNode4;
        pelementcomparisonNode2 = (PElementComparison)nodeArrayList1.get(0);
        tneitherlessthannorequaltoNode3 = (TNeitherLessThanNorEqualTo)nodeArrayList2.get(0);
        pelementarithmeticNode4 = (PElementArithmetic)nodeArrayList3.get(0);

        pelementcomparisonNode1 = new ANeitherLessThanNorEqualToElementComparison(pelementcomparisonNode2, tneitherlessthannorequaltoNode3, pelementarithmeticNode4);
        }
	nodeList.add(pelementcomparisonNode1);
        return nodeList;
    }



    @SuppressWarnings({ "unchecked", "rawtypes" })
    ArrayList<Object> new63() /* reduce AFactorElementArithmetic */
    {
        @SuppressWarnings("hiding") ArrayList<Object> nodeList = new ArrayList<Object>();

        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList1 = pop();
        PElementArithmetic pelementarithmeticNode1;
        {
            // Block
        PElementFactor pelementfactorNode2;
        pelementfactorNode2 = (PElementFactor)nodeArrayList1.get(0);

        pelementarithmeticNode1 = new AFactorElementArithmetic(pelementfactorNode2);
        }
	nodeList.add(pelementarithmeticNode1);
        return nodeList;
    }



    @SuppressWarnings({ "unchecked", "rawtypes" })
    ArrayList<Object> new64() /* reduce APlusElementArithmetic */
    {
        @SuppressWarnings("hiding") ArrayList<Object> nodeList = new ArrayList<Object>();

        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList3 = pop();
        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList2 = pop();
        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList1 = pop();
        PElementArithmetic pelementarithmeticNode1;
        {
            // Block
        PElementArithmetic pelementarithmeticNode2;
        TPlus tplusNode3;
        PElementFactor pelementfactorNode4;
        pelementarithmeticNode2 = (PElementArithmetic)nodeArrayList1.get(0);
        tplusNode3 = (TPlus)nodeArrayList2.get(0);
        pelementfactorNode4 = (PElementFactor)nodeArrayList3.get(0);

        pelementarithmeticNode1 = new APlusElementArithmetic(pelementarithmeticNode2, tplusNode3, pelementfactorNode4);
        }
	nodeList.add(pelementarithmeticNode1);
        return nodeList;
    }



    @SuppressWarnings({ "unchecked", "rawtypes" })
    ArrayList<Object> new65() /* reduce AMinusElementArithmetic */
    {
        @SuppressWarnings("hiding") ArrayList<Object> nodeList = new ArrayList<Object>();

        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList3 = pop();
        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList2 = pop();
        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList1 = pop();
        PElementArithmetic pelementarithmeticNode1;
        {
            // Block
        PElementArithmetic pelementarithmeticNode2;
        TMinus tminusNode3;
        PElementFactor pelementfactorNode4;
        pelementarithmeticNode2 = (PElementArithmetic)nodeArrayList1.get(0);
        tminusNode3 = (TMinus)nodeArrayList2.get(0);
        pelementfactorNode4 = (PElementFactor)nodeArrayList3.get(0);

        pelementarithmeticNode1 = new AMinusElementArithmetic(pelementarithmeticNode2, tminusNode3, pelementfactorNode4);
        }
	nodeList.add(pelementarithmeticNode1);
        return nodeList;
    }



    @SuppressWarnings({ "unchecked", "rawtypes" })
    ArrayList<Object> new66() /* reduce ATermElementFactor */
    {
        @SuppressWarnings("hiding") ArrayList<Object> nodeList = new ArrayList<Object>();

        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList1 = pop();
        PElementFactor pelementfactorNode1;
        {
            // Block
        PElementTerm pelementtermNode2;
        pelementtermNode2 = (PElementTerm)nodeArrayList1.get(0);

        pelementfactorNode1 = new ATermElementFactor(pelementtermNode2);
        }
	nodeList.add(pelementfactorNode1);
        return nodeList;
    }



    @SuppressWarnings({ "unchecked", "rawtypes" })
    ArrayList<Object> new67() /* reduce AMultiplicationElementFactor */
    {
        @SuppressWarnings("hiding") ArrayList<Object> nodeList = new ArrayList<Object>();

        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList3 = pop();
        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList2 = pop();
        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList1 = pop();
        PElementFactor pelementfactorNode1;
        {
            // Block
        PElementFactor pelementfactorNode2;
        TMultiplication tmultiplicationNode3;
        PElementTerm pelementtermNode4;
        pelementfactorNode2 = (PElementFactor)nodeArrayList1.get(0);
        tmultiplicationNode3 = (TMultiplication)nodeArrayList2.get(0);
        pelementtermNode4 = (PElementTerm)nodeArrayList3.get(0);

        pelementfactorNode1 = new AMultiplicationElementFactor(pelementfactorNode2, tmultiplicationNode3, pelementtermNode4);
        }
	nodeList.add(pelementfactorNode1);
        return nodeList;
    }



    @SuppressWarnings({ "unchecked", "rawtypes" })
    ArrayList<Object> new68() /* reduce ADivisionElementFactor */
    {
        @SuppressWarnings("hiding") ArrayList<Object> nodeList = new ArrayList<Object>();

        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList3 = pop();
        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList2 = pop();
        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList1 = pop();
        PElementFactor pelementfactorNode1;
        {
            // Block
        PElementFactor pelementfactorNode2;
        TDivision tdivisionNode3;
        PElementTerm pelementtermNode4;
        pelementfactorNode2 = (PElementFactor)nodeArrayList1.get(0);
        tdivisionNode3 = (TDivision)nodeArrayList2.get(0);
        pelementtermNode4 = (PElementTerm)nodeArrayList3.get(0);

        pelementfactorNode1 = new ADivisionElementFactor(pelementfactorNode2, tdivisionNode3, pelementtermNode4);
        }
	nodeList.add(pelementfactorNode1);
        return nodeList;
    }



    @SuppressWarnings({ "unchecked", "rawtypes" })
    ArrayList<Object> new69() /* reduce AModuloElementFactor */
    {
        @SuppressWarnings("hiding") ArrayList<Object> nodeList = new ArrayList<Object>();

        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList3 = pop();
        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList2 = pop();
        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList1 = pop();
        PElementFactor pelementfactorNode1;
        {
            // Block
        PElementFactor pelementfactorNode2;
        TModulo tmoduloNode3;
        PElementTerm pelementtermNode4;
        pelementfactorNode2 = (PElementFactor)nodeArrayList1.get(0);
        tmoduloNode3 = (TModulo)nodeArrayList2.get(0);
        pelementtermNode4 = (PElementTerm)nodeArrayList3.get(0);

        pelementfactorNode1 = new AModuloElementFactor(pelementfactorNode2, tmoduloNode3, pelementtermNode4);
        }
	nodeList.add(pelementfactorNode1);
        return nodeList;
    }



    @SuppressWarnings({ "unchecked", "rawtypes" })
    ArrayList<Object> new70() /* reduce ANumberElementTerm */
    {
        @SuppressWarnings("hiding") ArrayList<Object> nodeList = new ArrayList<Object>();

        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList1 = pop();
        PElementTerm pelementtermNode1;
        {
            // Block
        TNumber tnumberNode2;
        tnumberNode2 = (TNumber)nodeArrayList1.get(0);

        pelementtermNode1 = new ANumberElementTerm(tnumberNode2);
        }
	nodeList.add(pelementtermNode1);
        return nodeList;
    }



    @SuppressWarnings({ "unchecked", "rawtypes" })
    ArrayList<Object> new71() /* reduce AElementElementTerm */
    {
        @SuppressWarnings("hiding") ArrayList<Object> nodeList = new ArrayList<Object>();

        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList1 = pop();
        PElementTerm pelementtermNode1;
        {
            // Block
        TElementIdentifier telementidentifierNode2;
        telementidentifierNode2 = (TElementIdentifier)nodeArrayList1.get(0);

        pelementtermNode1 = new AElementElementTerm(telementidentifierNode2);
        }
	nodeList.add(pelementtermNode1);
        return nodeList;
    }



    @SuppressWarnings({ "unchecked", "rawtypes" })
    ArrayList<Object> new72() /* reduce AExpressionElementTerm */
    {
        @SuppressWarnings("hiding") ArrayList<Object> nodeList = new ArrayList<Object>();

        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList3 = pop();
        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList2 = pop();
        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList1 = pop();
        PElementTerm pelementtermNode1;
        {
            // Block
        TLeftParenthesis tleftparenthesisNode2;
        PElementExpression pelementexpressionNode3;
        TRightParenthesis trightparenthesisNode4;
        tleftparenthesisNode2 = (TLeftParenthesis)nodeArrayList1.get(0);
        pelementexpressionNode3 = (PElementExpression)nodeArrayList2.get(0);
        trightparenthesisNode4 = (TRightParenthesis)nodeArrayList3.get(0);

        pelementtermNode1 = new AExpressionElementTerm(tleftparenthesisNode2, pelementexpressionNode3, trightparenthesisNode4);
        }
	nodeList.add(pelementtermNode1);
        return nodeList;
    }



    @SuppressWarnings({ "unchecked", "rawtypes" })
    ArrayList<Object> new73() /* reduce ATerminal$AdditionalStatementInstruction */
    {
        @SuppressWarnings("hiding") ArrayList<Object> nodeList = new ArrayList<Object>();

        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList1 = pop();
        LinkedList<Object> listNode2 = new LinkedList<Object>();
        {
            // Block
        PAdditionalStatementInstruction padditionalstatementinstructionNode1;
        padditionalstatementinstructionNode1 = (PAdditionalStatementInstruction)nodeArrayList1.get(0);
	if(padditionalstatementinstructionNode1 != null)
	{
	  listNode2.add(padditionalstatementinstructionNode1);
	}
        }
	nodeList.add(listNode2);
        return nodeList;
    }



    @SuppressWarnings({ "unchecked", "rawtypes" })
    ArrayList<Object> new74() /* reduce ANonTerminal$AdditionalStatementInstruction */
    {
        @SuppressWarnings("hiding") ArrayList<Object> nodeList = new ArrayList<Object>();

        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList2 = pop();
        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList1 = pop();
        LinkedList<Object> listNode3 = new LinkedList<Object>();
        {
            // Block
        LinkedList<Object> listNode1 = new LinkedList<Object>();
        PAdditionalStatementInstruction padditionalstatementinstructionNode2;
        listNode1 = (LinkedList)nodeArrayList1.get(0);
        padditionalstatementinstructionNode2 = (PAdditionalStatementInstruction)nodeArrayList2.get(0);
	if(listNode1 != null)
	{
	  listNode3.addAll(listNode1);
	}
	if(padditionalstatementinstructionNode2 != null)
	{
	  listNode3.add(padditionalstatementinstructionNode2);
	}
        }
	nodeList.add(listNode3);
        return nodeList;
    }



    @SuppressWarnings({ "unchecked", "rawtypes" })
    ArrayList<Object> new75() /* reduce ATerminal$AdditionalQuestionInstruction */
    {
        @SuppressWarnings("hiding") ArrayList<Object> nodeList = new ArrayList<Object>();

        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList1 = pop();
        LinkedList<Object> listNode2 = new LinkedList<Object>();
        {
            // Block
        PAdditionalQuestionInstruction padditionalquestioninstructionNode1;
        padditionalquestioninstructionNode1 = (PAdditionalQuestionInstruction)nodeArrayList1.get(0);
	if(padditionalquestioninstructionNode1 != null)
	{
	  listNode2.add(padditionalquestioninstructionNode1);
	}
        }
	nodeList.add(listNode2);
        return nodeList;
    }



    @SuppressWarnings({ "unchecked", "rawtypes" })
    ArrayList<Object> new76() /* reduce ANonTerminal$AdditionalQuestionInstruction */
    {
        @SuppressWarnings("hiding") ArrayList<Object> nodeList = new ArrayList<Object>();

        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList2 = pop();
        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList1 = pop();
        LinkedList<Object> listNode3 = new LinkedList<Object>();
        {
            // Block
        LinkedList<Object> listNode1 = new LinkedList<Object>();
        PAdditionalQuestionInstruction padditionalquestioninstructionNode2;
        listNode1 = (LinkedList)nodeArrayList1.get(0);
        padditionalquestioninstructionNode2 = (PAdditionalQuestionInstruction)nodeArrayList2.get(0);
	if(listNode1 != null)
	{
	  listNode3.addAll(listNode1);
	}
	if(padditionalquestioninstructionNode2 != null)
	{
	  listNode3.add(padditionalquestioninstructionNode2);
	}
        }
	nodeList.add(listNode3);
        return nodeList;
    }



    @SuppressWarnings({ "unchecked", "rawtypes" })
    ArrayList<Object> new77() /* reduce ATerminal$AdditionalProofInstruction */
    {
        @SuppressWarnings("hiding") ArrayList<Object> nodeList = new ArrayList<Object>();

        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList1 = pop();
        LinkedList<Object> listNode2 = new LinkedList<Object>();
        {
            // Block
        PAdditionalProofInstruction padditionalproofinstructionNode1;
        padditionalproofinstructionNode1 = (PAdditionalProofInstruction)nodeArrayList1.get(0);
	if(padditionalproofinstructionNode1 != null)
	{
	  listNode2.add(padditionalproofinstructionNode1);
	}
        }
	nodeList.add(listNode2);
        return nodeList;
    }



    @SuppressWarnings({ "unchecked", "rawtypes" })
    ArrayList<Object> new78() /* reduce ANonTerminal$AdditionalProofInstruction */
    {
        @SuppressWarnings("hiding") ArrayList<Object> nodeList = new ArrayList<Object>();

        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList2 = pop();
        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList1 = pop();
        LinkedList<Object> listNode3 = new LinkedList<Object>();
        {
            // Block
        LinkedList<Object> listNode1 = new LinkedList<Object>();
        PAdditionalProofInstruction padditionalproofinstructionNode2;
        listNode1 = (LinkedList)nodeArrayList1.get(0);
        padditionalproofinstructionNode2 = (PAdditionalProofInstruction)nodeArrayList2.get(0);
	if(listNode1 != null)
	{
	  listNode3.addAll(listNode1);
	}
	if(padditionalproofinstructionNode2 != null)
	{
	  listNode3.add(padditionalproofinstructionNode2);
	}
        }
	nodeList.add(listNode3);
        return nodeList;
    }



    @SuppressWarnings({ "unchecked", "rawtypes" })
    ArrayList<Object> new79() /* reduce ATerminal$PropositionList */
    {
        @SuppressWarnings("hiding") ArrayList<Object> nodeList = new ArrayList<Object>();

        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList1 = pop();
        LinkedList<Object> listNode2 = new LinkedList<Object>();
        {
            // Block
        PPropositionList ppropositionlistNode1;
        ppropositionlistNode1 = (PPropositionList)nodeArrayList1.get(0);
	if(ppropositionlistNode1 != null)
	{
	  listNode2.add(ppropositionlistNode1);
	}
        }
	nodeList.add(listNode2);
        return nodeList;
    }



    @SuppressWarnings({ "unchecked", "rawtypes" })
    ArrayList<Object> new80() /* reduce ANonTerminal$PropositionList */
    {
        @SuppressWarnings("hiding") ArrayList<Object> nodeList = new ArrayList<Object>();

        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList2 = pop();
        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList1 = pop();
        LinkedList<Object> listNode3 = new LinkedList<Object>();
        {
            // Block
        LinkedList<Object> listNode1 = new LinkedList<Object>();
        PPropositionList ppropositionlistNode2;
        listNode1 = (LinkedList)nodeArrayList1.get(0);
        ppropositionlistNode2 = (PPropositionList)nodeArrayList2.get(0);
	if(listNode1 != null)
	{
	  listNode3.addAll(listNode1);
	}
	if(ppropositionlistNode2 != null)
	{
	  listNode3.add(ppropositionlistNode2);
	}
        }
	nodeList.add(listNode3);
        return nodeList;
    }



    @SuppressWarnings({ "unchecked", "rawtypes" })
    ArrayList<Object> new81() /* reduce ATerminal$AdditionalProposition */
    {
        @SuppressWarnings("hiding") ArrayList<Object> nodeList = new ArrayList<Object>();

        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList1 = pop();
        LinkedList<Object> listNode2 = new LinkedList<Object>();
        {
            // Block
        PAdditionalProposition padditionalpropositionNode1;
        padditionalpropositionNode1 = (PAdditionalProposition)nodeArrayList1.get(0);
	if(padditionalpropositionNode1 != null)
	{
	  listNode2.add(padditionalpropositionNode1);
	}
        }
	nodeList.add(listNode2);
        return nodeList;
    }



    @SuppressWarnings({ "unchecked", "rawtypes" })
    ArrayList<Object> new82() /* reduce ANonTerminal$AdditionalProposition */
    {
        @SuppressWarnings("hiding") ArrayList<Object> nodeList = new ArrayList<Object>();

        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList2 = pop();
        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList1 = pop();
        LinkedList<Object> listNode3 = new LinkedList<Object>();
        {
            // Block
        LinkedList<Object> listNode1 = new LinkedList<Object>();
        PAdditionalProposition padditionalpropositionNode2;
        listNode1 = (LinkedList)nodeArrayList1.get(0);
        padditionalpropositionNode2 = (PAdditionalProposition)nodeArrayList2.get(0);
	if(listNode1 != null)
	{
	  listNode3.addAll(listNode1);
	}
	if(padditionalpropositionNode2 != null)
	{
	  listNode3.add(padditionalpropositionNode2);
	}
        }
	nodeList.add(listNode3);
        return nodeList;
    }



    private static int[][][] actionTable;
/*      {
			{{-1, ERROR, 0}, {0, SHIFT, 1}, },
			{{-1, ERROR, 1}, {20, SHIFT, 3}, },
			{{-1, ERROR, 2}, {58, ACCEPT, -1}, },
			{{-1, ERROR, 3}, {2, SHIFT, 4}, },
			{{-1, ERROR, 4}, {21, SHIFT, 7}, },
			{{-1, REDUCE, 0}, },
			{{-1, ERROR, 6}, {3, SHIFT, 8}, },
			{{-1, ERROR, 7}, {4, SHIFT, 10}, {55, SHIFT, 11}, },
			{{-1, ERROR, 8}, {21, SHIFT, 14}, },
			{{-1, ERROR, 9}, {1, SHIFT, 15}, },
			{{-1, ERROR, 10}, {55, SHIFT, 17}, },
			{{-1, ERROR, 11}, {43, SHIFT, 18}, },
			{{-1, REDUCE, 2}, },
			{{-1, ERROR, 13}, {19, SHIFT, 19}, {20, SHIFT, 20}, },
			{{-1, ERROR, 14}, {53, SHIFT, 23}, },
			{{-1, ERROR, 15}, {21, SHIFT, 26}, },
			{{-1, REDUCE, 1}, },
			{{-1, REDUCE, 8}, {43, SHIFT, 27}, },
			{{-1, ERROR, 18}, {37, SHIFT, 28}, },
			{{-1, ERROR, 19}, {4, SHIFT, 10}, {55, SHIFT, 11}, },
			{{-1, REDUCE, 5}, },
			{{-1, REDUCE, 73}, },
			{{-1, ERROR, 22}, {19, SHIFT, 19}, {20, SHIFT, 30}, },
			{{-1, ERROR, 23}, {21, SHIFT, 32}, },
			{{-1, REDUCE, 3}, },
			{{-1, ERROR, 25}, {19, SHIFT, 33}, {20, SHIFT, 34}, },
			{{-1, ERROR, 26}, {53, SHIFT, 37}, },
			{{-1, ERROR, 27}, {37, SHIFT, 40}, },
			{{-1, ERROR, 28}, {56, SHIFT, 41}, },
			{{-1, REDUCE, 7}, },
			{{-1, REDUCE, 6}, },
			{{-1, REDUCE, 74}, },
			{{-1, ERROR, 32}, {6, SHIFT, 42}, },
			{{-1, ERROR, 33}, {53, SHIFT, 23}, },
			{{-1, REDUCE, 11}, },
			{{-1, REDUCE, 75}, },
			{{-1, ERROR, 36}, {19, SHIFT, 33}, {20, SHIFT, 44}, },
			{{-1, ERROR, 37}, {21, SHIFT, 46}, },
			{{-1, REDUCE, 4}, },
			{{-1, REDUCE, 15}, {53, SHIFT, 37}, },
			{{-1, ERROR, 40}, {56, SHIFT, 50}, },
			{{-1, ERROR, 41}, {33, SHIFT, 51}, },
			{{-1, ERROR, 42}, {39, SHIFT, 52}, {55, SHIFT, 53}, },
			{{-1, REDUCE, 13}, },
			{{-1, REDUCE, 12}, },
			{{-1, REDUCE, 76}, },
			{{-1, ERROR, 46}, {16, SHIFT, 60}, {17, SHIFT, 61}, {39, SHIFT, 62}, {54, SHIFT, 63}, {55, SHIFT, 53}, {56, SHIFT, 64}, },
			{{-1, REDUCE, 77}, },
			{{-1, REDUCE, 17}, },
			{{-1, REDUCE, 16}, {53, SHIFT, 37}, },
			{{-1, ERROR, 50}, {33, SHIFT, 77}, },
			{{-1, ERROR, 51}, {55, SHIFT, 78}, },
			{{-1, ERROR, 52}, {39, SHIFT, 52}, {55, SHIFT, 53}, },
			{{-1, REDUCE, 47}, },
			{{-1, REDUCE, 14}, {25, SHIFT, 80}, {26, SHIFT, 81}, },
			{{-1, REDUCE, 30}, {29, SHIFT, 82}, {30, SHIFT, 83}, {31, SHIFT, 84}, {32, SHIFT, 85}, {43, SHIFT, 86}, {48, SHIFT, 87}, },
			{{-1, REDUCE, 33}, {7, SHIFT, 88}, {13, SHIFT, 89}, },
			{{-1, REDUCE, 40}, {10, SHIFT, 90}, },
			{{-1, REDUCE, 43}, {15, SHIFT, 91}, },
			{{-1, REDUCE, 45}, },
			{{-1, ERROR, 60}, {56, SHIFT, 92}, },
			{{-1, ERROR, 61}, {56, SHIFT, 93}, },
			{{-1, ERROR, 62}, {39, SHIFT, 62}, {54, SHIFT, 63}, {55, SHIFT, 53}, {56, SHIFT, 64}, },
			{{-1, REDUCE, 70}, },
			{{-1, REDUCE, 71}, },
			{{-1, ERROR, 65}, {5, SHIFT, 95}, },
			{{-1, REDUCE, 79}, },
			{{-1, ERROR, 67}, {20, SHIFT, 96}, {23, SHIFT, 97}, {24, SHIFT, 98}, },
			{{-1, REDUCE, 24}, },
			{{-1, REDUCE, 28}, {25, SHIFT, 80}, {26, SHIFT, 81}, },
			{{-1, REDUCE, 29}, {25, SHIFT, 101}, {26, SHIFT, 102}, {33, SHIFT, 103}, },
			{{-1, REDUCE, 49}, {43, SHIFT, 104}, {44, SHIFT, 105}, {45, SHIFT, 106}, {46, SHIFT, 107}, {47, SHIFT, 108}, {48, SHIFT, 109}, {49, SHIFT, 110}, {50, SHIFT, 111}, {51, SHIFT, 112}, {52, SHIFT, 113}, },
			{{-1, REDUCE, 52}, {13, SHIFT, 114}, {14, SHIFT, 115}, },
			{{-1, REDUCE, 63}, {10, SHIFT, 116}, {11, SHIFT, 117}, {12, SHIFT, 118}, },
			{{-1, REDUCE, 66}, },
			{{-1, REDUCE, 19}, {16, SHIFT, 60}, {17, SHIFT, 61}, {39, SHIFT, 62}, {54, SHIFT, 63}, {55, SHIFT, 53}, {56, SHIFT, 64}, },
			{{-1, REDUCE, 78}, },
			{{-1, ERROR, 77}, {55, SHIFT, 120}, },
			{{-1, ERROR, 78}, {18, SHIFT, 121}, },
			{{-1, ERROR, 79}, {25, SHIFT, 80}, {26, SHIFT, 81}, {40, SHIFT, 122}, },
			{{-1, ERROR, 80}, {39, SHIFT, 52}, {55, SHIFT, 53}, },
			{{-1, ERROR, 81}, {39, SHIFT, 52}, {55, SHIFT, 53}, },
			{{-1, ERROR, 82}, {39, SHIFT, 52}, {55, SHIFT, 53}, },
			{{-1, ERROR, 83}, {39, SHIFT, 52}, {55, SHIFT, 53}, },
			{{-1, ERROR, 84}, {39, SHIFT, 52}, {55, SHIFT, 53}, },
			{{-1, ERROR, 85}, {39, SHIFT, 52}, {55, SHIFT, 53}, },
			{{-1, ERROR, 86}, {39, SHIFT, 52}, {55, SHIFT, 53}, },
			{{-1, ERROR, 87}, {39, SHIFT, 52}, {55, SHIFT, 53}, },
			{{-1, ERROR, 88}, {39, SHIFT, 52}, {55, SHIFT, 53}, },
			{{-1, ERROR, 89}, {39, SHIFT, 52}, {55, SHIFT, 53}, },
			{{-1, ERROR, 90}, {39, SHIFT, 52}, {55, SHIFT, 53}, },
			{{-1, ERROR, 91}, {39, SHIFT, 52}, {55, SHIFT, 53}, },
			{{-1, ERROR, 92}, {33, SHIFT, 135}, },
			{{-1, ERROR, 93}, {33, SHIFT, 136}, },
			{{-1, ERROR, 94}, {25, SHIFT, 101}, {26, SHIFT, 102}, {40, SHIFT, 137}, },
			{{-1, ERROR, 95}, {20, SHIFT, 138}, },
			{{-1, REDUCE, 20}, },
			{{-1, ERROR, 97}, {16, SHIFT, 60}, {17, SHIFT, 61}, {39, SHIFT, 62}, {54, SHIFT, 63}, {55, SHIFT, 53}, {56, SHIFT, 64}, },
			{{-1, ERROR, 98}, {16, SHIFT, 60}, {17, SHIFT, 61}, {39, SHIFT, 62}, {54, SHIFT, 63}, {55, SHIFT, 53}, {56, SHIFT, 64}, },
			{{-1, REDUCE, 81}, },
			{{-1, ERROR, 100}, {20, SHIFT, 141}, {23, SHIFT, 97}, {24, SHIFT, 98}, },
			{{-1, ERROR, 101}, {39, SHIFT, 143}, {54, SHIFT, 63}, {56, SHIFT, 64}, },
			{{-1, ERROR, 102}, {39, SHIFT, 143}, {54, SHIFT, 63}, {56, SHIFT, 64}, },
			{{-1, ERROR, 103}, {39, SHIFT, 52}, {55, SHIFT, 53}, },
			{{-1, ERROR, 104}, {39, SHIFT, 143}, {54, SHIFT, 63}, {56, SHIFT, 64}, },
			{{-1, ERROR, 105}, {39, SHIFT, 143}, {54, SHIFT, 63}, {56, SHIFT, 64}, },
			{{-1, ERROR, 106}, {39, SHIFT, 143}, {54, SHIFT, 63}, {56, SHIFT, 64}, },
			{{-1, ERROR, 107}, {39, SHIFT, 143}, {54, SHIFT, 63}, {56, SHIFT, 64}, },
			{{-1, ERROR, 108}, {39, SHIFT, 143}, {54, SHIFT, 63}, {56, SHIFT, 64}, },
			{{-1, ERROR, 109}, {39, SHIFT, 143}, {54, SHIFT, 63}, {56, SHIFT, 64}, },
			{{-1, ERROR, 110}, {39, SHIFT, 143}, {54, SHIFT, 63}, {56, SHIFT, 64}, },
			{{-1, ERROR, 111}, {39, SHIFT, 143}, {54, SHIFT, 63}, {56, SHIFT, 64}, },
			{{-1, ERROR, 112}, {39, SHIFT, 143}, {54, SHIFT, 63}, {56, SHIFT, 64}, },
			{{-1, ERROR, 113}, {39, SHIFT, 143}, {54, SHIFT, 63}, {56, SHIFT, 64}, },
			{{-1, ERROR, 114}, {39, SHIFT, 143}, {54, SHIFT, 63}, {56, SHIFT, 64}, },
			{{-1, ERROR, 115}, {39, SHIFT, 143}, {54, SHIFT, 63}, {56, SHIFT, 64}, },
			{{-1, ERROR, 116}, {39, SHIFT, 143}, {54, SHIFT, 63}, {56, SHIFT, 64}, },
			{{-1, ERROR, 117}, {39, SHIFT, 143}, {54, SHIFT, 63}, {56, SHIFT, 64}, },
			{{-1, ERROR, 118}, {39, SHIFT, 143}, {54, SHIFT, 63}, {56, SHIFT, 64}, },
			{{-1, REDUCE, 80}, },
			{{-1, ERROR, 120}, {18, SHIFT, 162}, },
			{{-1, ERROR, 121}, {39, SHIFT, 143}, {54, SHIFT, 63}, {56, SHIFT, 64}, },
			{{-1, REDUCE, 48}, },
			{{-1, REDUCE, 31}, {29, SHIFT, 82}, {30, SHIFT, 83}, {31, SHIFT, 84}, {32, SHIFT, 85}, {43, SHIFT, 86}, {48, SHIFT, 87}, },
			{{-1, REDUCE, 32}, {29, SHIFT, 82}, {30, SHIFT, 83}, {31, SHIFT, 84}, {32, SHIFT, 85}, {43, SHIFT, 86}, {48, SHIFT, 87}, },
			{{-1, REDUCE, 36}, {7, SHIFT, 88}, {13, SHIFT, 89}, },
			{{-1, REDUCE, 38}, {7, SHIFT, 88}, {13, SHIFT, 89}, },
			{{-1, REDUCE, 37}, {7, SHIFT, 88}, {13, SHIFT, 89}, },
			{{-1, REDUCE, 39}, {7, SHIFT, 88}, {13, SHIFT, 89}, },
			{{-1, REDUCE, 34}, {7, SHIFT, 88}, {13, SHIFT, 89}, },
			{{-1, REDUCE, 35}, {7, SHIFT, 88}, {13, SHIFT, 89}, },
			{{-1, REDUCE, 42}, {10, SHIFT, 90}, },
			{{-1, REDUCE, 41}, {10, SHIFT, 90}, },
			{{-1, REDUCE, 44}, {15, SHIFT, 91}, },
			{{-1, REDUCE, 46}, },
			{{-1, ERROR, 135}, {55, SHIFT, 164}, },
			{{-1, ERROR, 136}, {55, SHIFT, 165}, },
			{{-1, REDUCE, 72}, },
			{{-1, REDUCE, 18}, },
			{{-1, REDUCE, 22}, },
			{{-1, REDUCE, 23}, },
			{{-1, REDUCE, 21}, },
			{{-1, REDUCE, 82}, },
			{{-1, ERROR, 143}, {39, SHIFT, 143}, {54, SHIFT, 63}, {56, SHIFT, 64}, },
			{{-1, REDUCE, 50}, {43, SHIFT, 104}, {44, SHIFT, 105}, {45, SHIFT, 106}, {46, SHIFT, 107}, {47, SHIFT, 108}, {48, SHIFT, 109}, {49, SHIFT, 110}, {50, SHIFT, 111}, {51, SHIFT, 112}, {52, SHIFT, 113}, },
			{{-1, REDUCE, 51}, {43, SHIFT, 104}, {44, SHIFT, 105}, {45, SHIFT, 106}, {46, SHIFT, 107}, {47, SHIFT, 108}, {48, SHIFT, 109}, {49, SHIFT, 110}, {50, SHIFT, 111}, {51, SHIFT, 112}, {52, SHIFT, 113}, },
			{{-1, REDUCE, 27}, {25, SHIFT, 80}, {26, SHIFT, 81}, },
			{{-1, REDUCE, 53}, {13, SHIFT, 114}, {14, SHIFT, 115}, },
			{{-1, REDUCE, 55}, {13, SHIFT, 114}, {14, SHIFT, 115}, },
			{{-1, REDUCE, 57}, {13, SHIFT, 114}, {14, SHIFT, 115}, },
			{{-1, REDUCE, 59}, {13, SHIFT, 114}, {14, SHIFT, 115}, },
			{{-1, REDUCE, 61}, {13, SHIFT, 114}, {14, SHIFT, 115}, },
			{{-1, REDUCE, 54}, {13, SHIFT, 114}, {14, SHIFT, 115}, },
			{{-1, REDUCE, 56}, {13, SHIFT, 114}, {14, SHIFT, 115}, },
			{{-1, REDUCE, 58}, {13, SHIFT, 114}, {14, SHIFT, 115}, },
			{{-1, REDUCE, 60}, {13, SHIFT, 114}, {14, SHIFT, 115}, },
			{{-1, REDUCE, 62}, {13, SHIFT, 114}, {14, SHIFT, 115}, },
			{{-1, REDUCE, 64}, {10, SHIFT, 116}, {11, SHIFT, 117}, {12, SHIFT, 118}, },
			{{-1, REDUCE, 65}, {10, SHIFT, 116}, {11, SHIFT, 117}, {12, SHIFT, 118}, },
			{{-1, REDUCE, 67}, },
			{{-1, REDUCE, 68}, },
			{{-1, REDUCE, 69}, },
			{{-1, ERROR, 162}, {39, SHIFT, 143}, {54, SHIFT, 63}, {56, SHIFT, 64}, },
			{{-1, ERROR, 163}, {25, SHIFT, 101}, {26, SHIFT, 102}, {38, SHIFT, 167}, },
			{{-1, ERROR, 164}, {19, SHIFT, 168}, },
			{{-1, ERROR, 165}, {19, SHIFT, 169}, },
			{{-1, ERROR, 166}, {25, SHIFT, 101}, {26, SHIFT, 102}, {38, SHIFT, 170}, },
			{{-1, REDUCE, 9}, },
			{{-1, ERROR, 168}, {39, SHIFT, 62}, {54, SHIFT, 63}, {55, SHIFT, 53}, {56, SHIFT, 64}, },
			{{-1, ERROR, 169}, {39, SHIFT, 62}, {54, SHIFT, 63}, {55, SHIFT, 53}, {56, SHIFT, 64}, },
			{{-1, REDUCE, 10}, },
			{{-1, REDUCE, 25}, },
			{{-1, REDUCE, 26}, },
        };*/
    private static int[][][] gotoTable;
/*      {
			{{-1, 2}, },
			{{-1, 5}, },
			{{-1, 6}, },
			{{-1, 9}, },
			{{-1, 16}, },
			{{-1, 12}, },
			{{-1, 21}, {22, 31}, },
			{{-1, 13}, {19, 29}, },
			{{-1, 24}, },
			{{-1, 35}, {36, 45}, },
			{{-1, 25}, {33, 43}, },
			{{-1, 38}, },
			{{-1, 47}, {49, 76}, },
			{{-1, 48}, {26, 39}, },
			{{-1, 65}, },
			{{-1, 66}, {75, 119}, },
			{{-1, 99}, {100, 142}, },
			{{-1, 67}, {97, 139}, {98, 140}, },
			{{-1, 68}, {168, 171}, {169, 172}, },
			{{-1, 69}, {42, 54}, {52, 79}, {62, 79}, {103, 146}, },
			{{-1, 55}, {80, 123}, {81, 124}, },
			{{-1, 56}, {82, 125}, {83, 126}, {84, 127}, {85, 128}, {86, 129}, {87, 130}, },
			{{-1, 57}, {88, 131}, {89, 132}, },
			{{-1, 58}, {90, 133}, },
			{{-1, 59}, {91, 134}, },
			{{-1, 70}, {62, 94}, {121, 163}, {143, 94}, {162, 166}, },
			{{-1, 71}, {101, 144}, {102, 145}, },
			{{-1, 72}, {104, 147}, {105, 148}, {106, 149}, {107, 150}, {108, 151}, {109, 152}, {110, 153}, {111, 154}, {112, 155}, {113, 156}, },
			{{-1, 73}, {114, 157}, {115, 158}, },
			{{-1, 74}, {116, 159}, {117, 160}, {118, 161}, },
			{{-1, 22}, },
			{{-1, 36}, },
			{{-1, 49}, },
			{{-1, 75}, },
			{{-1, 100}, },
        };*/
    private static String[] errorMessages;
/*      {
			"expecting: category",
			"expecting: ';'",
			"expecting: EOF",
			"expecting: 'Statement'",
			"expecting: ':'",
			"expecting: 'Question'",
			"expecting: 'let', set identifier",
			"expecting: 'Proof'",
			"expecting: set identifier",
			"expecting: '='",
			"expecting: ',', ';'",
			"expecting: tag number",
			"expecting: ',', ';', '='",
			"expecting: '{'",
			"expecting: element identifier",
			"expecting: 'show'",
			"expecting: tag number, EOF",
			"expecting: '∈'",
			"expecting: '(', set identifier",
			"expecting: '∀', '∃', '(', number, set identifier, element identifier",
			"expecting: '\', '*', '+', '^', ',', ';', '=>', '<=>', '∧', '∨', '⊂', '⊃', '⊄', '⊅', ')', '=', not equal to",
			"expecting: ',', ';', '∧', '∨'",
			"expecting: ',', ';', '=>', '<=>', '∧', '∨', '⊂', '⊃', '⊄', '⊅', ')', '=', not equal to",
			"expecting: '\', '+', ',', ';', '=>', '<=>', '∧', '∨', '⊂', '⊃', '⊄', '⊅', ')', '=', not equal to",
			"expecting: '\', '*', '+', ',', ';', '=>', '<=>', '∧', '∨', '⊂', '⊃', '⊄', '⊅', ')', '=', not equal to",
			"expecting: '(', number, set identifier, element identifier",
			"expecting: '*', '/', '%', '+', '-', ';', '=>', '<=>', '∧', '∨', '∈', '}', ')', '=', '>', '<', greater than or equal to, less than or equal to, not equal to, not greater than, not less than, neither greater than nor equal to, neither less than nor equal to",
			"expecting: 'done'",
			"expecting: 'done', '∀', '∃', '(', number, set identifier, element identifier",
			"expecting: ';', '=>', '<=>'",
			"expecting: ';', '=>', '<=>', '∧', '∨'",
			"expecting: ';', '=>', '<=>', '∧', '∨', '∈'",
			"expecting: ';', '=>', '<=>', '∧', '∨', '∈', '}', ')', '=', '>', '<', greater than or equal to, less than or equal to, not equal to, not greater than, not less than, neither greater than nor equal to, neither less than nor equal to",
			"expecting: '+', '-', ';', '=>', '<=>', '∧', '∨', '∈', '}', ')', '=', '>', '<', greater than or equal to, less than or equal to, not equal to, not greater than, not less than, neither greater than nor equal to, neither less than nor equal to",
			"expecting: '|'",
			"expecting: '∧', '∨', ')'",
			"expecting: '(', number, element identifier",
			"expecting: '∧', '∨', '}'",
			"expecting: ','",
        };*/
    private static int[] errors;
/*      {
			0, 1, 2, 3, 4, 2, 5, 6, 4, 7, 8, 9, 5, 10, 11, 4, 2, 12, 13, 6, 5, 10, 10, 4, 7, 10, 11, 13, 14, 10, 5, 10, 15, 11, 7, 10, 10, 4, 2, 16, 14, 17, 18, 10, 7, 10, 19, 16, 16, 16, 17, 8, 18, 20, 21, 22, 23, 24, 20, 20, 14, 14, 25, 26, 26, 27, 28, 29, 29, 30, 31, 32, 33, 26, 26, 28, 16, 8, 34, 35, 18, 18, 18, 18, 18, 18, 18, 18, 18, 18, 18, 18, 17, 17, 35, 1, 28, 19, 19, 29, 29, 36, 36, 18, 36, 36, 36, 36, 36, 36, 36, 36, 36, 36, 36, 36, 36, 36, 36, 28, 34, 36, 20, 22, 22, 23, 23, 23, 23, 23, 23, 24, 24, 20, 20, 8, 8, 26, 16, 29, 29, 28, 29, 36, 32, 32, 30, 33, 33, 33, 33, 33, 33, 33, 33, 33, 33, 26, 26, 26, 26, 26, 36, 37, 38, 38, 37, 10, 25, 25, 10, 29, 29, 
        };*/

    static 
    {
        try
        {
            DataInputStream s = new DataInputStream(
                new BufferedInputStream(
                Parser.class.getResourceAsStream("parser.dat")));

            // read actionTable
            int length = s.readInt();
            Parser.actionTable = new int[length][][];
            for(int i = 0; i < Parser.actionTable.length; i++)
            {
                length = s.readInt();
                Parser.actionTable[i] = new int[length][3];
                for(int j = 0; j < Parser.actionTable[i].length; j++)
                {
                for(int k = 0; k < 3; k++)
                {
                    Parser.actionTable[i][j][k] = s.readInt();
                }
                }
            }

            // read gotoTable
            length = s.readInt();
            gotoTable = new int[length][][];
            for(int i = 0; i < gotoTable.length; i++)
            {
                length = s.readInt();
                gotoTable[i] = new int[length][2];
                for(int j = 0; j < gotoTable[i].length; j++)
                {
                for(int k = 0; k < 2; k++)
                {
                    gotoTable[i][j][k] = s.readInt();
                }
                }
            }

            // read errorMessages
            length = s.readInt();
            errorMessages = new String[length];
            for(int i = 0; i < errorMessages.length; i++)
            {
                length = s.readInt();
                StringBuffer buffer = new StringBuffer();

                for(int j = 0; j < length; j++)
                {
                buffer.append(s.readChar());
                }
                errorMessages[i] = buffer.toString();
            }

            // read errors
            length = s.readInt();
            errors = new int[length];
            for(int i = 0; i < errors.length; i++)
            {
                errors[i] = s.readInt();
            }

            s.close();
        }
        catch(Exception e)
        {
            throw new RuntimeException("The file \"parser.dat\" is either missing or corrupted.");
        }
    }
}
