/* This file was generated by SableCC (http://www.sablecc.org/). */

package parser;

import lexer.*;
import node.*;
import analysis.*;
import java.util.*;

import java.io.DataInputStream;
import java.io.BufferedInputStream;
import java.io.IOException;

@SuppressWarnings("nls")
public class Parser
{
    public final Analysis ignoredTokens = new AnalysisAdapter();

    protected ArrayList<Object> nodeList;

    private final Lexer lexer;
    private final ListIterator<Object> stack = new LinkedList<Object>().listIterator();
    private int last_pos;
    private int last_line;
    private Token last_token;
    private final TokenIndex converter = new TokenIndex();
    private final int[] action = new int[2];

    private final static int SHIFT = 0;
    private final static int REDUCE = 1;
    private final static int ACCEPT = 2;
    private final static int ERROR = 3;

    public Parser(@SuppressWarnings("hiding") Lexer lexer)
    {
        this.lexer = lexer;
    }

    protected void filter() throws ParserException, LexerException, IOException
    {
        // Empty body
    }

    private void push(int numstate, ArrayList<Object> listNode, boolean hidden) throws ParserException, LexerException, IOException
    {
        this.nodeList = listNode;

        if(!hidden)
        {
            filter();
        }

        if(!this.stack.hasNext())
        {
            this.stack.add(new State(numstate, this.nodeList));
            return;
        }

        State s = (State) this.stack.next();
        s.state = numstate;
        s.nodes = this.nodeList;
    }

    private int goTo(int index)
    {
        int state = state();
        int low = 1;
        int high = gotoTable[index].length - 1;
        int value = gotoTable[index][0][1];

        while(low <= high)
        {
            // int middle = (low + high) / 2;
            int middle = (low + high) >>> 1;

            if(state < gotoTable[index][middle][0])
            {
                high = middle - 1;
            }
            else if(state > gotoTable[index][middle][0])
            {
                low = middle + 1;
            }
            else
            {
                value = gotoTable[index][middle][1];
                break;
            }
        }

        return value;
    }

    private int state()
    {
        State s = (State) this.stack.previous();
        this.stack.next();
        return s.state;
    }

    private ArrayList<Object> pop()
    {
        return ((State) this.stack.previous()).nodes;
    }

    private int index(Switchable token)
    {
        this.converter.index = -1;
        token.apply(this.converter);
        return this.converter.index;
    }

    @SuppressWarnings("unchecked")
    public Start parse() throws ParserException, LexerException, IOException
    {
        push(0, null, true);
        List<Node> ign = null;
        while(true)
        {
            while(index(this.lexer.peek()) == -1)
            {
                if(ign == null)
                {
                    ign = new LinkedList<Node>();
                }

                ign.add(this.lexer.next());
            }

            if(ign != null)
            {
                this.ignoredTokens.setIn(this.lexer.peek(), ign);
                ign = null;
            }

            this.last_pos = this.lexer.peek().getPos();
            this.last_line = this.lexer.peek().getLine();
            this.last_token = this.lexer.peek();

            int index = index(this.lexer.peek());
            this.action[0] = Parser.actionTable[state()][0][1];
            this.action[1] = Parser.actionTable[state()][0][2];

            int low = 1;
            int high = Parser.actionTable[state()].length - 1;

            while(low <= high)
            {
                int middle = (low + high) / 2;

                if(index < Parser.actionTable[state()][middle][0])
                {
                    high = middle - 1;
                }
                else if(index > Parser.actionTable[state()][middle][0])
                {
                    low = middle + 1;
                }
                else
                {
                    this.action[0] = Parser.actionTable[state()][middle][1];
                    this.action[1] = Parser.actionTable[state()][middle][2];
                    break;
                }
            }

            switch(this.action[0])
            {
                case SHIFT:
		    {
		        ArrayList<Object> list = new ArrayList<Object>();
		        list.add(this.lexer.next());
                        push(this.action[1], list, false);
                    }
		    break;
                case REDUCE:
                    {
                        int reduction = this.action[1];
                        if(reduction < 500) reduce_0(reduction);
                    }
                    break;
                case ACCEPT:
                    {
                        EOF node2 = (EOF) this.lexer.next();
                        PProgram node1 = (PProgram) pop().get(0);
                        Start node = new Start(node1, node2);
                        return node;
                    }
                case ERROR:
                    throw new ParserException(this.last_token,
                        "[" + this.last_line + "," + this.last_pos + "] " +
                        Parser.errorMessages[Parser.errors[this.action[1]]]);
            }
        }
    }

    private void reduce_0(int reduction) throws IOException, LexerException, ParserException
    {
        switch(reduction)
        {
            case 0: /* reduce AProgram */
            {
                ArrayList<Object> list = new0();
                push(goTo(0), list, false);
            }
            break;
            case 1: /* reduce ABlock */
            {
                ArrayList<Object> list = new1();
                push(goTo(1), list, false);
            }
            break;
            case 2: /* reduce AComparisonExpression */
            {
                ArrayList<Object> list = new2();
                push(goTo(2), list, false);
            }
            break;
            case 3: /* reduce ALogicalAndExpression */
            {
                ArrayList<Object> list = new3();
                push(goTo(2), list, false);
            }
            break;
            case 4: /* reduce ALogicalOrExpression */
            {
                ArrayList<Object> list = new4();
                push(goTo(2), list, false);
            }
            break;
            case 5: /* reduce AArithmeticComparison */
            {
                ArrayList<Object> list = new5();
                push(goTo(3), list, false);
            }
            break;
            case 6: /* reduce AEqualToComparison */
            {
                ArrayList<Object> list = new6();
                push(goTo(3), list, false);
            }
            break;
            case 7: /* reduce AGreaterThanComparison */
            {
                ArrayList<Object> list = new7();
                push(goTo(3), list, false);
            }
            break;
            case 8: /* reduce ALessThanComparison */
            {
                ArrayList<Object> list = new8();
                push(goTo(3), list, false);
            }
            break;
            case 9: /* reduce AGreaterThanOrEqualToComparison */
            {
                ArrayList<Object> list = new9();
                push(goTo(3), list, false);
            }
            break;
            case 10: /* reduce ALessThanOrEqualToComparison */
            {
                ArrayList<Object> list = new10();
                push(goTo(3), list, false);
            }
            break;
            case 11: /* reduce ANotEqualToComparison */
            {
                ArrayList<Object> list = new11();
                push(goTo(3), list, false);
            }
            break;
            case 12: /* reduce ANotGreaterThanComparison */
            {
                ArrayList<Object> list = new12();
                push(goTo(3), list, false);
            }
            break;
            case 13: /* reduce ANotLessThanComparison */
            {
                ArrayList<Object> list = new13();
                push(goTo(3), list, false);
            }
            break;
            case 14: /* reduce ANeitherGreaterThanNorEqualToComparison */
            {
                ArrayList<Object> list = new14();
                push(goTo(3), list, false);
            }
            break;
            case 15: /* reduce ANeitherLessThanNorEqualToComparison */
            {
                ArrayList<Object> list = new15();
                push(goTo(3), list, false);
            }
            break;
            case 16: /* reduce AFactorArithmetic */
            {
                ArrayList<Object> list = new16();
                push(goTo(4), list, false);
            }
            break;
            case 17: /* reduce APlusArithmetic */
            {
                ArrayList<Object> list = new17();
                push(goTo(4), list, false);
            }
            break;
            case 18: /* reduce AMinusArithmetic */
            {
                ArrayList<Object> list = new18();
                push(goTo(4), list, false);
            }
            break;
            case 19: /* reduce ATermFactor */
            {
                ArrayList<Object> list = new19();
                push(goTo(5), list, false);
            }
            break;
            case 20: /* reduce AMultiplicationFactor */
            {
                ArrayList<Object> list = new20();
                push(goTo(5), list, false);
            }
            break;
            case 21: /* reduce ADivisionFactor */
            {
                ArrayList<Object> list = new21();
                push(goTo(5), list, false);
            }
            break;
            case 22: /* reduce AModuloFactor */
            {
                ArrayList<Object> list = new22();
                push(goTo(5), list, false);
            }
            break;
            case 23: /* reduce ANumberTerm */
            {
                ArrayList<Object> list = new23();
                push(goTo(6), list, false);
            }
            break;
            case 24: /* reduce AElementTerm */
            {
                ArrayList<Object> list = new24();
                push(goTo(6), list, false);
            }
            break;
            case 25: /* reduce AExpressionTerm */
            {
                ArrayList<Object> list = new25();
                push(goTo(6), list, false);
            }
            break;
        }
    }



    @SuppressWarnings({ "unchecked", "rawtypes" })
    ArrayList<Object> new0() /* reduce AProgram */
    {
        @SuppressWarnings("hiding") ArrayList<Object> nodeList = new ArrayList<Object>();

        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList1 = pop();
        PProgram pprogramNode1;
        {
            // Block
        PBlock pblockNode2;
        pblockNode2 = (PBlock)nodeArrayList1.get(0);

        pprogramNode1 = new AProgram(pblockNode2);
        }
	nodeList.add(pprogramNode1);
        return nodeList;
    }



    @SuppressWarnings({ "unchecked", "rawtypes" })
    ArrayList<Object> new1() /* reduce ABlock */
    {
        @SuppressWarnings("hiding") ArrayList<Object> nodeList = new ArrayList<Object>();

        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList7 = pop();
        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList6 = pop();
        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList5 = pop();
        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList4 = pop();
        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList3 = pop();
        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList2 = pop();
        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList1 = pop();
        PBlock pblockNode1;
        {
            // Block
        TLeftBrace tleftbraceNode2;
        TElement telementNode3;
        TElementOf telementofNode4;
        TSet tsetNode5;
        TSuchAs tsuchasNode6;
        PExpression pexpressionNode7;
        TRightBrace trightbraceNode8;
        tleftbraceNode2 = (TLeftBrace)nodeArrayList1.get(0);
        telementNode3 = (TElement)nodeArrayList2.get(0);
        telementofNode4 = (TElementOf)nodeArrayList3.get(0);
        tsetNode5 = (TSet)nodeArrayList4.get(0);
        tsuchasNode6 = (TSuchAs)nodeArrayList5.get(0);
        pexpressionNode7 = (PExpression)nodeArrayList6.get(0);
        trightbraceNode8 = (TRightBrace)nodeArrayList7.get(0);

        pblockNode1 = new ABlock(tleftbraceNode2, telementNode3, telementofNode4, tsetNode5, tsuchasNode6, pexpressionNode7, trightbraceNode8);
        }
	nodeList.add(pblockNode1);
        return nodeList;
    }



    @SuppressWarnings({ "unchecked", "rawtypes" })
    ArrayList<Object> new2() /* reduce AComparisonExpression */
    {
        @SuppressWarnings("hiding") ArrayList<Object> nodeList = new ArrayList<Object>();

        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList1 = pop();
        PExpression pexpressionNode1;
        {
            // Block
        PComparison pcomparisonNode2;
        pcomparisonNode2 = (PComparison)nodeArrayList1.get(0);

        pexpressionNode1 = new AComparisonExpression(pcomparisonNode2);
        }
	nodeList.add(pexpressionNode1);
        return nodeList;
    }



    @SuppressWarnings({ "unchecked", "rawtypes" })
    ArrayList<Object> new3() /* reduce ALogicalAndExpression */
    {
        @SuppressWarnings("hiding") ArrayList<Object> nodeList = new ArrayList<Object>();

        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList3 = pop();
        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList2 = pop();
        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList1 = pop();
        PExpression pexpressionNode1;
        {
            // Block
        PExpression pexpressionNode2;
        TLogicalAnd tlogicalandNode3;
        PComparison pcomparisonNode4;
        pexpressionNode2 = (PExpression)nodeArrayList1.get(0);
        tlogicalandNode3 = (TLogicalAnd)nodeArrayList2.get(0);
        pcomparisonNode4 = (PComparison)nodeArrayList3.get(0);

        pexpressionNode1 = new ALogicalAndExpression(pexpressionNode2, tlogicalandNode3, pcomparisonNode4);
        }
	nodeList.add(pexpressionNode1);
        return nodeList;
    }



    @SuppressWarnings({ "unchecked", "rawtypes" })
    ArrayList<Object> new4() /* reduce ALogicalOrExpression */
    {
        @SuppressWarnings("hiding") ArrayList<Object> nodeList = new ArrayList<Object>();

        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList3 = pop();
        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList2 = pop();
        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList1 = pop();
        PExpression pexpressionNode1;
        {
            // Block
        PExpression pexpressionNode2;
        TLogicalOr tlogicalorNode3;
        PComparison pcomparisonNode4;
        pexpressionNode2 = (PExpression)nodeArrayList1.get(0);
        tlogicalorNode3 = (TLogicalOr)nodeArrayList2.get(0);
        pcomparisonNode4 = (PComparison)nodeArrayList3.get(0);

        pexpressionNode1 = new ALogicalOrExpression(pexpressionNode2, tlogicalorNode3, pcomparisonNode4);
        }
	nodeList.add(pexpressionNode1);
        return nodeList;
    }



    @SuppressWarnings({ "unchecked", "rawtypes" })
    ArrayList<Object> new5() /* reduce AArithmeticComparison */
    {
        @SuppressWarnings("hiding") ArrayList<Object> nodeList = new ArrayList<Object>();

        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList1 = pop();
        PComparison pcomparisonNode1;
        {
            // Block
        PArithmetic parithmeticNode2;
        parithmeticNode2 = (PArithmetic)nodeArrayList1.get(0);

        pcomparisonNode1 = new AArithmeticComparison(parithmeticNode2);
        }
	nodeList.add(pcomparisonNode1);
        return nodeList;
    }



    @SuppressWarnings({ "unchecked", "rawtypes" })
    ArrayList<Object> new6() /* reduce AEqualToComparison */
    {
        @SuppressWarnings("hiding") ArrayList<Object> nodeList = new ArrayList<Object>();

        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList3 = pop();
        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList2 = pop();
        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList1 = pop();
        PComparison pcomparisonNode1;
        {
            // Block
        PComparison pcomparisonNode2;
        TEqualTo tequaltoNode3;
        PArithmetic parithmeticNode4;
        pcomparisonNode2 = (PComparison)nodeArrayList1.get(0);
        tequaltoNode3 = (TEqualTo)nodeArrayList2.get(0);
        parithmeticNode4 = (PArithmetic)nodeArrayList3.get(0);

        pcomparisonNode1 = new AEqualToComparison(pcomparisonNode2, tequaltoNode3, parithmeticNode4);
        }
	nodeList.add(pcomparisonNode1);
        return nodeList;
    }



    @SuppressWarnings({ "unchecked", "rawtypes" })
    ArrayList<Object> new7() /* reduce AGreaterThanComparison */
    {
        @SuppressWarnings("hiding") ArrayList<Object> nodeList = new ArrayList<Object>();

        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList3 = pop();
        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList2 = pop();
        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList1 = pop();
        PComparison pcomparisonNode1;
        {
            // Block
        PComparison pcomparisonNode2;
        TGreaterThan tgreaterthanNode3;
        PArithmetic parithmeticNode4;
        pcomparisonNode2 = (PComparison)nodeArrayList1.get(0);
        tgreaterthanNode3 = (TGreaterThan)nodeArrayList2.get(0);
        parithmeticNode4 = (PArithmetic)nodeArrayList3.get(0);

        pcomparisonNode1 = new AGreaterThanComparison(pcomparisonNode2, tgreaterthanNode3, parithmeticNode4);
        }
	nodeList.add(pcomparisonNode1);
        return nodeList;
    }



    @SuppressWarnings({ "unchecked", "rawtypes" })
    ArrayList<Object> new8() /* reduce ALessThanComparison */
    {
        @SuppressWarnings("hiding") ArrayList<Object> nodeList = new ArrayList<Object>();

        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList3 = pop();
        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList2 = pop();
        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList1 = pop();
        PComparison pcomparisonNode1;
        {
            // Block
        PComparison pcomparisonNode2;
        TLessThan tlessthanNode3;
        PArithmetic parithmeticNode4;
        pcomparisonNode2 = (PComparison)nodeArrayList1.get(0);
        tlessthanNode3 = (TLessThan)nodeArrayList2.get(0);
        parithmeticNode4 = (PArithmetic)nodeArrayList3.get(0);

        pcomparisonNode1 = new ALessThanComparison(pcomparisonNode2, tlessthanNode3, parithmeticNode4);
        }
	nodeList.add(pcomparisonNode1);
        return nodeList;
    }



    @SuppressWarnings({ "unchecked", "rawtypes" })
    ArrayList<Object> new9() /* reduce AGreaterThanOrEqualToComparison */
    {
        @SuppressWarnings("hiding") ArrayList<Object> nodeList = new ArrayList<Object>();

        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList3 = pop();
        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList2 = pop();
        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList1 = pop();
        PComparison pcomparisonNode1;
        {
            // Block
        PComparison pcomparisonNode2;
        TGreaterThanOrEqualTo tgreaterthanorequaltoNode3;
        PArithmetic parithmeticNode4;
        pcomparisonNode2 = (PComparison)nodeArrayList1.get(0);
        tgreaterthanorequaltoNode3 = (TGreaterThanOrEqualTo)nodeArrayList2.get(0);
        parithmeticNode4 = (PArithmetic)nodeArrayList3.get(0);

        pcomparisonNode1 = new AGreaterThanOrEqualToComparison(pcomparisonNode2, tgreaterthanorequaltoNode3, parithmeticNode4);
        }
	nodeList.add(pcomparisonNode1);
        return nodeList;
    }



    @SuppressWarnings({ "unchecked", "rawtypes" })
    ArrayList<Object> new10() /* reduce ALessThanOrEqualToComparison */
    {
        @SuppressWarnings("hiding") ArrayList<Object> nodeList = new ArrayList<Object>();

        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList3 = pop();
        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList2 = pop();
        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList1 = pop();
        PComparison pcomparisonNode1;
        {
            // Block
        PComparison pcomparisonNode2;
        TLessThanOrEqualTo tlessthanorequaltoNode3;
        PArithmetic parithmeticNode4;
        pcomparisonNode2 = (PComparison)nodeArrayList1.get(0);
        tlessthanorequaltoNode3 = (TLessThanOrEqualTo)nodeArrayList2.get(0);
        parithmeticNode4 = (PArithmetic)nodeArrayList3.get(0);

        pcomparisonNode1 = new ALessThanOrEqualToComparison(pcomparisonNode2, tlessthanorequaltoNode3, parithmeticNode4);
        }
	nodeList.add(pcomparisonNode1);
        return nodeList;
    }



    @SuppressWarnings({ "unchecked", "rawtypes" })
    ArrayList<Object> new11() /* reduce ANotEqualToComparison */
    {
        @SuppressWarnings("hiding") ArrayList<Object> nodeList = new ArrayList<Object>();

        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList3 = pop();
        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList2 = pop();
        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList1 = pop();
        PComparison pcomparisonNode1;
        {
            // Block
        PComparison pcomparisonNode2;
        TNotEqualTo tnotequaltoNode3;
        PArithmetic parithmeticNode4;
        pcomparisonNode2 = (PComparison)nodeArrayList1.get(0);
        tnotequaltoNode3 = (TNotEqualTo)nodeArrayList2.get(0);
        parithmeticNode4 = (PArithmetic)nodeArrayList3.get(0);

        pcomparisonNode1 = new ANotEqualToComparison(pcomparisonNode2, tnotequaltoNode3, parithmeticNode4);
        }
	nodeList.add(pcomparisonNode1);
        return nodeList;
    }



    @SuppressWarnings({ "unchecked", "rawtypes" })
    ArrayList<Object> new12() /* reduce ANotGreaterThanComparison */
    {
        @SuppressWarnings("hiding") ArrayList<Object> nodeList = new ArrayList<Object>();

        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList3 = pop();
        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList2 = pop();
        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList1 = pop();
        PComparison pcomparisonNode1;
        {
            // Block
        PComparison pcomparisonNode2;
        TNotGreaterThan tnotgreaterthanNode3;
        PArithmetic parithmeticNode4;
        pcomparisonNode2 = (PComparison)nodeArrayList1.get(0);
        tnotgreaterthanNode3 = (TNotGreaterThan)nodeArrayList2.get(0);
        parithmeticNode4 = (PArithmetic)nodeArrayList3.get(0);

        pcomparisonNode1 = new ANotGreaterThanComparison(pcomparisonNode2, tnotgreaterthanNode3, parithmeticNode4);
        }
	nodeList.add(pcomparisonNode1);
        return nodeList;
    }



    @SuppressWarnings({ "unchecked", "rawtypes" })
    ArrayList<Object> new13() /* reduce ANotLessThanComparison */
    {
        @SuppressWarnings("hiding") ArrayList<Object> nodeList = new ArrayList<Object>();

        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList3 = pop();
        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList2 = pop();
        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList1 = pop();
        PComparison pcomparisonNode1;
        {
            // Block
        PComparison pcomparisonNode2;
        TNotLessThan tnotlessthanNode3;
        PArithmetic parithmeticNode4;
        pcomparisonNode2 = (PComparison)nodeArrayList1.get(0);
        tnotlessthanNode3 = (TNotLessThan)nodeArrayList2.get(0);
        parithmeticNode4 = (PArithmetic)nodeArrayList3.get(0);

        pcomparisonNode1 = new ANotLessThanComparison(pcomparisonNode2, tnotlessthanNode3, parithmeticNode4);
        }
	nodeList.add(pcomparisonNode1);
        return nodeList;
    }



    @SuppressWarnings({ "unchecked", "rawtypes" })
    ArrayList<Object> new14() /* reduce ANeitherGreaterThanNorEqualToComparison */
    {
        @SuppressWarnings("hiding") ArrayList<Object> nodeList = new ArrayList<Object>();

        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList3 = pop();
        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList2 = pop();
        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList1 = pop();
        PComparison pcomparisonNode1;
        {
            // Block
        PComparison pcomparisonNode2;
        TNeitherGreaterThanNorEqualTo tneithergreaterthannorequaltoNode3;
        PArithmetic parithmeticNode4;
        pcomparisonNode2 = (PComparison)nodeArrayList1.get(0);
        tneithergreaterthannorequaltoNode3 = (TNeitherGreaterThanNorEqualTo)nodeArrayList2.get(0);
        parithmeticNode4 = (PArithmetic)nodeArrayList3.get(0);

        pcomparisonNode1 = new ANeitherGreaterThanNorEqualToComparison(pcomparisonNode2, tneithergreaterthannorequaltoNode3, parithmeticNode4);
        }
	nodeList.add(pcomparisonNode1);
        return nodeList;
    }



    @SuppressWarnings({ "unchecked", "rawtypes" })
    ArrayList<Object> new15() /* reduce ANeitherLessThanNorEqualToComparison */
    {
        @SuppressWarnings("hiding") ArrayList<Object> nodeList = new ArrayList<Object>();

        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList3 = pop();
        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList2 = pop();
        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList1 = pop();
        PComparison pcomparisonNode1;
        {
            // Block
        PComparison pcomparisonNode2;
        TNeitherLessThanNorEqualTo tneitherlessthannorequaltoNode3;
        PArithmetic parithmeticNode4;
        pcomparisonNode2 = (PComparison)nodeArrayList1.get(0);
        tneitherlessthannorequaltoNode3 = (TNeitherLessThanNorEqualTo)nodeArrayList2.get(0);
        parithmeticNode4 = (PArithmetic)nodeArrayList3.get(0);

        pcomparisonNode1 = new ANeitherLessThanNorEqualToComparison(pcomparisonNode2, tneitherlessthannorequaltoNode3, parithmeticNode4);
        }
	nodeList.add(pcomparisonNode1);
        return nodeList;
    }



    @SuppressWarnings({ "unchecked", "rawtypes" })
    ArrayList<Object> new16() /* reduce AFactorArithmetic */
    {
        @SuppressWarnings("hiding") ArrayList<Object> nodeList = new ArrayList<Object>();

        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList1 = pop();
        PArithmetic parithmeticNode1;
        {
            // Block
        PFactor pfactorNode2;
        pfactorNode2 = (PFactor)nodeArrayList1.get(0);

        parithmeticNode1 = new AFactorArithmetic(pfactorNode2);
        }
	nodeList.add(parithmeticNode1);
        return nodeList;
    }



    @SuppressWarnings({ "unchecked", "rawtypes" })
    ArrayList<Object> new17() /* reduce APlusArithmetic */
    {
        @SuppressWarnings("hiding") ArrayList<Object> nodeList = new ArrayList<Object>();

        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList3 = pop();
        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList2 = pop();
        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList1 = pop();
        PArithmetic parithmeticNode1;
        {
            // Block
        PArithmetic parithmeticNode2;
        TPlus tplusNode3;
        PFactor pfactorNode4;
        parithmeticNode2 = (PArithmetic)nodeArrayList1.get(0);
        tplusNode3 = (TPlus)nodeArrayList2.get(0);
        pfactorNode4 = (PFactor)nodeArrayList3.get(0);

        parithmeticNode1 = new APlusArithmetic(parithmeticNode2, tplusNode3, pfactorNode4);
        }
	nodeList.add(parithmeticNode1);
        return nodeList;
    }



    @SuppressWarnings({ "unchecked", "rawtypes" })
    ArrayList<Object> new18() /* reduce AMinusArithmetic */
    {
        @SuppressWarnings("hiding") ArrayList<Object> nodeList = new ArrayList<Object>();

        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList3 = pop();
        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList2 = pop();
        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList1 = pop();
        PArithmetic parithmeticNode1;
        {
            // Block
        PArithmetic parithmeticNode2;
        TMinus tminusNode3;
        PFactor pfactorNode4;
        parithmeticNode2 = (PArithmetic)nodeArrayList1.get(0);
        tminusNode3 = (TMinus)nodeArrayList2.get(0);
        pfactorNode4 = (PFactor)nodeArrayList3.get(0);

        parithmeticNode1 = new AMinusArithmetic(parithmeticNode2, tminusNode3, pfactorNode4);
        }
	nodeList.add(parithmeticNode1);
        return nodeList;
    }



    @SuppressWarnings({ "unchecked", "rawtypes" })
    ArrayList<Object> new19() /* reduce ATermFactor */
    {
        @SuppressWarnings("hiding") ArrayList<Object> nodeList = new ArrayList<Object>();

        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList1 = pop();
        PFactor pfactorNode1;
        {
            // Block
        PTerm ptermNode2;
        ptermNode2 = (PTerm)nodeArrayList1.get(0);

        pfactorNode1 = new ATermFactor(ptermNode2);
        }
	nodeList.add(pfactorNode1);
        return nodeList;
    }



    @SuppressWarnings({ "unchecked", "rawtypes" })
    ArrayList<Object> new20() /* reduce AMultiplicationFactor */
    {
        @SuppressWarnings("hiding") ArrayList<Object> nodeList = new ArrayList<Object>();

        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList3 = pop();
        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList2 = pop();
        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList1 = pop();
        PFactor pfactorNode1;
        {
            // Block
        PFactor pfactorNode2;
        TMultiplication tmultiplicationNode3;
        PTerm ptermNode4;
        pfactorNode2 = (PFactor)nodeArrayList1.get(0);
        tmultiplicationNode3 = (TMultiplication)nodeArrayList2.get(0);
        ptermNode4 = (PTerm)nodeArrayList3.get(0);

        pfactorNode1 = new AMultiplicationFactor(pfactorNode2, tmultiplicationNode3, ptermNode4);
        }
	nodeList.add(pfactorNode1);
        return nodeList;
    }



    @SuppressWarnings({ "unchecked", "rawtypes" })
    ArrayList<Object> new21() /* reduce ADivisionFactor */
    {
        @SuppressWarnings("hiding") ArrayList<Object> nodeList = new ArrayList<Object>();

        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList3 = pop();
        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList2 = pop();
        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList1 = pop();
        PFactor pfactorNode1;
        {
            // Block
        PFactor pfactorNode2;
        TDivision tdivisionNode3;
        PTerm ptermNode4;
        pfactorNode2 = (PFactor)nodeArrayList1.get(0);
        tdivisionNode3 = (TDivision)nodeArrayList2.get(0);
        ptermNode4 = (PTerm)nodeArrayList3.get(0);

        pfactorNode1 = new ADivisionFactor(pfactorNode2, tdivisionNode3, ptermNode4);
        }
	nodeList.add(pfactorNode1);
        return nodeList;
    }



    @SuppressWarnings({ "unchecked", "rawtypes" })
    ArrayList<Object> new22() /* reduce AModuloFactor */
    {
        @SuppressWarnings("hiding") ArrayList<Object> nodeList = new ArrayList<Object>();

        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList3 = pop();
        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList2 = pop();
        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList1 = pop();
        PFactor pfactorNode1;
        {
            // Block
        PFactor pfactorNode2;
        TModulo tmoduloNode3;
        PTerm ptermNode4;
        pfactorNode2 = (PFactor)nodeArrayList1.get(0);
        tmoduloNode3 = (TModulo)nodeArrayList2.get(0);
        ptermNode4 = (PTerm)nodeArrayList3.get(0);

        pfactorNode1 = new AModuloFactor(pfactorNode2, tmoduloNode3, ptermNode4);
        }
	nodeList.add(pfactorNode1);
        return nodeList;
    }



    @SuppressWarnings({ "unchecked", "rawtypes" })
    ArrayList<Object> new23() /* reduce ANumberTerm */
    {
        @SuppressWarnings("hiding") ArrayList<Object> nodeList = new ArrayList<Object>();

        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList1 = pop();
        PTerm ptermNode1;
        {
            // Block
        TNumber tnumberNode2;
        tnumberNode2 = (TNumber)nodeArrayList1.get(0);

        ptermNode1 = new ANumberTerm(tnumberNode2);
        }
	nodeList.add(ptermNode1);
        return nodeList;
    }



    @SuppressWarnings({ "unchecked", "rawtypes" })
    ArrayList<Object> new24() /* reduce AElementTerm */
    {
        @SuppressWarnings("hiding") ArrayList<Object> nodeList = new ArrayList<Object>();

        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList1 = pop();
        PTerm ptermNode1;
        {
            // Block
        TElement telementNode2;
        telementNode2 = (TElement)nodeArrayList1.get(0);

        ptermNode1 = new AElementTerm(telementNode2);
        }
	nodeList.add(ptermNode1);
        return nodeList;
    }



    @SuppressWarnings({ "unchecked", "rawtypes" })
    ArrayList<Object> new25() /* reduce AExpressionTerm */
    {
        @SuppressWarnings("hiding") ArrayList<Object> nodeList = new ArrayList<Object>();

        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList3 = pop();
        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList2 = pop();
        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList1 = pop();
        PTerm ptermNode1;
        {
            // Block
        TLeftParenthesis tleftparenthesisNode2;
        PExpression pexpressionNode3;
        TRightParenthesis trightparenthesisNode4;
        tleftparenthesisNode2 = (TLeftParenthesis)nodeArrayList1.get(0);
        pexpressionNode3 = (PExpression)nodeArrayList2.get(0);
        trightparenthesisNode4 = (TRightParenthesis)nodeArrayList3.get(0);

        ptermNode1 = new AExpressionTerm(tleftparenthesisNode2, pexpressionNode3, trightparenthesisNode4);
        }
	nodeList.add(ptermNode1);
        return nodeList;
    }



    private static int[][][] actionTable;
/*      {
			{{-1, ERROR, 0}, {23, SHIFT, 1}, },
			{{-1, ERROR, 1}, {40, SHIFT, 4}, },
			{{-1, ERROR, 2}, {43, ACCEPT, -1}, },
			{{-1, REDUCE, 0}, },
			{{-1, ERROR, 4}, {21, SHIFT, 5}, },
			{{-1, ERROR, 5}, {39, SHIFT, 6}, },
			{{-1, ERROR, 6}, {12, SHIFT, 7}, },
			{{-1, ERROR, 7}, {25, SHIFT, 8}, {40, SHIFT, 9}, {41, SHIFT, 10}, },
			{{-1, ERROR, 8}, {25, SHIFT, 8}, {40, SHIFT, 9}, {41, SHIFT, 10}, },
			{{-1, REDUCE, 24}, },
			{{-1, REDUCE, 23}, },
			{{-1, ERROR, 11}, {15, SHIFT, 17}, {16, SHIFT, 18}, {24, SHIFT, 19}, },
			{{-1, REDUCE, 2}, {29, SHIFT, 20}, {30, SHIFT, 21}, {31, SHIFT, 22}, {32, SHIFT, 23}, {33, SHIFT, 24}, {34, SHIFT, 25}, {35, SHIFT, 26}, {36, SHIFT, 27}, {37, SHIFT, 28}, {38, SHIFT, 29}, },
			{{-1, REDUCE, 5}, {8, SHIFT, 30}, {9, SHIFT, 31}, },
			{{-1, REDUCE, 16}, {5, SHIFT, 32}, {6, SHIFT, 33}, {7, SHIFT, 34}, },
			{{-1, REDUCE, 19}, },
			{{-1, ERROR, 16}, {15, SHIFT, 17}, {16, SHIFT, 18}, {26, SHIFT, 35}, },
			{{-1, ERROR, 17}, {25, SHIFT, 8}, {40, SHIFT, 9}, {41, SHIFT, 10}, },
			{{-1, ERROR, 18}, {25, SHIFT, 8}, {40, SHIFT, 9}, {41, SHIFT, 10}, },
			{{-1, REDUCE, 1}, },
			{{-1, ERROR, 20}, {25, SHIFT, 8}, {40, SHIFT, 9}, {41, SHIFT, 10}, },
			{{-1, ERROR, 21}, {25, SHIFT, 8}, {40, SHIFT, 9}, {41, SHIFT, 10}, },
			{{-1, ERROR, 22}, {25, SHIFT, 8}, {40, SHIFT, 9}, {41, SHIFT, 10}, },
			{{-1, ERROR, 23}, {25, SHIFT, 8}, {40, SHIFT, 9}, {41, SHIFT, 10}, },
			{{-1, ERROR, 24}, {25, SHIFT, 8}, {40, SHIFT, 9}, {41, SHIFT, 10}, },
			{{-1, ERROR, 25}, {25, SHIFT, 8}, {40, SHIFT, 9}, {41, SHIFT, 10}, },
			{{-1, ERROR, 26}, {25, SHIFT, 8}, {40, SHIFT, 9}, {41, SHIFT, 10}, },
			{{-1, ERROR, 27}, {25, SHIFT, 8}, {40, SHIFT, 9}, {41, SHIFT, 10}, },
			{{-1, ERROR, 28}, {25, SHIFT, 8}, {40, SHIFT, 9}, {41, SHIFT, 10}, },
			{{-1, ERROR, 29}, {25, SHIFT, 8}, {40, SHIFT, 9}, {41, SHIFT, 10}, },
			{{-1, ERROR, 30}, {25, SHIFT, 8}, {40, SHIFT, 9}, {41, SHIFT, 10}, },
			{{-1, ERROR, 31}, {25, SHIFT, 8}, {40, SHIFT, 9}, {41, SHIFT, 10}, },
			{{-1, ERROR, 32}, {25, SHIFT, 8}, {40, SHIFT, 9}, {41, SHIFT, 10}, },
			{{-1, ERROR, 33}, {25, SHIFT, 8}, {40, SHIFT, 9}, {41, SHIFT, 10}, },
			{{-1, ERROR, 34}, {25, SHIFT, 8}, {40, SHIFT, 9}, {41, SHIFT, 10}, },
			{{-1, REDUCE, 25}, },
			{{-1, REDUCE, 3}, {29, SHIFT, 20}, {30, SHIFT, 21}, {31, SHIFT, 22}, {32, SHIFT, 23}, {33, SHIFT, 24}, {34, SHIFT, 25}, {35, SHIFT, 26}, {36, SHIFT, 27}, {37, SHIFT, 28}, {38, SHIFT, 29}, },
			{{-1, REDUCE, 4}, {29, SHIFT, 20}, {30, SHIFT, 21}, {31, SHIFT, 22}, {32, SHIFT, 23}, {33, SHIFT, 24}, {34, SHIFT, 25}, {35, SHIFT, 26}, {36, SHIFT, 27}, {37, SHIFT, 28}, {38, SHIFT, 29}, },
			{{-1, REDUCE, 6}, {8, SHIFT, 30}, {9, SHIFT, 31}, },
			{{-1, REDUCE, 7}, {8, SHIFT, 30}, {9, SHIFT, 31}, },
			{{-1, REDUCE, 8}, {8, SHIFT, 30}, {9, SHIFT, 31}, },
			{{-1, REDUCE, 9}, {8, SHIFT, 30}, {9, SHIFT, 31}, },
			{{-1, REDUCE, 10}, {8, SHIFT, 30}, {9, SHIFT, 31}, },
			{{-1, REDUCE, 11}, {8, SHIFT, 30}, {9, SHIFT, 31}, },
			{{-1, REDUCE, 12}, {8, SHIFT, 30}, {9, SHIFT, 31}, },
			{{-1, REDUCE, 13}, {8, SHIFT, 30}, {9, SHIFT, 31}, },
			{{-1, REDUCE, 14}, {8, SHIFT, 30}, {9, SHIFT, 31}, },
			{{-1, REDUCE, 15}, {8, SHIFT, 30}, {9, SHIFT, 31}, },
			{{-1, REDUCE, 17}, {5, SHIFT, 32}, {6, SHIFT, 33}, {7, SHIFT, 34}, },
			{{-1, REDUCE, 18}, {5, SHIFT, 32}, {6, SHIFT, 33}, {7, SHIFT, 34}, },
			{{-1, REDUCE, 20}, },
			{{-1, REDUCE, 21}, },
			{{-1, REDUCE, 22}, },
        };*/
    private static int[][][] gotoTable;
/*      {
			{{-1, 2}, },
			{{-1, 3}, },
			{{-1, 11}, {8, 16}, },
			{{-1, 12}, {17, 36}, {18, 37}, },
			{{-1, 13}, {20, 38}, {21, 39}, {22, 40}, {23, 41}, {24, 42}, {25, 43}, {26, 44}, {27, 45}, {28, 46}, {29, 47}, },
			{{-1, 14}, {30, 48}, {31, 49}, },
			{{-1, 15}, {32, 50}, {33, 51}, {34, 52}, },
        };*/
    private static String[] errorMessages;
/*      {
			"expecting: '{'",
			"expecting: element",
			"expecting: EOF",
			"expecting: element of",
			"expecting: set",
			"expecting: '|'",
			"expecting: '(', element, number",
			"expecting: '*', '/', '%', '+', '-', logical and, logical or, '}', ')', '=', '>', '<', greater than or equal to, less than or equal to, not equal to, not greater than, not less than, neither greater than nor equal to, neither less than nor equal to",
			"expecting: logical and, logical or, '}'",
			"expecting: logical and, logical or, '}', ')', '=', '>', '<', greater than or equal to, less than or equal to, not equal to, not greater than, not less than, neither greater than nor equal to, neither less than nor equal to",
			"expecting: '+', '-', logical and, logical or, '}', ')', '=', '>', '<', greater than or equal to, less than or equal to, not equal to, not greater than, not less than, neither greater than nor equal to, neither less than nor equal to",
			"expecting: logical and, logical or, ')'",
        };*/
    private static int[] errors;
/*      {
			0, 1, 2, 2, 3, 4, 5, 6, 6, 7, 7, 8, 9, 10, 7, 7, 11, 6, 6, 2, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 7, 9, 9, 10, 10, 10, 10, 10, 10, 10, 10, 10, 10, 7, 7, 7, 7, 7, 
        };*/

    static 
    {
        try
        {
            DataInputStream s = new DataInputStream(
                new BufferedInputStream(
                Parser.class.getResourceAsStream("parser.dat")));

            // read actionTable
            int length = s.readInt();
            Parser.actionTable = new int[length][][];
            for(int i = 0; i < Parser.actionTable.length; i++)
            {
                length = s.readInt();
                Parser.actionTable[i] = new int[length][3];
                for(int j = 0; j < Parser.actionTable[i].length; j++)
                {
                for(int k = 0; k < 3; k++)
                {
                    Parser.actionTable[i][j][k] = s.readInt();
                }
                }
            }

            // read gotoTable
            length = s.readInt();
            gotoTable = new int[length][][];
            for(int i = 0; i < gotoTable.length; i++)
            {
                length = s.readInt();
                gotoTable[i] = new int[length][2];
                for(int j = 0; j < gotoTable[i].length; j++)
                {
                for(int k = 0; k < 2; k++)
                {
                    gotoTable[i][j][k] = s.readInt();
                }
                }
            }

            // read errorMessages
            length = s.readInt();
            errorMessages = new String[length];
            for(int i = 0; i < errorMessages.length; i++)
            {
                length = s.readInt();
                StringBuffer buffer = new StringBuffer();

                for(int j = 0; j < length; j++)
                {
                buffer.append(s.readChar());
                }
                errorMessages[i] = buffer.toString();
            }

            // read errors
            length = s.readInt();
            errors = new int[length];
            for(int i = 0; i < errors.length; i++)
            {
                errors[i] = s.readInt();
            }

            s.close();
        }
        catch(Exception e)
        {
            throw new RuntimeException("The file \"parser.dat\" is either missing or corrupted.");
        }
    }
}
