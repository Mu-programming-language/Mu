/* This file was generated by SableCC (http://www.sablecc.org/). */

package parser;

import lexer.*;
import node.*;
import analysis.*;
import java.util.*;

import java.io.DataInputStream;
import java.io.BufferedInputStream;
import java.io.IOException;

@SuppressWarnings("nls")
public class Parser
{
    public final Analysis ignoredTokens = new AnalysisAdapter();

    protected ArrayList<Object> nodeList;

    private final Lexer lexer;
    private final ListIterator<Object> stack = new LinkedList<Object>().listIterator();
    private int last_pos;
    private int last_line;
    private Token last_token;
    private final TokenIndex converter = new TokenIndex();
    private final int[] action = new int[2];

    private final static int SHIFT = 0;
    private final static int REDUCE = 1;
    private final static int ACCEPT = 2;
    private final static int ERROR = 3;

    public Parser(@SuppressWarnings("hiding") Lexer lexer)
    {
        this.lexer = lexer;
    }

    protected void filter() throws ParserException, LexerException, IOException
    {
        // Empty body
    }

    private void push(int numstate, ArrayList<Object> listNode, boolean hidden) throws ParserException, LexerException, IOException
    {
        this.nodeList = listNode;

        if(!hidden)
        {
            filter();
        }

        if(!this.stack.hasNext())
        {
            this.stack.add(new State(numstate, this.nodeList));
            return;
        }

        State s = (State) this.stack.next();
        s.state = numstate;
        s.nodes = this.nodeList;
    }

    private int goTo(int index)
    {
        int state = state();
        int low = 1;
        int high = gotoTable[index].length - 1;
        int value = gotoTable[index][0][1];

        while(low <= high)
        {
            // int middle = (low + high) / 2;
            int middle = (low + high) >>> 1;

            if(state < gotoTable[index][middle][0])
            {
                high = middle - 1;
            }
            else if(state > gotoTable[index][middle][0])
            {
                low = middle + 1;
            }
            else
            {
                value = gotoTable[index][middle][1];
                break;
            }
        }

        return value;
    }

    private int state()
    {
        State s = (State) this.stack.previous();
        this.stack.next();
        return s.state;
    }

    private ArrayList<Object> pop()
    {
        return ((State) this.stack.previous()).nodes;
    }

    private int index(Switchable token)
    {
        this.converter.index = -1;
        token.apply(this.converter);
        return this.converter.index;
    }

    @SuppressWarnings("unchecked")
    public Start parse() throws ParserException, LexerException, IOException
    {
        push(0, null, true);
        List<Node> ign = null;
        while(true)
        {
            while(index(this.lexer.peek()) == -1)
            {
                if(ign == null)
                {
                    ign = new LinkedList<Node>();
                }

                ign.add(this.lexer.next());
            }

            if(ign != null)
            {
                this.ignoredTokens.setIn(this.lexer.peek(), ign);
                ign = null;
            }

            this.last_pos = this.lexer.peek().getPos();
            this.last_line = this.lexer.peek().getLine();
            this.last_token = this.lexer.peek();

            int index = index(this.lexer.peek());
            this.action[0] = Parser.actionTable[state()][0][1];
            this.action[1] = Parser.actionTable[state()][0][2];

            int low = 1;
            int high = Parser.actionTable[state()].length - 1;

            while(low <= high)
            {
                int middle = (low + high) / 2;

                if(index < Parser.actionTable[state()][middle][0])
                {
                    high = middle - 1;
                }
                else if(index > Parser.actionTable[state()][middle][0])
                {
                    low = middle + 1;
                }
                else
                {
                    this.action[0] = Parser.actionTable[state()][middle][1];
                    this.action[1] = Parser.actionTable[state()][middle][2];
                    break;
                }
            }

            switch(this.action[0])
            {
                case SHIFT:
		    {
		        ArrayList<Object> list = new ArrayList<Object>();
		        list.add(this.lexer.next());
                        push(this.action[1], list, false);
                    }
		    break;
                case REDUCE:
                    {
                        int reduction = this.action[1];
                        if(reduction < 500) reduce_0(reduction);
                    }
                    break;
                case ACCEPT:
                    {
                        EOF node2 = (EOF) this.lexer.next();
                        PProgram node1 = (PProgram) pop().get(0);
                        Start node = new Start(node1, node2);
                        return node;
                    }
                case ERROR:
                    throw new ParserException(this.last_token,
                        "[" + this.last_line + "," + this.last_pos + "] " +
                        Parser.errorMessages[Parser.errors[this.action[1]]]);
            }
        }
    }

    private void reduce_0(int reduction) throws IOException, LexerException, ParserException
    {
        switch(reduction)
        {
            case 0: /* reduce AProgram */
            {
                ArrayList<Object> list = new0();
                push(goTo(0), list, false);
            }
            break;
            case 1: /* reduce AInstructions */
            {
                ArrayList<Object> list = new1();
                push(goTo(1), list, false);
            }
            break;
            case 2: /* reduce AStatementBlock */
            {
                ArrayList<Object> list = new2();
                push(goTo(2), list, false);
            }
            break;
            case 3: /* reduce AAskBlock */
            {
                ArrayList<Object> list = new3();
                push(goTo(3), list, false);
            }
            break;
            case 4: /* reduce AProofBlock */
            {
                ArrayList<Object> list = new4();
                push(goTo(4), list, false);
            }
            break;
            case 5: /* reduce AAstatementinstructionlist1StatementInstructionList */
            {
                ArrayList<Object> list = new5();
                push(goTo(5), list, false);
            }
            break;
            case 6: /* reduce AAstatementinstructionlist2StatementInstructionList */
            {
                ArrayList<Object> list = new6();
                push(goTo(5), list, false);
            }
            break;
            case 7: /* reduce AAdditionalStatementInstruction */
            {
                ArrayList<Object> list = new7();
                push(goTo(6), list, false);
            }
            break;
            case 8: /* reduce ADeclarationStatementInstruction */
            {
                ArrayList<Object> list = new8();
                push(goTo(7), list, false);
            }
            break;
            case 9: /* reduce AAssignmentStatementInstruction */
            {
                ArrayList<Object> list = new9();
                push(goTo(7), list, false);
            }
            break;
            case 10: /* reduce ADefinitionStatementInstruction */
            {
                ArrayList<Object> list = new10();
                push(goTo(7), list, false);
            }
            break;
            case 11: /* reduce AAaskinstructionlist1AskInstructionList */
            {
                ArrayList<Object> list = new11();
                push(goTo(8), list, false);
            }
            break;
            case 12: /* reduce AAaskinstructionlist2AskInstructionList */
            {
                ArrayList<Object> list = new12();
                push(goTo(8), list, false);
            }
            break;
            case 13: /* reduce AAdditionalAskInstruction */
            {
                ArrayList<Object> list = new13();
                push(goTo(9), list, false);
            }
            break;
            case 14: /* reduce AAskInstruction */
            {
                ArrayList<Object> list = new14();
                push(goTo(10), list, false);
            }
            break;
            case 15: /* reduce AAproofinstructionlist1ProofInstructionList */
            {
                ArrayList<Object> list = new15();
                push(goTo(11), list, false);
            }
            break;
            case 16: /* reduce AAproofinstructionlist2ProofInstructionList */
            {
                ArrayList<Object> list = new16();
                push(goTo(11), list, false);
            }
            break;
            case 17: /* reduce AAdditionalProofInstruction */
            {
                ArrayList<Object> list = new17();
                push(goTo(12), list, false);
            }
            break;
            case 18: /* reduce AProofInstruction */
            {
                ArrayList<Object> list = new18();
                push(goTo(13), list, false);
            }
            break;
            case 19: /* reduce ADemonstration */
            {
                ArrayList<Object> list = new19();
                push(goTo(14), list, false);
            }
            break;
            case 20: /* reduce AApropositionpropositionlist1PropositionList */
            {
                ArrayList<Object> list = new20();
                push(goTo(15), list, false);
            }
            break;
            case 21: /* reduce AApropositionpropositionlist2PropositionList */
            {
                ArrayList<Object> list = new21();
                push(goTo(15), list, false);
            }
            break;
            case 22: /* reduce AConclusionPropositionList */
            {
                ArrayList<Object> list = new22();
                push(goTo(15), list, false);
            }
            break;
            case 23: /* reduce AImplicationAdditionalProposition */
            {
                ArrayList<Object> list = new23();
                push(goTo(16), list, false);
            }
            break;
            case 24: /* reduce AEquivalenceAdditionalProposition */
            {
                ArrayList<Object> list = new24();
                push(goTo(16), list, false);
            }
            break;
            case 25: /* reduce AExpressionProposition */
            {
                ArrayList<Object> list = new25();
                push(goTo(17), list, false);
            }
            break;
            case 26: /* reduce AForAllProposition */
            {
                ArrayList<Object> list = new26();
                push(goTo(17), list, false);
            }
            break;
            case 27: /* reduce AExistProposition */
            {
                ArrayList<Object> list = new27();
                push(goTo(17), list, false);
            }
            break;
            case 28: /* reduce AExpression */
            {
                ArrayList<Object> list = new28();
                push(goTo(18), list, false);
            }
            break;
            case 29: /* reduce ALogicalOrAndExpression */
            {
                ArrayList<Object> list = new29();
                push(goTo(19), list, false);
            }
            break;
            case 30: /* reduce ALogicalAndAndExpression */
            {
                ArrayList<Object> list = new30();
                push(goTo(19), list, false);
            }
            break;
            case 31: /* reduce AExpressionOrExpression */
            {
                ArrayList<Object> list = new31();
                push(goTo(20), list, false);
            }
            break;
            case 32: /* reduce ALogicalOrOrExpression */
            {
                ArrayList<Object> list = new32();
                push(goTo(20), list, false);
            }
            break;
            case 33: /* reduce AExpressionSimpleExpression */
            {
                ArrayList<Object> list = new33();
                push(goTo(21), list, false);
            }
            break;
            case 34: /* reduce ASetExpressionSimpleExpression */
            {
                ArrayList<Object> list = new34();
                push(goTo(21), list, false);
            }
            break;
            case 35: /* reduce AElementExpressionSimpleExpression */
            {
                ArrayList<Object> list = new35();
                push(goTo(21), list, false);
            }
            break;
            case 36: /* reduce AComparisonSetExpression */
            {
                ArrayList<Object> list = new36();
                push(goTo(22), list, false);
            }
            break;
            case 37: /* reduce AArithmeticSetComparison */
            {
                ArrayList<Object> list = new37();
                push(goTo(23), list, false);
            }
            break;
            case 38: /* reduce AEqualToSetComparison */
            {
                ArrayList<Object> list = new38();
                push(goTo(23), list, false);
            }
            break;
            case 39: /* reduce ANotEqualToSetComparison */
            {
                ArrayList<Object> list = new39();
                push(goTo(23), list, false);
            }
            break;
            case 40: /* reduce ASubsetOfSetComparison */
            {
                ArrayList<Object> list = new40();
                push(goTo(23), list, false);
            }
            break;
            case 41: /* reduce ANotASubsetOfSetComparison */
            {
                ArrayList<Object> list = new41();
                push(goTo(23), list, false);
            }
            break;
            case 42: /* reduce ASupersetOfSetComparison */
            {
                ArrayList<Object> list = new42();
                push(goTo(23), list, false);
            }
            break;
            case 43: /* reduce ANotASupersetOfSetComparison */
            {
                ArrayList<Object> list = new43();
                push(goTo(23), list, false);
            }
            break;
            case 44: /* reduce AFactorSetArithmetic */
            {
                ArrayList<Object> list = new44();
                push(goTo(24), list, false);
            }
            break;
            case 45: /* reduce APlusSetArithmetic */
            {
                ArrayList<Object> list = new45();
                push(goTo(24), list, false);
            }
            break;
            case 46: /* reduce ADeprivedOfSetArithmetic */
            {
                ArrayList<Object> list = new46();
                push(goTo(24), list, false);
            }
            break;
            case 47: /* reduce AUnionSetArithmetic */
            {
                ArrayList<Object> list = new47();
                push(goTo(24), list, false);
            }
            break;
            case 48: /* reduce AIntersectionSetArithmetic */
            {
                ArrayList<Object> list = new48();
                push(goTo(24), list, false);
            }
            break;
            case 49: /* reduce ATermSetFactor */
            {
                ArrayList<Object> list = new49();
                push(goTo(25), list, false);
            }
            break;
            case 50: /* reduce AMultSetFactor */
            {
                ArrayList<Object> list = new50();
                push(goTo(25), list, false);
            }
            break;
            case 51: /* reduce ATermSetExponent */
            {
                ArrayList<Object> list = new51();
                push(goTo(26), list, false);
            }
            break;
            case 52: /* reduce AExpSetExponent */
            {
                ArrayList<Object> list = new52();
                push(goTo(26), list, false);
            }
            break;
            case 53: /* reduce AIdentifierSetTerm */
            {
                ArrayList<Object> list = new53();
                push(goTo(27), list, false);
            }
            break;
            case 54: /* reduce AElementSetTerm */
            {
                ArrayList<Object> list = new54();
                push(goTo(27), list, false);
            }
            break;
            case 55: /* reduce AExpressionSetTerm */
            {
                ArrayList<Object> list = new55();
                push(goTo(27), list, false);
            }
            break;
            case 56: /* reduce AComparisonElementExpression */
            {
                ArrayList<Object> list = new56();
                push(goTo(28), list, false);
            }
            break;
            case 57: /* reduce AArithmeticElementComparison */
            {
                ArrayList<Object> list = new57();
                push(goTo(29), list, false);
            }
            break;
            case 58: /* reduce AEqualToElementComparison */
            {
                ArrayList<Object> list = new58();
                push(goTo(29), list, false);
            }
            break;
            case 59: /* reduce ANotEqualToElementComparison */
            {
                ArrayList<Object> list = new59();
                push(goTo(29), list, false);
            }
            break;
            case 60: /* reduce AGreaterThanElementComparison */
            {
                ArrayList<Object> list = new60();
                push(goTo(29), list, false);
            }
            break;
            case 61: /* reduce ANotGreaterThanElementComparison */
            {
                ArrayList<Object> list = new61();
                push(goTo(29), list, false);
            }
            break;
            case 62: /* reduce ALessThanElementComparison */
            {
                ArrayList<Object> list = new62();
                push(goTo(29), list, false);
            }
            break;
            case 63: /* reduce ANotLessThanElementComparison */
            {
                ArrayList<Object> list = new63();
                push(goTo(29), list, false);
            }
            break;
            case 64: /* reduce AGreaterThanOrEqualToElementComparison */
            {
                ArrayList<Object> list = new64();
                push(goTo(29), list, false);
            }
            break;
            case 65: /* reduce ANeitherGreaterThanNorEqualToElementComparison */
            {
                ArrayList<Object> list = new65();
                push(goTo(29), list, false);
            }
            break;
            case 66: /* reduce ALessThanOrEqualToElementComparison */
            {
                ArrayList<Object> list = new66();
                push(goTo(29), list, false);
            }
            break;
            case 67: /* reduce ANeitherLessThanNorEqualToElementComparison */
            {
                ArrayList<Object> list = new67();
                push(goTo(29), list, false);
            }
            break;
            case 68: /* reduce AFactorElementArithmetic */
            {
                ArrayList<Object> list = new68();
                push(goTo(30), list, false);
            }
            break;
            case 69: /* reduce APlusElementArithmetic */
            {
                ArrayList<Object> list = new69();
                push(goTo(30), list, false);
            }
            break;
            case 70: /* reduce AMinusElementArithmetic */
            {
                ArrayList<Object> list = new70();
                push(goTo(30), list, false);
            }
            break;
            case 71: /* reduce ATermElementFactor */
            {
                ArrayList<Object> list = new71();
                push(goTo(31), list, false);
            }
            break;
            case 72: /* reduce AMultiplicationElementFactor */
            {
                ArrayList<Object> list = new72();
                push(goTo(31), list, false);
            }
            break;
            case 73: /* reduce ADivisionElementFactor */
            {
                ArrayList<Object> list = new73();
                push(goTo(31), list, false);
            }
            break;
            case 74: /* reduce AModuloElementFactor */
            {
                ArrayList<Object> list = new74();
                push(goTo(31), list, false);
            }
            break;
            case 75: /* reduce ANumberElementTerm */
            {
                ArrayList<Object> list = new75();
                push(goTo(32), list, false);
            }
            break;
            case 76: /* reduce AElementElementTerm */
            {
                ArrayList<Object> list = new76();
                push(goTo(32), list, false);
            }
            break;
            case 77: /* reduce AExpressionElementTerm */
            {
                ArrayList<Object> list = new77();
                push(goTo(32), list, false);
            }
            break;
            case 78: /* reduce ATerminal$AdditionalStatementInstruction */
            {
                ArrayList<Object> list = new78();
                push(goTo(33), list, true);
            }
            break;
            case 79: /* reduce ANonTerminal$AdditionalStatementInstruction */
            {
                ArrayList<Object> list = new79();
                push(goTo(33), list, true);
            }
            break;
            case 80: /* reduce ATerminal$AdditionalAskInstruction */
            {
                ArrayList<Object> list = new80();
                push(goTo(34), list, true);
            }
            break;
            case 81: /* reduce ANonTerminal$AdditionalAskInstruction */
            {
                ArrayList<Object> list = new81();
                push(goTo(34), list, true);
            }
            break;
            case 82: /* reduce ATerminal$AdditionalProofInstruction */
            {
                ArrayList<Object> list = new82();
                push(goTo(35), list, true);
            }
            break;
            case 83: /* reduce ANonTerminal$AdditionalProofInstruction */
            {
                ArrayList<Object> list = new83();
                push(goTo(35), list, true);
            }
            break;
            case 84: /* reduce ATerminal$PropositionList */
            {
                ArrayList<Object> list = new84();
                push(goTo(36), list, true);
            }
            break;
            case 85: /* reduce ANonTerminal$PropositionList */
            {
                ArrayList<Object> list = new85();
                push(goTo(36), list, true);
            }
            break;
            case 86: /* reduce ATerminal$AdditionalProposition */
            {
                ArrayList<Object> list = new86();
                push(goTo(37), list, true);
            }
            break;
            case 87: /* reduce ANonTerminal$AdditionalProposition */
            {
                ArrayList<Object> list = new87();
                push(goTo(37), list, true);
            }
            break;
        }
    }



    @SuppressWarnings({ "unchecked", "rawtypes" })
    ArrayList<Object> new0() /* reduce AProgram */
    {
        @SuppressWarnings("hiding") ArrayList<Object> nodeList = new ArrayList<Object>();

        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList3 = pop();
        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList2 = pop();
        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList1 = pop();
        PProgram pprogramNode1;
        {
            // Block
        TCategory tcategoryNode2;
        TSemicolon tsemicolonNode3;
        PInstructions pinstructionsNode4;
        tcategoryNode2 = (TCategory)nodeArrayList1.get(0);
        tsemicolonNode3 = (TSemicolon)nodeArrayList2.get(0);
        pinstructionsNode4 = (PInstructions)nodeArrayList3.get(0);

        pprogramNode1 = new AProgram(tcategoryNode2, tsemicolonNode3, pinstructionsNode4);
        }
	nodeList.add(pprogramNode1);
        return nodeList;
    }



    @SuppressWarnings({ "unchecked", "rawtypes" })
    ArrayList<Object> new1() /* reduce AInstructions */
    {
        @SuppressWarnings("hiding") ArrayList<Object> nodeList = new ArrayList<Object>();

        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList3 = pop();
        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList2 = pop();
        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList1 = pop();
        PInstructions pinstructionsNode1;
        {
            // Block
        PStatementBlock pstatementblockNode2;
        PAskBlock paskblockNode3;
        PProofBlock pproofblockNode4;
        pstatementblockNode2 = (PStatementBlock)nodeArrayList1.get(0);
        paskblockNode3 = (PAskBlock)nodeArrayList2.get(0);
        pproofblockNode4 = (PProofBlock)nodeArrayList3.get(0);

        pinstructionsNode1 = new AInstructions(pstatementblockNode2, paskblockNode3, pproofblockNode4);
        }
	nodeList.add(pinstructionsNode1);
        return nodeList;
    }



    @SuppressWarnings({ "unchecked", "rawtypes" })
    ArrayList<Object> new2() /* reduce AStatementBlock */
    {
        @SuppressWarnings("hiding") ArrayList<Object> nodeList = new ArrayList<Object>();

        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList3 = pop();
        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList2 = pop();
        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList1 = pop();
        PStatementBlock pstatementblockNode1;
        {
            // Block
        TStatement tstatementNode2;
        TColumn tcolumnNode3;
        PStatementInstructionList pstatementinstructionlistNode4;
        tstatementNode2 = (TStatement)nodeArrayList1.get(0);
        tcolumnNode3 = (TColumn)nodeArrayList2.get(0);
        pstatementinstructionlistNode4 = (PStatementInstructionList)nodeArrayList3.get(0);

        pstatementblockNode1 = new AStatementBlock(tstatementNode2, tcolumnNode3, pstatementinstructionlistNode4);
        }
	nodeList.add(pstatementblockNode1);
        return nodeList;
    }



    @SuppressWarnings({ "unchecked", "rawtypes" })
    ArrayList<Object> new3() /* reduce AAskBlock */
    {
        @SuppressWarnings("hiding") ArrayList<Object> nodeList = new ArrayList<Object>();

        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList3 = pop();
        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList2 = pop();
        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList1 = pop();
        PAskBlock paskblockNode1;
        {
            // Block
        TAsk taskNode2;
        TColumn tcolumnNode3;
        PAskInstructionList paskinstructionlistNode4;
        taskNode2 = (TAsk)nodeArrayList1.get(0);
        tcolumnNode3 = (TColumn)nodeArrayList2.get(0);
        paskinstructionlistNode4 = (PAskInstructionList)nodeArrayList3.get(0);

        paskblockNode1 = new AAskBlock(taskNode2, tcolumnNode3, paskinstructionlistNode4);
        }
	nodeList.add(paskblockNode1);
        return nodeList;
    }



    @SuppressWarnings({ "unchecked", "rawtypes" })
    ArrayList<Object> new4() /* reduce AProofBlock */
    {
        @SuppressWarnings("hiding") ArrayList<Object> nodeList = new ArrayList<Object>();

        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList3 = pop();
        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList2 = pop();
        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList1 = pop();
        PProofBlock pproofblockNode1;
        {
            // Block
        TProof tproofNode2;
        TColumn tcolumnNode3;
        PProofInstructionList pproofinstructionlistNode4;
        tproofNode2 = (TProof)nodeArrayList1.get(0);
        tcolumnNode3 = (TColumn)nodeArrayList2.get(0);
        pproofinstructionlistNode4 = (PProofInstructionList)nodeArrayList3.get(0);

        pproofblockNode1 = new AProofBlock(tproofNode2, tcolumnNode3, pproofinstructionlistNode4);
        }
	nodeList.add(pproofblockNode1);
        return nodeList;
    }



    @SuppressWarnings({ "unchecked", "rawtypes" })
    ArrayList<Object> new5() /* reduce AAstatementinstructionlist1StatementInstructionList */
    {
        @SuppressWarnings("hiding") ArrayList<Object> nodeList = new ArrayList<Object>();

        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList2 = pop();
        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList1 = pop();
        PStatementInstructionList pstatementinstructionlistNode1;
        {
            // Block
        PStatementInstruction pstatementinstructionNode2;
        LinkedList<Object> listNode3 = new LinkedList<Object>();
        TSemicolon tsemicolonNode4;
        pstatementinstructionNode2 = (PStatementInstruction)nodeArrayList1.get(0);
        {
            // Block
        }
        tsemicolonNode4 = (TSemicolon)nodeArrayList2.get(0);

        pstatementinstructionlistNode1 = new AStatementInstructionList(pstatementinstructionNode2, listNode3, tsemicolonNode4);
        }
	nodeList.add(pstatementinstructionlistNode1);
        return nodeList;
    }



    @SuppressWarnings({ "unchecked", "rawtypes" })
    ArrayList<Object> new6() /* reduce AAstatementinstructionlist2StatementInstructionList */
    {
        @SuppressWarnings("hiding") ArrayList<Object> nodeList = new ArrayList<Object>();

        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList3 = pop();
        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList2 = pop();
        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList1 = pop();
        PStatementInstructionList pstatementinstructionlistNode1;
        {
            // Block
        PStatementInstruction pstatementinstructionNode2;
        LinkedList<Object> listNode4 = new LinkedList<Object>();
        TSemicolon tsemicolonNode5;
        pstatementinstructionNode2 = (PStatementInstruction)nodeArrayList1.get(0);
        {
            // Block
        LinkedList<Object> listNode3 = new LinkedList<Object>();
        listNode3 = (LinkedList)nodeArrayList2.get(0);
	if(listNode3 != null)
	{
	  listNode4.addAll(listNode3);
	}
        }
        tsemicolonNode5 = (TSemicolon)nodeArrayList3.get(0);

        pstatementinstructionlistNode1 = new AStatementInstructionList(pstatementinstructionNode2, listNode4, tsemicolonNode5);
        }
	nodeList.add(pstatementinstructionlistNode1);
        return nodeList;
    }



    @SuppressWarnings({ "unchecked", "rawtypes" })
    ArrayList<Object> new7() /* reduce AAdditionalStatementInstruction */
    {
        @SuppressWarnings("hiding") ArrayList<Object> nodeList = new ArrayList<Object>();

        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList2 = pop();
        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList1 = pop();
        PAdditionalStatementInstruction padditionalstatementinstructionNode1;
        {
            // Block
        TComma tcommaNode2;
        PStatementInstruction pstatementinstructionNode3;
        tcommaNode2 = (TComma)nodeArrayList1.get(0);
        pstatementinstructionNode3 = (PStatementInstruction)nodeArrayList2.get(0);

        padditionalstatementinstructionNode1 = new AAdditionalStatementInstruction(tcommaNode2, pstatementinstructionNode3);
        }
	nodeList.add(padditionalstatementinstructionNode1);
        return nodeList;
    }



    @SuppressWarnings({ "unchecked", "rawtypes" })
    ArrayList<Object> new8() /* reduce ADeclarationStatementInstruction */
    {
        @SuppressWarnings("hiding") ArrayList<Object> nodeList = new ArrayList<Object>();

        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList2 = pop();
        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList1 = pop();
        PStatementInstruction pstatementinstructionNode1;
        {
            // Block
        TLet tletNode2;
        TSetIdentifier tsetidentifierNode3;
        tletNode2 = (TLet)nodeArrayList1.get(0);
        tsetidentifierNode3 = (TSetIdentifier)nodeArrayList2.get(0);

        pstatementinstructionNode1 = new ADeclarationStatementInstruction(tletNode2, tsetidentifierNode3);
        }
	nodeList.add(pstatementinstructionNode1);
        return nodeList;
    }



    @SuppressWarnings({ "unchecked", "rawtypes" })
    ArrayList<Object> new9() /* reduce AAssignmentStatementInstruction */
    {
        @SuppressWarnings("hiding") ArrayList<Object> nodeList = new ArrayList<Object>();

        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList9 = pop();
        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList8 = pop();
        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList7 = pop();
        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList6 = pop();
        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList5 = pop();
        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList4 = pop();
        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList3 = pop();
        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList2 = pop();
        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList1 = pop();
        PStatementInstruction pstatementinstructionNode1;
        {
            // Block
        TSetIdentifier tsetidentifierNode2;
        TEqualTo tequaltoNode3;
        TLeftBrace tleftbraceNode4;
        TElementIdentifier telementidentifierNode5;
        TElementOf telementofNode6;
        TSetIdentifier tsetidentifierNode7;
        TSuchAs tsuchasNode8;
        PElementExpression pelementexpressionNode9;
        TRightBrace trightbraceNode10;
        tsetidentifierNode2 = (TSetIdentifier)nodeArrayList1.get(0);
        tequaltoNode3 = (TEqualTo)nodeArrayList2.get(0);
        tleftbraceNode4 = (TLeftBrace)nodeArrayList3.get(0);
        telementidentifierNode5 = (TElementIdentifier)nodeArrayList4.get(0);
        telementofNode6 = (TElementOf)nodeArrayList5.get(0);
        tsetidentifierNode7 = (TSetIdentifier)nodeArrayList6.get(0);
        tsuchasNode8 = (TSuchAs)nodeArrayList7.get(0);
        pelementexpressionNode9 = (PElementExpression)nodeArrayList8.get(0);
        trightbraceNode10 = (TRightBrace)nodeArrayList9.get(0);

        pstatementinstructionNode1 = new AAssignmentStatementInstruction(tsetidentifierNode2, tequaltoNode3, tleftbraceNode4, telementidentifierNode5, telementofNode6, tsetidentifierNode7, tsuchasNode8, pelementexpressionNode9, trightbraceNode10);
        }
	nodeList.add(pstatementinstructionNode1);
        return nodeList;
    }



    @SuppressWarnings({ "unchecked", "rawtypes" })
    ArrayList<Object> new10() /* reduce ADefinitionStatementInstruction */
    {
        @SuppressWarnings("hiding") ArrayList<Object> nodeList = new ArrayList<Object>();

        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList10 = pop();
        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList9 = pop();
        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList8 = pop();
        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList7 = pop();
        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList6 = pop();
        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList5 = pop();
        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList4 = pop();
        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList3 = pop();
        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList2 = pop();
        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList1 = pop();
        PStatementInstruction pstatementinstructionNode1;
        {
            // Block
        TLet tletNode2;
        TSetIdentifier tsetidentifierNode3;
        TEqualTo tequaltoNode4;
        TLeftBrace tleftbraceNode5;
        TElementIdentifier telementidentifierNode6;
        TElementOf telementofNode7;
        TSetIdentifier tsetidentifierNode8;
        TSuchAs tsuchasNode9;
        PElementExpression pelementexpressionNode10;
        TRightBrace trightbraceNode11;
        tletNode2 = (TLet)nodeArrayList1.get(0);
        tsetidentifierNode3 = (TSetIdentifier)nodeArrayList2.get(0);
        tequaltoNode4 = (TEqualTo)nodeArrayList3.get(0);
        tleftbraceNode5 = (TLeftBrace)nodeArrayList4.get(0);
        telementidentifierNode6 = (TElementIdentifier)nodeArrayList5.get(0);
        telementofNode7 = (TElementOf)nodeArrayList6.get(0);
        tsetidentifierNode8 = (TSetIdentifier)nodeArrayList7.get(0);
        tsuchasNode9 = (TSuchAs)nodeArrayList8.get(0);
        pelementexpressionNode10 = (PElementExpression)nodeArrayList9.get(0);
        trightbraceNode11 = (TRightBrace)nodeArrayList10.get(0);

        pstatementinstructionNode1 = new ADefinitionStatementInstruction(tletNode2, tsetidentifierNode3, tequaltoNode4, tleftbraceNode5, telementidentifierNode6, telementofNode7, tsetidentifierNode8, tsuchasNode9, pelementexpressionNode10, trightbraceNode11);
        }
	nodeList.add(pstatementinstructionNode1);
        return nodeList;
    }



    @SuppressWarnings({ "unchecked", "rawtypes" })
    ArrayList<Object> new11() /* reduce AAaskinstructionlist1AskInstructionList */
    {
        @SuppressWarnings("hiding") ArrayList<Object> nodeList = new ArrayList<Object>();

        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList2 = pop();
        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList1 = pop();
        PAskInstructionList paskinstructionlistNode1;
        {
            // Block
        PAskInstruction paskinstructionNode2;
        LinkedList<Object> listNode3 = new LinkedList<Object>();
        TSemicolon tsemicolonNode4;
        paskinstructionNode2 = (PAskInstruction)nodeArrayList1.get(0);
        {
            // Block
        }
        tsemicolonNode4 = (TSemicolon)nodeArrayList2.get(0);

        paskinstructionlistNode1 = new AAskInstructionList(paskinstructionNode2, listNode3, tsemicolonNode4);
        }
	nodeList.add(paskinstructionlistNode1);
        return nodeList;
    }



    @SuppressWarnings({ "unchecked", "rawtypes" })
    ArrayList<Object> new12() /* reduce AAaskinstructionlist2AskInstructionList */
    {
        @SuppressWarnings("hiding") ArrayList<Object> nodeList = new ArrayList<Object>();

        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList3 = pop();
        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList2 = pop();
        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList1 = pop();
        PAskInstructionList paskinstructionlistNode1;
        {
            // Block
        PAskInstruction paskinstructionNode2;
        LinkedList<Object> listNode4 = new LinkedList<Object>();
        TSemicolon tsemicolonNode5;
        paskinstructionNode2 = (PAskInstruction)nodeArrayList1.get(0);
        {
            // Block
        LinkedList<Object> listNode3 = new LinkedList<Object>();
        listNode3 = (LinkedList)nodeArrayList2.get(0);
	if(listNode3 != null)
	{
	  listNode4.addAll(listNode3);
	}
        }
        tsemicolonNode5 = (TSemicolon)nodeArrayList3.get(0);

        paskinstructionlistNode1 = new AAskInstructionList(paskinstructionNode2, listNode4, tsemicolonNode5);
        }
	nodeList.add(paskinstructionlistNode1);
        return nodeList;
    }



    @SuppressWarnings({ "unchecked", "rawtypes" })
    ArrayList<Object> new13() /* reduce AAdditionalAskInstruction */
    {
        @SuppressWarnings("hiding") ArrayList<Object> nodeList = new ArrayList<Object>();

        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList2 = pop();
        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList1 = pop();
        PAdditionalAskInstruction padditionalaskinstructionNode1;
        {
            // Block
        TComma tcommaNode2;
        PAskInstruction paskinstructionNode3;
        tcommaNode2 = (TComma)nodeArrayList1.get(0);
        paskinstructionNode3 = (PAskInstruction)nodeArrayList2.get(0);

        padditionalaskinstructionNode1 = new AAdditionalAskInstruction(tcommaNode2, paskinstructionNode3);
        }
	nodeList.add(padditionalaskinstructionNode1);
        return nodeList;
    }



    @SuppressWarnings({ "unchecked", "rawtypes" })
    ArrayList<Object> new14() /* reduce AAskInstruction */
    {
        @SuppressWarnings("hiding") ArrayList<Object> nodeList = new ArrayList<Object>();

        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList4 = pop();
        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList3 = pop();
        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList2 = pop();
        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList1 = pop();
        PAskInstruction paskinstructionNode1;
        {
            // Block
        TTagNumber ttagnumberNode2;
        TColumn tcolumnNode3;
        TShow tshowNode4;
        PSetExpression psetexpressionNode5;
        ttagnumberNode2 = (TTagNumber)nodeArrayList1.get(0);
        tcolumnNode3 = (TColumn)nodeArrayList2.get(0);
        tshowNode4 = (TShow)nodeArrayList3.get(0);
        psetexpressionNode5 = (PSetExpression)nodeArrayList4.get(0);

        paskinstructionNode1 = new AAskInstruction(ttagnumberNode2, tcolumnNode3, tshowNode4, psetexpressionNode5);
        }
	nodeList.add(paskinstructionNode1);
        return nodeList;
    }



    @SuppressWarnings({ "unchecked", "rawtypes" })
    ArrayList<Object> new15() /* reduce AAproofinstructionlist1ProofInstructionList */
    {
        @SuppressWarnings("hiding") ArrayList<Object> nodeList = new ArrayList<Object>();

        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList1 = pop();
        PProofInstructionList pproofinstructionlistNode1;
        {
            // Block
        PProofInstruction pproofinstructionNode2;
        LinkedList<Object> listNode3 = new LinkedList<Object>();
        pproofinstructionNode2 = (PProofInstruction)nodeArrayList1.get(0);
        {
            // Block
        }

        pproofinstructionlistNode1 = new AProofInstructionList(pproofinstructionNode2, listNode3);
        }
	nodeList.add(pproofinstructionlistNode1);
        return nodeList;
    }



    @SuppressWarnings({ "unchecked", "rawtypes" })
    ArrayList<Object> new16() /* reduce AAproofinstructionlist2ProofInstructionList */
    {
        @SuppressWarnings("hiding") ArrayList<Object> nodeList = new ArrayList<Object>();

        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList2 = pop();
        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList1 = pop();
        PProofInstructionList pproofinstructionlistNode1;
        {
            // Block
        PProofInstruction pproofinstructionNode2;
        LinkedList<Object> listNode4 = new LinkedList<Object>();
        pproofinstructionNode2 = (PProofInstruction)nodeArrayList1.get(0);
        {
            // Block
        LinkedList<Object> listNode3 = new LinkedList<Object>();
        listNode3 = (LinkedList)nodeArrayList2.get(0);
	if(listNode3 != null)
	{
	  listNode4.addAll(listNode3);
	}
        }

        pproofinstructionlistNode1 = new AProofInstructionList(pproofinstructionNode2, listNode4);
        }
	nodeList.add(pproofinstructionlistNode1);
        return nodeList;
    }



    @SuppressWarnings({ "unchecked", "rawtypes" })
    ArrayList<Object> new17() /* reduce AAdditionalProofInstruction */
    {
        @SuppressWarnings("hiding") ArrayList<Object> nodeList = new ArrayList<Object>();

        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList1 = pop();
        PAdditionalProofInstruction padditionalproofinstructionNode1;
        {
            // Block
        PProofInstruction pproofinstructionNode2;
        pproofinstructionNode2 = (PProofInstruction)nodeArrayList1.get(0);

        padditionalproofinstructionNode1 = new AAdditionalProofInstruction(pproofinstructionNode2);
        }
	nodeList.add(padditionalproofinstructionNode1);
        return nodeList;
    }



    @SuppressWarnings({ "unchecked", "rawtypes" })
    ArrayList<Object> new18() /* reduce AProofInstruction */
    {
        @SuppressWarnings("hiding") ArrayList<Object> nodeList = new ArrayList<Object>();

        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList5 = pop();
        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList4 = pop();
        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList3 = pop();
        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList2 = pop();
        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList1 = pop();
        PProofInstruction pproofinstructionNode1;
        {
            // Block
        TTagNumber ttagnumberNode2;
        TColumn tcolumnNode3;
        PDemonstration pdemonstrationNode4;
        TDone tdoneNode5;
        TSemicolon tsemicolonNode6;
        ttagnumberNode2 = (TTagNumber)nodeArrayList1.get(0);
        tcolumnNode3 = (TColumn)nodeArrayList2.get(0);
        pdemonstrationNode4 = (PDemonstration)nodeArrayList3.get(0);
        tdoneNode5 = (TDone)nodeArrayList4.get(0);
        tsemicolonNode6 = (TSemicolon)nodeArrayList5.get(0);

        pproofinstructionNode1 = new AProofInstruction(ttagnumberNode2, tcolumnNode3, pdemonstrationNode4, tdoneNode5, tsemicolonNode6);
        }
	nodeList.add(pproofinstructionNode1);
        return nodeList;
    }



    @SuppressWarnings({ "unchecked", "rawtypes" })
    ArrayList<Object> new19() /* reduce ADemonstration */
    {
        @SuppressWarnings("hiding") ArrayList<Object> nodeList = new ArrayList<Object>();

        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList1 = pop();
        PDemonstration pdemonstrationNode1;
        {
            // Block
        LinkedList<Object> listNode3 = new LinkedList<Object>();
        {
            // Block
        LinkedList<Object> listNode2 = new LinkedList<Object>();
        listNode2 = (LinkedList)nodeArrayList1.get(0);
	if(listNode2 != null)
	{
	  listNode3.addAll(listNode2);
	}
        }

        pdemonstrationNode1 = new ADemonstration(listNode3);
        }
	nodeList.add(pdemonstrationNode1);
        return nodeList;
    }



    @SuppressWarnings({ "unchecked", "rawtypes" })
    ArrayList<Object> new20() /* reduce AApropositionpropositionlist1PropositionList */
    {
        @SuppressWarnings("hiding") ArrayList<Object> nodeList = new ArrayList<Object>();

        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList2 = pop();
        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList1 = pop();
        PPropositionList ppropositionlistNode1;
        {
            // Block
        PProposition ppropositionNode2;
        LinkedList<Object> listNode3 = new LinkedList<Object>();
        TSemicolon tsemicolonNode4;
        ppropositionNode2 = (PProposition)nodeArrayList1.get(0);
        {
            // Block
        }
        tsemicolonNode4 = (TSemicolon)nodeArrayList2.get(0);

        ppropositionlistNode1 = new APropositionPropositionList(ppropositionNode2, listNode3, tsemicolonNode4);
        }
	nodeList.add(ppropositionlistNode1);
        return nodeList;
    }



    @SuppressWarnings({ "unchecked", "rawtypes" })
    ArrayList<Object> new21() /* reduce AApropositionpropositionlist2PropositionList */
    {
        @SuppressWarnings("hiding") ArrayList<Object> nodeList = new ArrayList<Object>();

        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList3 = pop();
        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList2 = pop();
        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList1 = pop();
        PPropositionList ppropositionlistNode1;
        {
            // Block
        PProposition ppropositionNode2;
        LinkedList<Object> listNode4 = new LinkedList<Object>();
        TSemicolon tsemicolonNode5;
        ppropositionNode2 = (PProposition)nodeArrayList1.get(0);
        {
            // Block
        LinkedList<Object> listNode3 = new LinkedList<Object>();
        listNode3 = (LinkedList)nodeArrayList2.get(0);
	if(listNode3 != null)
	{
	  listNode4.addAll(listNode3);
	}
        }
        tsemicolonNode5 = (TSemicolon)nodeArrayList3.get(0);

        ppropositionlistNode1 = new APropositionPropositionList(ppropositionNode2, listNode4, tsemicolonNode5);
        }
	nodeList.add(ppropositionlistNode1);
        return nodeList;
    }



    @SuppressWarnings({ "unchecked", "rawtypes" })
    ArrayList<Object> new22() /* reduce AConclusionPropositionList */
    {
        @SuppressWarnings("hiding") ArrayList<Object> nodeList = new ArrayList<Object>();

        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList3 = pop();
        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList2 = pop();
        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList1 = pop();
        PPropositionList ppropositionlistNode1;
        {
            // Block
        TThus tthusNode2;
        PExpression pexpressionNode3;
        TSemicolon tsemicolonNode4;
        tthusNode2 = (TThus)nodeArrayList1.get(0);
        pexpressionNode3 = (PExpression)nodeArrayList2.get(0);
        tsemicolonNode4 = (TSemicolon)nodeArrayList3.get(0);

        ppropositionlistNode1 = new AConclusionPropositionList(tthusNode2, pexpressionNode3, tsemicolonNode4);
        }
	nodeList.add(ppropositionlistNode1);
        return nodeList;
    }



    @SuppressWarnings({ "unchecked", "rawtypes" })
    ArrayList<Object> new23() /* reduce AImplicationAdditionalProposition */
    {
        @SuppressWarnings("hiding") ArrayList<Object> nodeList = new ArrayList<Object>();

        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList2 = pop();
        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList1 = pop();
        PAdditionalProposition padditionalpropositionNode1;
        {
            // Block
        TImplicationSign timplicationsignNode2;
        PProposition ppropositionNode3;
        timplicationsignNode2 = (TImplicationSign)nodeArrayList1.get(0);
        ppropositionNode3 = (PProposition)nodeArrayList2.get(0);

        padditionalpropositionNode1 = new AImplicationAdditionalProposition(timplicationsignNode2, ppropositionNode3);
        }
	nodeList.add(padditionalpropositionNode1);
        return nodeList;
    }



    @SuppressWarnings({ "unchecked", "rawtypes" })
    ArrayList<Object> new24() /* reduce AEquivalenceAdditionalProposition */
    {
        @SuppressWarnings("hiding") ArrayList<Object> nodeList = new ArrayList<Object>();

        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList2 = pop();
        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList1 = pop();
        PAdditionalProposition padditionalpropositionNode1;
        {
            // Block
        TEquivalenceSign tequivalencesignNode2;
        PProposition ppropositionNode3;
        tequivalencesignNode2 = (TEquivalenceSign)nodeArrayList1.get(0);
        ppropositionNode3 = (PProposition)nodeArrayList2.get(0);

        padditionalpropositionNode1 = new AEquivalenceAdditionalProposition(tequivalencesignNode2, ppropositionNode3);
        }
	nodeList.add(padditionalpropositionNode1);
        return nodeList;
    }



    @SuppressWarnings({ "unchecked", "rawtypes" })
    ArrayList<Object> new25() /* reduce AExpressionProposition */
    {
        @SuppressWarnings("hiding") ArrayList<Object> nodeList = new ArrayList<Object>();

        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList1 = pop();
        PProposition ppropositionNode1;
        {
            // Block
        PExpression pexpressionNode2;
        pexpressionNode2 = (PExpression)nodeArrayList1.get(0);

        ppropositionNode1 = new AExpressionProposition(pexpressionNode2);
        }
	nodeList.add(ppropositionNode1);
        return nodeList;
    }



    @SuppressWarnings({ "unchecked", "rawtypes" })
    ArrayList<Object> new26() /* reduce AForAllProposition */
    {
        @SuppressWarnings("hiding") ArrayList<Object> nodeList = new ArrayList<Object>();

        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList6 = pop();
        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList5 = pop();
        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList4 = pop();
        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList3 = pop();
        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList2 = pop();
        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList1 = pop();
        PProposition ppropositionNode1;
        {
            // Block
        TForAll tforallNode2;
        TElementIdentifier telementidentifierNode3;
        TElementOf telementofNode4;
        PSetExpression psetexpressionNode5;
        TComma tcommaNode6;
        PExpression pexpressionNode7;
        tforallNode2 = (TForAll)nodeArrayList1.get(0);
        telementidentifierNode3 = (TElementIdentifier)nodeArrayList2.get(0);
        telementofNode4 = (TElementOf)nodeArrayList3.get(0);
        psetexpressionNode5 = (PSetExpression)nodeArrayList4.get(0);
        tcommaNode6 = (TComma)nodeArrayList5.get(0);
        pexpressionNode7 = (PExpression)nodeArrayList6.get(0);

        ppropositionNode1 = new AForAllProposition(tforallNode2, telementidentifierNode3, telementofNode4, psetexpressionNode5, tcommaNode6, pexpressionNode7);
        }
	nodeList.add(ppropositionNode1);
        return nodeList;
    }



    @SuppressWarnings({ "unchecked", "rawtypes" })
    ArrayList<Object> new27() /* reduce AExistProposition */
    {
        @SuppressWarnings("hiding") ArrayList<Object> nodeList = new ArrayList<Object>();

        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList6 = pop();
        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList5 = pop();
        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList4 = pop();
        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList3 = pop();
        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList2 = pop();
        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList1 = pop();
        PProposition ppropositionNode1;
        {
            // Block
        TExist texistNode2;
        TElementIdentifier telementidentifierNode3;
        TElementOf telementofNode4;
        PSetExpression psetexpressionNode5;
        TComma tcommaNode6;
        PExpression pexpressionNode7;
        texistNode2 = (TExist)nodeArrayList1.get(0);
        telementidentifierNode3 = (TElementIdentifier)nodeArrayList2.get(0);
        telementofNode4 = (TElementOf)nodeArrayList3.get(0);
        psetexpressionNode5 = (PSetExpression)nodeArrayList4.get(0);
        tcommaNode6 = (TComma)nodeArrayList5.get(0);
        pexpressionNode7 = (PExpression)nodeArrayList6.get(0);

        ppropositionNode1 = new AExistProposition(texistNode2, telementidentifierNode3, telementofNode4, psetexpressionNode5, tcommaNode6, pexpressionNode7);
        }
	nodeList.add(ppropositionNode1);
        return nodeList;
    }



    @SuppressWarnings({ "unchecked", "rawtypes" })
    ArrayList<Object> new28() /* reduce AExpression */
    {
        @SuppressWarnings("hiding") ArrayList<Object> nodeList = new ArrayList<Object>();

        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList1 = pop();
        PExpression pexpressionNode1;
        {
            // Block
        PAndExpression pandexpressionNode2;
        pandexpressionNode2 = (PAndExpression)nodeArrayList1.get(0);

        pexpressionNode1 = new AExpression(pandexpressionNode2);
        }
	nodeList.add(pexpressionNode1);
        return nodeList;
    }



    @SuppressWarnings({ "unchecked", "rawtypes" })
    ArrayList<Object> new29() /* reduce ALogicalOrAndExpression */
    {
        @SuppressWarnings("hiding") ArrayList<Object> nodeList = new ArrayList<Object>();

        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList1 = pop();
        PAndExpression pandexpressionNode1;
        {
            // Block
        POrExpression porexpressionNode2;
        porexpressionNode2 = (POrExpression)nodeArrayList1.get(0);

        pandexpressionNode1 = new ALogicalOrAndExpression(porexpressionNode2);
        }
	nodeList.add(pandexpressionNode1);
        return nodeList;
    }



    @SuppressWarnings({ "unchecked", "rawtypes" })
    ArrayList<Object> new30() /* reduce ALogicalAndAndExpression */
    {
        @SuppressWarnings("hiding") ArrayList<Object> nodeList = new ArrayList<Object>();

        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList3 = pop();
        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList2 = pop();
        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList1 = pop();
        PAndExpression pandexpressionNode1;
        {
            // Block
        PAndExpression pandexpressionNode2;
        TLogicalAnd tlogicalandNode3;
        POrExpression porexpressionNode4;
        pandexpressionNode2 = (PAndExpression)nodeArrayList1.get(0);
        tlogicalandNode3 = (TLogicalAnd)nodeArrayList2.get(0);
        porexpressionNode4 = (POrExpression)nodeArrayList3.get(0);

        pandexpressionNode1 = new ALogicalAndAndExpression(pandexpressionNode2, tlogicalandNode3, porexpressionNode4);
        }
	nodeList.add(pandexpressionNode1);
        return nodeList;
    }



    @SuppressWarnings({ "unchecked", "rawtypes" })
    ArrayList<Object> new31() /* reduce AExpressionOrExpression */
    {
        @SuppressWarnings("hiding") ArrayList<Object> nodeList = new ArrayList<Object>();

        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList1 = pop();
        POrExpression porexpressionNode1;
        {
            // Block
        PSimpleExpression psimpleexpressionNode2;
        psimpleexpressionNode2 = (PSimpleExpression)nodeArrayList1.get(0);

        porexpressionNode1 = new AExpressionOrExpression(psimpleexpressionNode2);
        }
	nodeList.add(porexpressionNode1);
        return nodeList;
    }



    @SuppressWarnings({ "unchecked", "rawtypes" })
    ArrayList<Object> new32() /* reduce ALogicalOrOrExpression */
    {
        @SuppressWarnings("hiding") ArrayList<Object> nodeList = new ArrayList<Object>();

        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList3 = pop();
        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList2 = pop();
        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList1 = pop();
        POrExpression porexpressionNode1;
        {
            // Block
        POrExpression porexpressionNode2;
        TLogicalOr tlogicalorNode3;
        PSimpleExpression psimpleexpressionNode4;
        porexpressionNode2 = (POrExpression)nodeArrayList1.get(0);
        tlogicalorNode3 = (TLogicalOr)nodeArrayList2.get(0);
        psimpleexpressionNode4 = (PSimpleExpression)nodeArrayList3.get(0);

        porexpressionNode1 = new ALogicalOrOrExpression(porexpressionNode2, tlogicalorNode3, psimpleexpressionNode4);
        }
	nodeList.add(porexpressionNode1);
        return nodeList;
    }



    @SuppressWarnings({ "unchecked", "rawtypes" })
    ArrayList<Object> new33() /* reduce AExpressionSimpleExpression */
    {
        @SuppressWarnings("hiding") ArrayList<Object> nodeList = new ArrayList<Object>();

        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList3 = pop();
        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList2 = pop();
        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList1 = pop();
        PSimpleExpression psimpleexpressionNode1;
        {
            // Block
        PElementExpression pelementexpressionNode2;
        TElementOf telementofNode3;
        PSetExpression psetexpressionNode4;
        pelementexpressionNode2 = (PElementExpression)nodeArrayList1.get(0);
        telementofNode3 = (TElementOf)nodeArrayList2.get(0);
        psetexpressionNode4 = (PSetExpression)nodeArrayList3.get(0);

        psimpleexpressionNode1 = new AExpressionSimpleExpression(pelementexpressionNode2, telementofNode3, psetexpressionNode4);
        }
	nodeList.add(psimpleexpressionNode1);
        return nodeList;
    }



    @SuppressWarnings({ "unchecked", "rawtypes" })
    ArrayList<Object> new34() /* reduce ASetExpressionSimpleExpression */
    {
        @SuppressWarnings("hiding") ArrayList<Object> nodeList = new ArrayList<Object>();

        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList1 = pop();
        PSimpleExpression psimpleexpressionNode1;
        {
            // Block
        PSetExpression psetexpressionNode2;
        psetexpressionNode2 = (PSetExpression)nodeArrayList1.get(0);

        psimpleexpressionNode1 = new ASetExpressionSimpleExpression(psetexpressionNode2);
        }
	nodeList.add(psimpleexpressionNode1);
        return nodeList;
    }



    @SuppressWarnings({ "unchecked", "rawtypes" })
    ArrayList<Object> new35() /* reduce AElementExpressionSimpleExpression */
    {
        @SuppressWarnings("hiding") ArrayList<Object> nodeList = new ArrayList<Object>();

        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList1 = pop();
        PSimpleExpression psimpleexpressionNode1;
        {
            // Block
        PElementExpression pelementexpressionNode2;
        pelementexpressionNode2 = (PElementExpression)nodeArrayList1.get(0);

        psimpleexpressionNode1 = new AElementExpressionSimpleExpression(pelementexpressionNode2);
        }
	nodeList.add(psimpleexpressionNode1);
        return nodeList;
    }



    @SuppressWarnings({ "unchecked", "rawtypes" })
    ArrayList<Object> new36() /* reduce AComparisonSetExpression */
    {
        @SuppressWarnings("hiding") ArrayList<Object> nodeList = new ArrayList<Object>();

        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList1 = pop();
        PSetExpression psetexpressionNode1;
        {
            // Block
        PSetComparison psetcomparisonNode2;
        psetcomparisonNode2 = (PSetComparison)nodeArrayList1.get(0);

        psetexpressionNode1 = new AComparisonSetExpression(psetcomparisonNode2);
        }
	nodeList.add(psetexpressionNode1);
        return nodeList;
    }



    @SuppressWarnings({ "unchecked", "rawtypes" })
    ArrayList<Object> new37() /* reduce AArithmeticSetComparison */
    {
        @SuppressWarnings("hiding") ArrayList<Object> nodeList = new ArrayList<Object>();

        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList1 = pop();
        PSetComparison psetcomparisonNode1;
        {
            // Block
        PSetArithmetic psetarithmeticNode2;
        psetarithmeticNode2 = (PSetArithmetic)nodeArrayList1.get(0);

        psetcomparisonNode1 = new AArithmeticSetComparison(psetarithmeticNode2);
        }
	nodeList.add(psetcomparisonNode1);
        return nodeList;
    }



    @SuppressWarnings({ "unchecked", "rawtypes" })
    ArrayList<Object> new38() /* reduce AEqualToSetComparison */
    {
        @SuppressWarnings("hiding") ArrayList<Object> nodeList = new ArrayList<Object>();

        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList3 = pop();
        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList2 = pop();
        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList1 = pop();
        PSetComparison psetcomparisonNode1;
        {
            // Block
        PSetComparison psetcomparisonNode2;
        TEqualTo tequaltoNode3;
        PSetArithmetic psetarithmeticNode4;
        psetcomparisonNode2 = (PSetComparison)nodeArrayList1.get(0);
        tequaltoNode3 = (TEqualTo)nodeArrayList2.get(0);
        psetarithmeticNode4 = (PSetArithmetic)nodeArrayList3.get(0);

        psetcomparisonNode1 = new AEqualToSetComparison(psetcomparisonNode2, tequaltoNode3, psetarithmeticNode4);
        }
	nodeList.add(psetcomparisonNode1);
        return nodeList;
    }



    @SuppressWarnings({ "unchecked", "rawtypes" })
    ArrayList<Object> new39() /* reduce ANotEqualToSetComparison */
    {
        @SuppressWarnings("hiding") ArrayList<Object> nodeList = new ArrayList<Object>();

        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList3 = pop();
        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList2 = pop();
        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList1 = pop();
        PSetComparison psetcomparisonNode1;
        {
            // Block
        PSetComparison psetcomparisonNode2;
        TNotEqualTo tnotequaltoNode3;
        PSetArithmetic psetarithmeticNode4;
        psetcomparisonNode2 = (PSetComparison)nodeArrayList1.get(0);
        tnotequaltoNode3 = (TNotEqualTo)nodeArrayList2.get(0);
        psetarithmeticNode4 = (PSetArithmetic)nodeArrayList3.get(0);

        psetcomparisonNode1 = new ANotEqualToSetComparison(psetcomparisonNode2, tnotequaltoNode3, psetarithmeticNode4);
        }
	nodeList.add(psetcomparisonNode1);
        return nodeList;
    }



    @SuppressWarnings({ "unchecked", "rawtypes" })
    ArrayList<Object> new40() /* reduce ASubsetOfSetComparison */
    {
        @SuppressWarnings("hiding") ArrayList<Object> nodeList = new ArrayList<Object>();

        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList3 = pop();
        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList2 = pop();
        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList1 = pop();
        PSetComparison psetcomparisonNode1;
        {
            // Block
        PSetComparison psetcomparisonNode2;
        TSubsetOf tsubsetofNode3;
        PSetArithmetic psetarithmeticNode4;
        psetcomparisonNode2 = (PSetComparison)nodeArrayList1.get(0);
        tsubsetofNode3 = (TSubsetOf)nodeArrayList2.get(0);
        psetarithmeticNode4 = (PSetArithmetic)nodeArrayList3.get(0);

        psetcomparisonNode1 = new ASubsetOfSetComparison(psetcomparisonNode2, tsubsetofNode3, psetarithmeticNode4);
        }
	nodeList.add(psetcomparisonNode1);
        return nodeList;
    }



    @SuppressWarnings({ "unchecked", "rawtypes" })
    ArrayList<Object> new41() /* reduce ANotASubsetOfSetComparison */
    {
        @SuppressWarnings("hiding") ArrayList<Object> nodeList = new ArrayList<Object>();

        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList3 = pop();
        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList2 = pop();
        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList1 = pop();
        PSetComparison psetcomparisonNode1;
        {
            // Block
        PSetComparison psetcomparisonNode2;
        TNotASubsetOf tnotasubsetofNode3;
        PSetArithmetic psetarithmeticNode4;
        psetcomparisonNode2 = (PSetComparison)nodeArrayList1.get(0);
        tnotasubsetofNode3 = (TNotASubsetOf)nodeArrayList2.get(0);
        psetarithmeticNode4 = (PSetArithmetic)nodeArrayList3.get(0);

        psetcomparisonNode1 = new ANotASubsetOfSetComparison(psetcomparisonNode2, tnotasubsetofNode3, psetarithmeticNode4);
        }
	nodeList.add(psetcomparisonNode1);
        return nodeList;
    }



    @SuppressWarnings({ "unchecked", "rawtypes" })
    ArrayList<Object> new42() /* reduce ASupersetOfSetComparison */
    {
        @SuppressWarnings("hiding") ArrayList<Object> nodeList = new ArrayList<Object>();

        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList3 = pop();
        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList2 = pop();
        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList1 = pop();
        PSetComparison psetcomparisonNode1;
        {
            // Block
        PSetComparison psetcomparisonNode2;
        TSupersetOf tsupersetofNode3;
        PSetArithmetic psetarithmeticNode4;
        psetcomparisonNode2 = (PSetComparison)nodeArrayList1.get(0);
        tsupersetofNode3 = (TSupersetOf)nodeArrayList2.get(0);
        psetarithmeticNode4 = (PSetArithmetic)nodeArrayList3.get(0);

        psetcomparisonNode1 = new ASupersetOfSetComparison(psetcomparisonNode2, tsupersetofNode3, psetarithmeticNode4);
        }
	nodeList.add(psetcomparisonNode1);
        return nodeList;
    }



    @SuppressWarnings({ "unchecked", "rawtypes" })
    ArrayList<Object> new43() /* reduce ANotASupersetOfSetComparison */
    {
        @SuppressWarnings("hiding") ArrayList<Object> nodeList = new ArrayList<Object>();

        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList3 = pop();
        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList2 = pop();
        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList1 = pop();
        PSetComparison psetcomparisonNode1;
        {
            // Block
        PSetComparison psetcomparisonNode2;
        TNotASupersetOf tnotasupersetofNode3;
        PSetArithmetic psetarithmeticNode4;
        psetcomparisonNode2 = (PSetComparison)nodeArrayList1.get(0);
        tnotasupersetofNode3 = (TNotASupersetOf)nodeArrayList2.get(0);
        psetarithmeticNode4 = (PSetArithmetic)nodeArrayList3.get(0);

        psetcomparisonNode1 = new ANotASupersetOfSetComparison(psetcomparisonNode2, tnotasupersetofNode3, psetarithmeticNode4);
        }
	nodeList.add(psetcomparisonNode1);
        return nodeList;
    }



    @SuppressWarnings({ "unchecked", "rawtypes" })
    ArrayList<Object> new44() /* reduce AFactorSetArithmetic */
    {
        @SuppressWarnings("hiding") ArrayList<Object> nodeList = new ArrayList<Object>();

        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList1 = pop();
        PSetArithmetic psetarithmeticNode1;
        {
            // Block
        PSetFactor psetfactorNode2;
        psetfactorNode2 = (PSetFactor)nodeArrayList1.get(0);

        psetarithmeticNode1 = new AFactorSetArithmetic(psetfactorNode2);
        }
	nodeList.add(psetarithmeticNode1);
        return nodeList;
    }



    @SuppressWarnings({ "unchecked", "rawtypes" })
    ArrayList<Object> new45() /* reduce APlusSetArithmetic */
    {
        @SuppressWarnings("hiding") ArrayList<Object> nodeList = new ArrayList<Object>();

        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList3 = pop();
        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList2 = pop();
        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList1 = pop();
        PSetArithmetic psetarithmeticNode1;
        {
            // Block
        PSetArithmetic psetarithmeticNode2;
        TPlus tplusNode3;
        PSetFactor psetfactorNode4;
        psetarithmeticNode2 = (PSetArithmetic)nodeArrayList1.get(0);
        tplusNode3 = (TPlus)nodeArrayList2.get(0);
        psetfactorNode4 = (PSetFactor)nodeArrayList3.get(0);

        psetarithmeticNode1 = new APlusSetArithmetic(psetarithmeticNode2, tplusNode3, psetfactorNode4);
        }
	nodeList.add(psetarithmeticNode1);
        return nodeList;
    }



    @SuppressWarnings({ "unchecked", "rawtypes" })
    ArrayList<Object> new46() /* reduce ADeprivedOfSetArithmetic */
    {
        @SuppressWarnings("hiding") ArrayList<Object> nodeList = new ArrayList<Object>();

        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList3 = pop();
        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList2 = pop();
        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList1 = pop();
        PSetArithmetic psetarithmeticNode1;
        {
            // Block
        PSetArithmetic psetarithmeticNode2;
        TDeprivedOf tdeprivedofNode3;
        PSetFactor psetfactorNode4;
        psetarithmeticNode2 = (PSetArithmetic)nodeArrayList1.get(0);
        tdeprivedofNode3 = (TDeprivedOf)nodeArrayList2.get(0);
        psetfactorNode4 = (PSetFactor)nodeArrayList3.get(0);

        psetarithmeticNode1 = new ADeprivedOfSetArithmetic(psetarithmeticNode2, tdeprivedofNode3, psetfactorNode4);
        }
	nodeList.add(psetarithmeticNode1);
        return nodeList;
    }



    @SuppressWarnings({ "unchecked", "rawtypes" })
    ArrayList<Object> new47() /* reduce AUnionSetArithmetic */
    {
        @SuppressWarnings("hiding") ArrayList<Object> nodeList = new ArrayList<Object>();

        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList3 = pop();
        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList2 = pop();
        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList1 = pop();
        PSetArithmetic psetarithmeticNode1;
        {
            // Block
        PSetArithmetic psetarithmeticNode2;
        TUnion tunionNode3;
        PSetFactor psetfactorNode4;
        psetarithmeticNode2 = (PSetArithmetic)nodeArrayList1.get(0);
        tunionNode3 = (TUnion)nodeArrayList2.get(0);
        psetfactorNode4 = (PSetFactor)nodeArrayList3.get(0);

        psetarithmeticNode1 = new AUnionSetArithmetic(psetarithmeticNode2, tunionNode3, psetfactorNode4);
        }
	nodeList.add(psetarithmeticNode1);
        return nodeList;
    }



    @SuppressWarnings({ "unchecked", "rawtypes" })
    ArrayList<Object> new48() /* reduce AIntersectionSetArithmetic */
    {
        @SuppressWarnings("hiding") ArrayList<Object> nodeList = new ArrayList<Object>();

        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList3 = pop();
        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList2 = pop();
        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList1 = pop();
        PSetArithmetic psetarithmeticNode1;
        {
            // Block
        PSetArithmetic psetarithmeticNode2;
        TIntersection tintersectionNode3;
        PSetFactor psetfactorNode4;
        psetarithmeticNode2 = (PSetArithmetic)nodeArrayList1.get(0);
        tintersectionNode3 = (TIntersection)nodeArrayList2.get(0);
        psetfactorNode4 = (PSetFactor)nodeArrayList3.get(0);

        psetarithmeticNode1 = new AIntersectionSetArithmetic(psetarithmeticNode2, tintersectionNode3, psetfactorNode4);
        }
	nodeList.add(psetarithmeticNode1);
        return nodeList;
    }



    @SuppressWarnings({ "unchecked", "rawtypes" })
    ArrayList<Object> new49() /* reduce ATermSetFactor */
    {
        @SuppressWarnings("hiding") ArrayList<Object> nodeList = new ArrayList<Object>();

        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList1 = pop();
        PSetFactor psetfactorNode1;
        {
            // Block
        PSetExponent psetexponentNode2;
        psetexponentNode2 = (PSetExponent)nodeArrayList1.get(0);

        psetfactorNode1 = new ATermSetFactor(psetexponentNode2);
        }
	nodeList.add(psetfactorNode1);
        return nodeList;
    }



    @SuppressWarnings({ "unchecked", "rawtypes" })
    ArrayList<Object> new50() /* reduce AMultSetFactor */
    {
        @SuppressWarnings("hiding") ArrayList<Object> nodeList = new ArrayList<Object>();

        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList3 = pop();
        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList2 = pop();
        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList1 = pop();
        PSetFactor psetfactorNode1;
        {
            // Block
        PSetFactor psetfactorNode2;
        TMultiplication tmultiplicationNode3;
        PSetExponent psetexponentNode4;
        psetfactorNode2 = (PSetFactor)nodeArrayList1.get(0);
        tmultiplicationNode3 = (TMultiplication)nodeArrayList2.get(0);
        psetexponentNode4 = (PSetExponent)nodeArrayList3.get(0);

        psetfactorNode1 = new AMultSetFactor(psetfactorNode2, tmultiplicationNode3, psetexponentNode4);
        }
	nodeList.add(psetfactorNode1);
        return nodeList;
    }



    @SuppressWarnings({ "unchecked", "rawtypes" })
    ArrayList<Object> new51() /* reduce ATermSetExponent */
    {
        @SuppressWarnings("hiding") ArrayList<Object> nodeList = new ArrayList<Object>();

        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList1 = pop();
        PSetExponent psetexponentNode1;
        {
            // Block
        PSetTerm psettermNode2;
        psettermNode2 = (PSetTerm)nodeArrayList1.get(0);

        psetexponentNode1 = new ATermSetExponent(psettermNode2);
        }
	nodeList.add(psetexponentNode1);
        return nodeList;
    }



    @SuppressWarnings({ "unchecked", "rawtypes" })
    ArrayList<Object> new52() /* reduce AExpSetExponent */
    {
        @SuppressWarnings("hiding") ArrayList<Object> nodeList = new ArrayList<Object>();

        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList3 = pop();
        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList2 = pop();
        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList1 = pop();
        PSetExponent psetexponentNode1;
        {
            // Block
        PSetExponent psetexponentNode2;
        TPower tpowerNode3;
        PSetTerm psettermNode4;
        psetexponentNode2 = (PSetExponent)nodeArrayList1.get(0);
        tpowerNode3 = (TPower)nodeArrayList2.get(0);
        psettermNode4 = (PSetTerm)nodeArrayList3.get(0);

        psetexponentNode1 = new AExpSetExponent(psetexponentNode2, tpowerNode3, psettermNode4);
        }
	nodeList.add(psetexponentNode1);
        return nodeList;
    }



    @SuppressWarnings({ "unchecked", "rawtypes" })
    ArrayList<Object> new53() /* reduce AIdentifierSetTerm */
    {
        @SuppressWarnings("hiding") ArrayList<Object> nodeList = new ArrayList<Object>();

        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList1 = pop();
        PSetTerm psettermNode1;
        {
            // Block
        TSetIdentifier tsetidentifierNode2;
        tsetidentifierNode2 = (TSetIdentifier)nodeArrayList1.get(0);

        psettermNode1 = new AIdentifierSetTerm(tsetidentifierNode2);
        }
	nodeList.add(psettermNode1);
        return nodeList;
    }



    @SuppressWarnings({ "unchecked", "rawtypes" })
    ArrayList<Object> new54() /* reduce AElementSetTerm */
    {
        @SuppressWarnings("hiding") ArrayList<Object> nodeList = new ArrayList<Object>();

        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList3 = pop();
        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList2 = pop();
        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList1 = pop();
        PSetTerm psettermNode1;
        {
            // Block
        TLeftBrace tleftbraceNode2;
        PElementTerm pelementtermNode3;
        TRightBrace trightbraceNode4;
        tleftbraceNode2 = (TLeftBrace)nodeArrayList1.get(0);
        pelementtermNode3 = (PElementTerm)nodeArrayList2.get(0);
        trightbraceNode4 = (TRightBrace)nodeArrayList3.get(0);

        psettermNode1 = new AElementSetTerm(tleftbraceNode2, pelementtermNode3, trightbraceNode4);
        }
	nodeList.add(psettermNode1);
        return nodeList;
    }



    @SuppressWarnings({ "unchecked", "rawtypes" })
    ArrayList<Object> new55() /* reduce AExpressionSetTerm */
    {
        @SuppressWarnings("hiding") ArrayList<Object> nodeList = new ArrayList<Object>();

        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList3 = pop();
        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList2 = pop();
        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList1 = pop();
        PSetTerm psettermNode1;
        {
            // Block
        TLeftParenthesis tleftparenthesisNode2;
        PSetExpression psetexpressionNode3;
        TRightParenthesis trightparenthesisNode4;
        tleftparenthesisNode2 = (TLeftParenthesis)nodeArrayList1.get(0);
        psetexpressionNode3 = (PSetExpression)nodeArrayList2.get(0);
        trightparenthesisNode4 = (TRightParenthesis)nodeArrayList3.get(0);

        psettermNode1 = new AExpressionSetTerm(tleftparenthesisNode2, psetexpressionNode3, trightparenthesisNode4);
        }
	nodeList.add(psettermNode1);
        return nodeList;
    }



    @SuppressWarnings({ "unchecked", "rawtypes" })
    ArrayList<Object> new56() /* reduce AComparisonElementExpression */
    {
        @SuppressWarnings("hiding") ArrayList<Object> nodeList = new ArrayList<Object>();

        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList1 = pop();
        PElementExpression pelementexpressionNode1;
        {
            // Block
        PElementComparison pelementcomparisonNode2;
        pelementcomparisonNode2 = (PElementComparison)nodeArrayList1.get(0);

        pelementexpressionNode1 = new AComparisonElementExpression(pelementcomparisonNode2);
        }
	nodeList.add(pelementexpressionNode1);
        return nodeList;
    }



    @SuppressWarnings({ "unchecked", "rawtypes" })
    ArrayList<Object> new57() /* reduce AArithmeticElementComparison */
    {
        @SuppressWarnings("hiding") ArrayList<Object> nodeList = new ArrayList<Object>();

        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList1 = pop();
        PElementComparison pelementcomparisonNode1;
        {
            // Block
        PElementArithmetic pelementarithmeticNode2;
        pelementarithmeticNode2 = (PElementArithmetic)nodeArrayList1.get(0);

        pelementcomparisonNode1 = new AArithmeticElementComparison(pelementarithmeticNode2);
        }
	nodeList.add(pelementcomparisonNode1);
        return nodeList;
    }



    @SuppressWarnings({ "unchecked", "rawtypes" })
    ArrayList<Object> new58() /* reduce AEqualToElementComparison */
    {
        @SuppressWarnings("hiding") ArrayList<Object> nodeList = new ArrayList<Object>();

        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList3 = pop();
        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList2 = pop();
        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList1 = pop();
        PElementComparison pelementcomparisonNode1;
        {
            // Block
        PElementComparison pelementcomparisonNode2;
        TEqualTo tequaltoNode3;
        PElementArithmetic pelementarithmeticNode4;
        pelementcomparisonNode2 = (PElementComparison)nodeArrayList1.get(0);
        tequaltoNode3 = (TEqualTo)nodeArrayList2.get(0);
        pelementarithmeticNode4 = (PElementArithmetic)nodeArrayList3.get(0);

        pelementcomparisonNode1 = new AEqualToElementComparison(pelementcomparisonNode2, tequaltoNode3, pelementarithmeticNode4);
        }
	nodeList.add(pelementcomparisonNode1);
        return nodeList;
    }



    @SuppressWarnings({ "unchecked", "rawtypes" })
    ArrayList<Object> new59() /* reduce ANotEqualToElementComparison */
    {
        @SuppressWarnings("hiding") ArrayList<Object> nodeList = new ArrayList<Object>();

        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList3 = pop();
        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList2 = pop();
        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList1 = pop();
        PElementComparison pelementcomparisonNode1;
        {
            // Block
        PElementComparison pelementcomparisonNode2;
        TNotEqualTo tnotequaltoNode3;
        PElementArithmetic pelementarithmeticNode4;
        pelementcomparisonNode2 = (PElementComparison)nodeArrayList1.get(0);
        tnotequaltoNode3 = (TNotEqualTo)nodeArrayList2.get(0);
        pelementarithmeticNode4 = (PElementArithmetic)nodeArrayList3.get(0);

        pelementcomparisonNode1 = new ANotEqualToElementComparison(pelementcomparisonNode2, tnotequaltoNode3, pelementarithmeticNode4);
        }
	nodeList.add(pelementcomparisonNode1);
        return nodeList;
    }



    @SuppressWarnings({ "unchecked", "rawtypes" })
    ArrayList<Object> new60() /* reduce AGreaterThanElementComparison */
    {
        @SuppressWarnings("hiding") ArrayList<Object> nodeList = new ArrayList<Object>();

        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList3 = pop();
        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList2 = pop();
        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList1 = pop();
        PElementComparison pelementcomparisonNode1;
        {
            // Block
        PElementComparison pelementcomparisonNode2;
        TGreaterThan tgreaterthanNode3;
        PElementArithmetic pelementarithmeticNode4;
        pelementcomparisonNode2 = (PElementComparison)nodeArrayList1.get(0);
        tgreaterthanNode3 = (TGreaterThan)nodeArrayList2.get(0);
        pelementarithmeticNode4 = (PElementArithmetic)nodeArrayList3.get(0);

        pelementcomparisonNode1 = new AGreaterThanElementComparison(pelementcomparisonNode2, tgreaterthanNode3, pelementarithmeticNode4);
        }
	nodeList.add(pelementcomparisonNode1);
        return nodeList;
    }



    @SuppressWarnings({ "unchecked", "rawtypes" })
    ArrayList<Object> new61() /* reduce ANotGreaterThanElementComparison */
    {
        @SuppressWarnings("hiding") ArrayList<Object> nodeList = new ArrayList<Object>();

        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList3 = pop();
        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList2 = pop();
        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList1 = pop();
        PElementComparison pelementcomparisonNode1;
        {
            // Block
        PElementComparison pelementcomparisonNode2;
        TNotGreaterThan tnotgreaterthanNode3;
        PElementArithmetic pelementarithmeticNode4;
        pelementcomparisonNode2 = (PElementComparison)nodeArrayList1.get(0);
        tnotgreaterthanNode3 = (TNotGreaterThan)nodeArrayList2.get(0);
        pelementarithmeticNode4 = (PElementArithmetic)nodeArrayList3.get(0);

        pelementcomparisonNode1 = new ANotGreaterThanElementComparison(pelementcomparisonNode2, tnotgreaterthanNode3, pelementarithmeticNode4);
        }
	nodeList.add(pelementcomparisonNode1);
        return nodeList;
    }



    @SuppressWarnings({ "unchecked", "rawtypes" })
    ArrayList<Object> new62() /* reduce ALessThanElementComparison */
    {
        @SuppressWarnings("hiding") ArrayList<Object> nodeList = new ArrayList<Object>();

        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList3 = pop();
        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList2 = pop();
        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList1 = pop();
        PElementComparison pelementcomparisonNode1;
        {
            // Block
        PElementComparison pelementcomparisonNode2;
        TLessThan tlessthanNode3;
        PElementArithmetic pelementarithmeticNode4;
        pelementcomparisonNode2 = (PElementComparison)nodeArrayList1.get(0);
        tlessthanNode3 = (TLessThan)nodeArrayList2.get(0);
        pelementarithmeticNode4 = (PElementArithmetic)nodeArrayList3.get(0);

        pelementcomparisonNode1 = new ALessThanElementComparison(pelementcomparisonNode2, tlessthanNode3, pelementarithmeticNode4);
        }
	nodeList.add(pelementcomparisonNode1);
        return nodeList;
    }



    @SuppressWarnings({ "unchecked", "rawtypes" })
    ArrayList<Object> new63() /* reduce ANotLessThanElementComparison */
    {
        @SuppressWarnings("hiding") ArrayList<Object> nodeList = new ArrayList<Object>();

        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList3 = pop();
        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList2 = pop();
        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList1 = pop();
        PElementComparison pelementcomparisonNode1;
        {
            // Block
        PElementComparison pelementcomparisonNode2;
        TNotLessThan tnotlessthanNode3;
        PElementArithmetic pelementarithmeticNode4;
        pelementcomparisonNode2 = (PElementComparison)nodeArrayList1.get(0);
        tnotlessthanNode3 = (TNotLessThan)nodeArrayList2.get(0);
        pelementarithmeticNode4 = (PElementArithmetic)nodeArrayList3.get(0);

        pelementcomparisonNode1 = new ANotLessThanElementComparison(pelementcomparisonNode2, tnotlessthanNode3, pelementarithmeticNode4);
        }
	nodeList.add(pelementcomparisonNode1);
        return nodeList;
    }



    @SuppressWarnings({ "unchecked", "rawtypes" })
    ArrayList<Object> new64() /* reduce AGreaterThanOrEqualToElementComparison */
    {
        @SuppressWarnings("hiding") ArrayList<Object> nodeList = new ArrayList<Object>();

        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList3 = pop();
        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList2 = pop();
        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList1 = pop();
        PElementComparison pelementcomparisonNode1;
        {
            // Block
        PElementComparison pelementcomparisonNode2;
        TGreaterThanOrEqualTo tgreaterthanorequaltoNode3;
        PElementArithmetic pelementarithmeticNode4;
        pelementcomparisonNode2 = (PElementComparison)nodeArrayList1.get(0);
        tgreaterthanorequaltoNode3 = (TGreaterThanOrEqualTo)nodeArrayList2.get(0);
        pelementarithmeticNode4 = (PElementArithmetic)nodeArrayList3.get(0);

        pelementcomparisonNode1 = new AGreaterThanOrEqualToElementComparison(pelementcomparisonNode2, tgreaterthanorequaltoNode3, pelementarithmeticNode4);
        }
	nodeList.add(pelementcomparisonNode1);
        return nodeList;
    }



    @SuppressWarnings({ "unchecked", "rawtypes" })
    ArrayList<Object> new65() /* reduce ANeitherGreaterThanNorEqualToElementComparison */
    {
        @SuppressWarnings("hiding") ArrayList<Object> nodeList = new ArrayList<Object>();

        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList3 = pop();
        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList2 = pop();
        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList1 = pop();
        PElementComparison pelementcomparisonNode1;
        {
            // Block
        PElementComparison pelementcomparisonNode2;
        TNeitherGreaterThanNorEqualTo tneithergreaterthannorequaltoNode3;
        PElementArithmetic pelementarithmeticNode4;
        pelementcomparisonNode2 = (PElementComparison)nodeArrayList1.get(0);
        tneithergreaterthannorequaltoNode3 = (TNeitherGreaterThanNorEqualTo)nodeArrayList2.get(0);
        pelementarithmeticNode4 = (PElementArithmetic)nodeArrayList3.get(0);

        pelementcomparisonNode1 = new ANeitherGreaterThanNorEqualToElementComparison(pelementcomparisonNode2, tneithergreaterthannorequaltoNode3, pelementarithmeticNode4);
        }
	nodeList.add(pelementcomparisonNode1);
        return nodeList;
    }



    @SuppressWarnings({ "unchecked", "rawtypes" })
    ArrayList<Object> new66() /* reduce ALessThanOrEqualToElementComparison */
    {
        @SuppressWarnings("hiding") ArrayList<Object> nodeList = new ArrayList<Object>();

        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList3 = pop();
        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList2 = pop();
        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList1 = pop();
        PElementComparison pelementcomparisonNode1;
        {
            // Block
        PElementComparison pelementcomparisonNode2;
        TLessThanOrEqualTo tlessthanorequaltoNode3;
        PElementArithmetic pelementarithmeticNode4;
        pelementcomparisonNode2 = (PElementComparison)nodeArrayList1.get(0);
        tlessthanorequaltoNode3 = (TLessThanOrEqualTo)nodeArrayList2.get(0);
        pelementarithmeticNode4 = (PElementArithmetic)nodeArrayList3.get(0);

        pelementcomparisonNode1 = new ALessThanOrEqualToElementComparison(pelementcomparisonNode2, tlessthanorequaltoNode3, pelementarithmeticNode4);
        }
	nodeList.add(pelementcomparisonNode1);
        return nodeList;
    }



    @SuppressWarnings({ "unchecked", "rawtypes" })
    ArrayList<Object> new67() /* reduce ANeitherLessThanNorEqualToElementComparison */
    {
        @SuppressWarnings("hiding") ArrayList<Object> nodeList = new ArrayList<Object>();

        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList3 = pop();
        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList2 = pop();
        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList1 = pop();
        PElementComparison pelementcomparisonNode1;
        {
            // Block
        PElementComparison pelementcomparisonNode2;
        TNeitherLessThanNorEqualTo tneitherlessthannorequaltoNode3;
        PElementArithmetic pelementarithmeticNode4;
        pelementcomparisonNode2 = (PElementComparison)nodeArrayList1.get(0);
        tneitherlessthannorequaltoNode3 = (TNeitherLessThanNorEqualTo)nodeArrayList2.get(0);
        pelementarithmeticNode4 = (PElementArithmetic)nodeArrayList3.get(0);

        pelementcomparisonNode1 = new ANeitherLessThanNorEqualToElementComparison(pelementcomparisonNode2, tneitherlessthannorequaltoNode3, pelementarithmeticNode4);
        }
	nodeList.add(pelementcomparisonNode1);
        return nodeList;
    }



    @SuppressWarnings({ "unchecked", "rawtypes" })
    ArrayList<Object> new68() /* reduce AFactorElementArithmetic */
    {
        @SuppressWarnings("hiding") ArrayList<Object> nodeList = new ArrayList<Object>();

        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList1 = pop();
        PElementArithmetic pelementarithmeticNode1;
        {
            // Block
        PElementFactor pelementfactorNode2;
        pelementfactorNode2 = (PElementFactor)nodeArrayList1.get(0);

        pelementarithmeticNode1 = new AFactorElementArithmetic(pelementfactorNode2);
        }
	nodeList.add(pelementarithmeticNode1);
        return nodeList;
    }



    @SuppressWarnings({ "unchecked", "rawtypes" })
    ArrayList<Object> new69() /* reduce APlusElementArithmetic */
    {
        @SuppressWarnings("hiding") ArrayList<Object> nodeList = new ArrayList<Object>();

        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList3 = pop();
        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList2 = pop();
        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList1 = pop();
        PElementArithmetic pelementarithmeticNode1;
        {
            // Block
        PElementArithmetic pelementarithmeticNode2;
        TPlus tplusNode3;
        PElementFactor pelementfactorNode4;
        pelementarithmeticNode2 = (PElementArithmetic)nodeArrayList1.get(0);
        tplusNode3 = (TPlus)nodeArrayList2.get(0);
        pelementfactorNode4 = (PElementFactor)nodeArrayList3.get(0);

        pelementarithmeticNode1 = new APlusElementArithmetic(pelementarithmeticNode2, tplusNode3, pelementfactorNode4);
        }
	nodeList.add(pelementarithmeticNode1);
        return nodeList;
    }



    @SuppressWarnings({ "unchecked", "rawtypes" })
    ArrayList<Object> new70() /* reduce AMinusElementArithmetic */
    {
        @SuppressWarnings("hiding") ArrayList<Object> nodeList = new ArrayList<Object>();

        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList3 = pop();
        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList2 = pop();
        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList1 = pop();
        PElementArithmetic pelementarithmeticNode1;
        {
            // Block
        PElementArithmetic pelementarithmeticNode2;
        TMinus tminusNode3;
        PElementFactor pelementfactorNode4;
        pelementarithmeticNode2 = (PElementArithmetic)nodeArrayList1.get(0);
        tminusNode3 = (TMinus)nodeArrayList2.get(0);
        pelementfactorNode4 = (PElementFactor)nodeArrayList3.get(0);

        pelementarithmeticNode1 = new AMinusElementArithmetic(pelementarithmeticNode2, tminusNode3, pelementfactorNode4);
        }
	nodeList.add(pelementarithmeticNode1);
        return nodeList;
    }



    @SuppressWarnings({ "unchecked", "rawtypes" })
    ArrayList<Object> new71() /* reduce ATermElementFactor */
    {
        @SuppressWarnings("hiding") ArrayList<Object> nodeList = new ArrayList<Object>();

        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList1 = pop();
        PElementFactor pelementfactorNode1;
        {
            // Block
        PElementTerm pelementtermNode2;
        pelementtermNode2 = (PElementTerm)nodeArrayList1.get(0);

        pelementfactorNode1 = new ATermElementFactor(pelementtermNode2);
        }
	nodeList.add(pelementfactorNode1);
        return nodeList;
    }



    @SuppressWarnings({ "unchecked", "rawtypes" })
    ArrayList<Object> new72() /* reduce AMultiplicationElementFactor */
    {
        @SuppressWarnings("hiding") ArrayList<Object> nodeList = new ArrayList<Object>();

        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList3 = pop();
        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList2 = pop();
        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList1 = pop();
        PElementFactor pelementfactorNode1;
        {
            // Block
        PElementFactor pelementfactorNode2;
        TMultiplication tmultiplicationNode3;
        PElementTerm pelementtermNode4;
        pelementfactorNode2 = (PElementFactor)nodeArrayList1.get(0);
        tmultiplicationNode3 = (TMultiplication)nodeArrayList2.get(0);
        pelementtermNode4 = (PElementTerm)nodeArrayList3.get(0);

        pelementfactorNode1 = new AMultiplicationElementFactor(pelementfactorNode2, tmultiplicationNode3, pelementtermNode4);
        }
	nodeList.add(pelementfactorNode1);
        return nodeList;
    }



    @SuppressWarnings({ "unchecked", "rawtypes" })
    ArrayList<Object> new73() /* reduce ADivisionElementFactor */
    {
        @SuppressWarnings("hiding") ArrayList<Object> nodeList = new ArrayList<Object>();

        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList3 = pop();
        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList2 = pop();
        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList1 = pop();
        PElementFactor pelementfactorNode1;
        {
            // Block
        PElementFactor pelementfactorNode2;
        TDivision tdivisionNode3;
        PElementTerm pelementtermNode4;
        pelementfactorNode2 = (PElementFactor)nodeArrayList1.get(0);
        tdivisionNode3 = (TDivision)nodeArrayList2.get(0);
        pelementtermNode4 = (PElementTerm)nodeArrayList3.get(0);

        pelementfactorNode1 = new ADivisionElementFactor(pelementfactorNode2, tdivisionNode3, pelementtermNode4);
        }
	nodeList.add(pelementfactorNode1);
        return nodeList;
    }



    @SuppressWarnings({ "unchecked", "rawtypes" })
    ArrayList<Object> new74() /* reduce AModuloElementFactor */
    {
        @SuppressWarnings("hiding") ArrayList<Object> nodeList = new ArrayList<Object>();

        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList3 = pop();
        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList2 = pop();
        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList1 = pop();
        PElementFactor pelementfactorNode1;
        {
            // Block
        PElementFactor pelementfactorNode2;
        TModulo tmoduloNode3;
        PElementTerm pelementtermNode4;
        pelementfactorNode2 = (PElementFactor)nodeArrayList1.get(0);
        tmoduloNode3 = (TModulo)nodeArrayList2.get(0);
        pelementtermNode4 = (PElementTerm)nodeArrayList3.get(0);

        pelementfactorNode1 = new AModuloElementFactor(pelementfactorNode2, tmoduloNode3, pelementtermNode4);
        }
	nodeList.add(pelementfactorNode1);
        return nodeList;
    }



    @SuppressWarnings({ "unchecked", "rawtypes" })
    ArrayList<Object> new75() /* reduce ANumberElementTerm */
    {
        @SuppressWarnings("hiding") ArrayList<Object> nodeList = new ArrayList<Object>();

        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList1 = pop();
        PElementTerm pelementtermNode1;
        {
            // Block
        TNumber tnumberNode2;
        tnumberNode2 = (TNumber)nodeArrayList1.get(0);

        pelementtermNode1 = new ANumberElementTerm(tnumberNode2);
        }
	nodeList.add(pelementtermNode1);
        return nodeList;
    }



    @SuppressWarnings({ "unchecked", "rawtypes" })
    ArrayList<Object> new76() /* reduce AElementElementTerm */
    {
        @SuppressWarnings("hiding") ArrayList<Object> nodeList = new ArrayList<Object>();

        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList1 = pop();
        PElementTerm pelementtermNode1;
        {
            // Block
        TElementIdentifier telementidentifierNode2;
        telementidentifierNode2 = (TElementIdentifier)nodeArrayList1.get(0);

        pelementtermNode1 = new AElementElementTerm(telementidentifierNode2);
        }
	nodeList.add(pelementtermNode1);
        return nodeList;
    }



    @SuppressWarnings({ "unchecked", "rawtypes" })
    ArrayList<Object> new77() /* reduce AExpressionElementTerm */
    {
        @SuppressWarnings("hiding") ArrayList<Object> nodeList = new ArrayList<Object>();

        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList3 = pop();
        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList2 = pop();
        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList1 = pop();
        PElementTerm pelementtermNode1;
        {
            // Block
        TLeftParenthesis tleftparenthesisNode2;
        PElementExpression pelementexpressionNode3;
        TRightParenthesis trightparenthesisNode4;
        tleftparenthesisNode2 = (TLeftParenthesis)nodeArrayList1.get(0);
        pelementexpressionNode3 = (PElementExpression)nodeArrayList2.get(0);
        trightparenthesisNode4 = (TRightParenthesis)nodeArrayList3.get(0);

        pelementtermNode1 = new AExpressionElementTerm(tleftparenthesisNode2, pelementexpressionNode3, trightparenthesisNode4);
        }
	nodeList.add(pelementtermNode1);
        return nodeList;
    }



    @SuppressWarnings({ "unchecked", "rawtypes" })
    ArrayList<Object> new78() /* reduce ATerminal$AdditionalStatementInstruction */
    {
        @SuppressWarnings("hiding") ArrayList<Object> nodeList = new ArrayList<Object>();

        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList1 = pop();
        LinkedList<Object> listNode2 = new LinkedList<Object>();
        {
            // Block
        PAdditionalStatementInstruction padditionalstatementinstructionNode1;
        padditionalstatementinstructionNode1 = (PAdditionalStatementInstruction)nodeArrayList1.get(0);
	if(padditionalstatementinstructionNode1 != null)
	{
	  listNode2.add(padditionalstatementinstructionNode1);
	}
        }
	nodeList.add(listNode2);
        return nodeList;
    }



    @SuppressWarnings({ "unchecked", "rawtypes" })
    ArrayList<Object> new79() /* reduce ANonTerminal$AdditionalStatementInstruction */
    {
        @SuppressWarnings("hiding") ArrayList<Object> nodeList = new ArrayList<Object>();

        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList2 = pop();
        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList1 = pop();
        LinkedList<Object> listNode3 = new LinkedList<Object>();
        {
            // Block
        LinkedList<Object> listNode1 = new LinkedList<Object>();
        PAdditionalStatementInstruction padditionalstatementinstructionNode2;
        listNode1 = (LinkedList)nodeArrayList1.get(0);
        padditionalstatementinstructionNode2 = (PAdditionalStatementInstruction)nodeArrayList2.get(0);
	if(listNode1 != null)
	{
	  listNode3.addAll(listNode1);
	}
	if(padditionalstatementinstructionNode2 != null)
	{
	  listNode3.add(padditionalstatementinstructionNode2);
	}
        }
	nodeList.add(listNode3);
        return nodeList;
    }



    @SuppressWarnings({ "unchecked", "rawtypes" })
    ArrayList<Object> new80() /* reduce ATerminal$AdditionalAskInstruction */
    {
        @SuppressWarnings("hiding") ArrayList<Object> nodeList = new ArrayList<Object>();

        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList1 = pop();
        LinkedList<Object> listNode2 = new LinkedList<Object>();
        {
            // Block
        PAdditionalAskInstruction padditionalaskinstructionNode1;
        padditionalaskinstructionNode1 = (PAdditionalAskInstruction)nodeArrayList1.get(0);
	if(padditionalaskinstructionNode1 != null)
	{
	  listNode2.add(padditionalaskinstructionNode1);
	}
        }
	nodeList.add(listNode2);
        return nodeList;
    }



    @SuppressWarnings({ "unchecked", "rawtypes" })
    ArrayList<Object> new81() /* reduce ANonTerminal$AdditionalAskInstruction */
    {
        @SuppressWarnings("hiding") ArrayList<Object> nodeList = new ArrayList<Object>();

        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList2 = pop();
        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList1 = pop();
        LinkedList<Object> listNode3 = new LinkedList<Object>();
        {
            // Block
        LinkedList<Object> listNode1 = new LinkedList<Object>();
        PAdditionalAskInstruction padditionalaskinstructionNode2;
        listNode1 = (LinkedList)nodeArrayList1.get(0);
        padditionalaskinstructionNode2 = (PAdditionalAskInstruction)nodeArrayList2.get(0);
	if(listNode1 != null)
	{
	  listNode3.addAll(listNode1);
	}
	if(padditionalaskinstructionNode2 != null)
	{
	  listNode3.add(padditionalaskinstructionNode2);
	}
        }
	nodeList.add(listNode3);
        return nodeList;
    }



    @SuppressWarnings({ "unchecked", "rawtypes" })
    ArrayList<Object> new82() /* reduce ATerminal$AdditionalProofInstruction */
    {
        @SuppressWarnings("hiding") ArrayList<Object> nodeList = new ArrayList<Object>();

        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList1 = pop();
        LinkedList<Object> listNode2 = new LinkedList<Object>();
        {
            // Block
        PAdditionalProofInstruction padditionalproofinstructionNode1;
        padditionalproofinstructionNode1 = (PAdditionalProofInstruction)nodeArrayList1.get(0);
	if(padditionalproofinstructionNode1 != null)
	{
	  listNode2.add(padditionalproofinstructionNode1);
	}
        }
	nodeList.add(listNode2);
        return nodeList;
    }



    @SuppressWarnings({ "unchecked", "rawtypes" })
    ArrayList<Object> new83() /* reduce ANonTerminal$AdditionalProofInstruction */
    {
        @SuppressWarnings("hiding") ArrayList<Object> nodeList = new ArrayList<Object>();

        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList2 = pop();
        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList1 = pop();
        LinkedList<Object> listNode3 = new LinkedList<Object>();
        {
            // Block
        LinkedList<Object> listNode1 = new LinkedList<Object>();
        PAdditionalProofInstruction padditionalproofinstructionNode2;
        listNode1 = (LinkedList)nodeArrayList1.get(0);
        padditionalproofinstructionNode2 = (PAdditionalProofInstruction)nodeArrayList2.get(0);
	if(listNode1 != null)
	{
	  listNode3.addAll(listNode1);
	}
	if(padditionalproofinstructionNode2 != null)
	{
	  listNode3.add(padditionalproofinstructionNode2);
	}
        }
	nodeList.add(listNode3);
        return nodeList;
    }



    @SuppressWarnings({ "unchecked", "rawtypes" })
    ArrayList<Object> new84() /* reduce ATerminal$PropositionList */
    {
        @SuppressWarnings("hiding") ArrayList<Object> nodeList = new ArrayList<Object>();

        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList1 = pop();
        LinkedList<Object> listNode2 = new LinkedList<Object>();
        {
            // Block
        PPropositionList ppropositionlistNode1;
        ppropositionlistNode1 = (PPropositionList)nodeArrayList1.get(0);
	if(ppropositionlistNode1 != null)
	{
	  listNode2.add(ppropositionlistNode1);
	}
        }
	nodeList.add(listNode2);
        return nodeList;
    }



    @SuppressWarnings({ "unchecked", "rawtypes" })
    ArrayList<Object> new85() /* reduce ANonTerminal$PropositionList */
    {
        @SuppressWarnings("hiding") ArrayList<Object> nodeList = new ArrayList<Object>();

        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList2 = pop();
        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList1 = pop();
        LinkedList<Object> listNode3 = new LinkedList<Object>();
        {
            // Block
        LinkedList<Object> listNode1 = new LinkedList<Object>();
        PPropositionList ppropositionlistNode2;
        listNode1 = (LinkedList)nodeArrayList1.get(0);
        ppropositionlistNode2 = (PPropositionList)nodeArrayList2.get(0);
	if(listNode1 != null)
	{
	  listNode3.addAll(listNode1);
	}
	if(ppropositionlistNode2 != null)
	{
	  listNode3.add(ppropositionlistNode2);
	}
        }
	nodeList.add(listNode3);
        return nodeList;
    }



    @SuppressWarnings({ "unchecked", "rawtypes" })
    ArrayList<Object> new86() /* reduce ATerminal$AdditionalProposition */
    {
        @SuppressWarnings("hiding") ArrayList<Object> nodeList = new ArrayList<Object>();

        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList1 = pop();
        LinkedList<Object> listNode2 = new LinkedList<Object>();
        {
            // Block
        PAdditionalProposition padditionalpropositionNode1;
        padditionalpropositionNode1 = (PAdditionalProposition)nodeArrayList1.get(0);
	if(padditionalpropositionNode1 != null)
	{
	  listNode2.add(padditionalpropositionNode1);
	}
        }
	nodeList.add(listNode2);
        return nodeList;
    }



    @SuppressWarnings({ "unchecked", "rawtypes" })
    ArrayList<Object> new87() /* reduce ANonTerminal$AdditionalProposition */
    {
        @SuppressWarnings("hiding") ArrayList<Object> nodeList = new ArrayList<Object>();

        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList2 = pop();
        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList1 = pop();
        LinkedList<Object> listNode3 = new LinkedList<Object>();
        {
            // Block
        LinkedList<Object> listNode1 = new LinkedList<Object>();
        PAdditionalProposition padditionalpropositionNode2;
        listNode1 = (LinkedList)nodeArrayList1.get(0);
        padditionalpropositionNode2 = (PAdditionalProposition)nodeArrayList2.get(0);
	if(listNode1 != null)
	{
	  listNode3.addAll(listNode1);
	}
	if(padditionalpropositionNode2 != null)
	{
	  listNode3.add(padditionalpropositionNode2);
	}
        }
	nodeList.add(listNode3);
        return nodeList;
    }



    private static int[][][] actionTable;
/*      {
			{{-1, ERROR, 0}, {0, SHIFT, 1}, },
			{{-1, ERROR, 1}, {21, SHIFT, 3}, },
			{{-1, ERROR, 2}, {59, ACCEPT, -1}, },
			{{-1, ERROR, 3}, {2, SHIFT, 4}, },
			{{-1, ERROR, 4}, {22, SHIFT, 7}, },
			{{-1, REDUCE, 0}, },
			{{-1, ERROR, 6}, {3, SHIFT, 8}, },
			{{-1, ERROR, 7}, {4, SHIFT, 10}, {56, SHIFT, 11}, },
			{{-1, ERROR, 8}, {22, SHIFT, 14}, },
			{{-1, ERROR, 9}, {1, SHIFT, 15}, },
			{{-1, ERROR, 10}, {56, SHIFT, 17}, },
			{{-1, ERROR, 11}, {44, SHIFT, 18}, },
			{{-1, REDUCE, 2}, },
			{{-1, ERROR, 13}, {20, SHIFT, 19}, {21, SHIFT, 20}, },
			{{-1, ERROR, 14}, {54, SHIFT, 23}, },
			{{-1, ERROR, 15}, {22, SHIFT, 26}, },
			{{-1, REDUCE, 1}, },
			{{-1, REDUCE, 8}, {44, SHIFT, 27}, },
			{{-1, ERROR, 18}, {38, SHIFT, 28}, },
			{{-1, ERROR, 19}, {4, SHIFT, 10}, {56, SHIFT, 11}, },
			{{-1, REDUCE, 5}, },
			{{-1, REDUCE, 78}, },
			{{-1, ERROR, 22}, {20, SHIFT, 19}, {21, SHIFT, 30}, },
			{{-1, ERROR, 23}, {22, SHIFT, 32}, },
			{{-1, REDUCE, 3}, },
			{{-1, ERROR, 25}, {20, SHIFT, 33}, {21, SHIFT, 34}, },
			{{-1, ERROR, 26}, {54, SHIFT, 37}, },
			{{-1, ERROR, 27}, {38, SHIFT, 40}, },
			{{-1, ERROR, 28}, {57, SHIFT, 41}, },
			{{-1, REDUCE, 7}, },
			{{-1, REDUCE, 6}, },
			{{-1, REDUCE, 79}, },
			{{-1, ERROR, 32}, {6, SHIFT, 42}, },
			{{-1, ERROR, 33}, {54, SHIFT, 23}, },
			{{-1, REDUCE, 11}, },
			{{-1, REDUCE, 80}, },
			{{-1, ERROR, 36}, {20, SHIFT, 33}, {21, SHIFT, 44}, },
			{{-1, ERROR, 37}, {22, SHIFT, 46}, },
			{{-1, REDUCE, 4}, },
			{{-1, REDUCE, 15}, {54, SHIFT, 37}, },
			{{-1, ERROR, 40}, {57, SHIFT, 50}, },
			{{-1, ERROR, 41}, {34, SHIFT, 51}, },
			{{-1, ERROR, 42}, {38, SHIFT, 52}, {40, SHIFT, 53}, {56, SHIFT, 54}, },
			{{-1, REDUCE, 13}, },
			{{-1, REDUCE, 12}, },
			{{-1, REDUCE, 81}, },
			{{-1, ERROR, 46}, {7, SHIFT, 61}, {17, SHIFT, 62}, {18, SHIFT, 63}, {38, SHIFT, 52}, {40, SHIFT, 64}, {55, SHIFT, 65}, {56, SHIFT, 54}, {57, SHIFT, 66}, },
			{{-1, REDUCE, 82}, },
			{{-1, REDUCE, 17}, },
			{{-1, REDUCE, 16}, {54, SHIFT, 37}, },
			{{-1, ERROR, 50}, {34, SHIFT, 82}, },
			{{-1, ERROR, 51}, {56, SHIFT, 83}, },
			{{-1, ERROR, 52}, {40, SHIFT, 84}, {55, SHIFT, 65}, {57, SHIFT, 66}, },
			{{-1, ERROR, 53}, {38, SHIFT, 52}, {40, SHIFT, 53}, {56, SHIFT, 54}, },
			{{-1, REDUCE, 53}, },
			{{-1, REDUCE, 14}, },
			{{-1, REDUCE, 36}, {30, SHIFT, 87}, {31, SHIFT, 88}, {32, SHIFT, 89}, {33, SHIFT, 90}, {44, SHIFT, 91}, {49, SHIFT, 92}, },
			{{-1, REDUCE, 37}, {8, SHIFT, 93}, {14, SHIFT, 94}, {28, SHIFT, 95}, {29, SHIFT, 96}, },
			{{-1, REDUCE, 44}, {11, SHIFT, 97}, },
			{{-1, REDUCE, 49}, {16, SHIFT, 98}, },
			{{-1, REDUCE, 51}, },
			{{-1, ERROR, 61}, {38, SHIFT, 52}, {40, SHIFT, 64}, {55, SHIFT, 65}, {56, SHIFT, 54}, {57, SHIFT, 66}, },
			{{-1, ERROR, 62}, {57, SHIFT, 100}, },
			{{-1, ERROR, 63}, {57, SHIFT, 101}, },
			{{-1, ERROR, 64}, {38, SHIFT, 52}, {40, SHIFT, 64}, {55, SHIFT, 65}, {56, SHIFT, 54}, {57, SHIFT, 66}, },
			{{-1, REDUCE, 75}, },
			{{-1, REDUCE, 76}, },
			{{-1, ERROR, 67}, {5, SHIFT, 103}, },
			{{-1, REDUCE, 84}, },
			{{-1, ERROR, 69}, {21, SHIFT, 104}, {24, SHIFT, 105}, {25, SHIFT, 106}, },
			{{-1, REDUCE, 25}, },
			{{-1, REDUCE, 28}, {26, SHIFT, 109}, },
			{{-1, REDUCE, 29}, {27, SHIFT, 110}, },
			{{-1, REDUCE, 31}, },
			{{-1, REDUCE, 34}, },
			{{-1, REDUCE, 35}, {34, SHIFT, 111}, },
			{{-1, REDUCE, 56}, {44, SHIFT, 112}, {45, SHIFT, 113}, {46, SHIFT, 114}, {47, SHIFT, 115}, {48, SHIFT, 116}, {49, SHIFT, 117}, {50, SHIFT, 118}, {51, SHIFT, 119}, {52, SHIFT, 120}, {53, SHIFT, 121}, },
			{{-1, REDUCE, 57}, {14, SHIFT, 122}, {15, SHIFT, 123}, },
			{{-1, REDUCE, 68}, {11, SHIFT, 124}, {12, SHIFT, 125}, {13, SHIFT, 126}, },
			{{-1, REDUCE, 71}, },
			{{-1, REDUCE, 19}, {7, SHIFT, 61}, {17, SHIFT, 62}, {18, SHIFT, 63}, {38, SHIFT, 52}, {40, SHIFT, 64}, {55, SHIFT, 65}, {56, SHIFT, 54}, {57, SHIFT, 66}, },
			{{-1, REDUCE, 83}, },
			{{-1, ERROR, 82}, {56, SHIFT, 128}, },
			{{-1, ERROR, 83}, {19, SHIFT, 129}, },
			{{-1, ERROR, 84}, {40, SHIFT, 84}, {55, SHIFT, 65}, {57, SHIFT, 66}, },
			{{-1, ERROR, 85}, {39, SHIFT, 130}, },
			{{-1, ERROR, 86}, {41, SHIFT, 131}, },
			{{-1, ERROR, 87}, {38, SHIFT, 52}, {40, SHIFT, 53}, {56, SHIFT, 54}, },
			{{-1, ERROR, 88}, {38, SHIFT, 52}, {40, SHIFT, 53}, {56, SHIFT, 54}, },
			{{-1, ERROR, 89}, {38, SHIFT, 52}, {40, SHIFT, 53}, {56, SHIFT, 54}, },
			{{-1, ERROR, 90}, {38, SHIFT, 52}, {40, SHIFT, 53}, {56, SHIFT, 54}, },
			{{-1, ERROR, 91}, {38, SHIFT, 52}, {40, SHIFT, 53}, {56, SHIFT, 54}, },
			{{-1, ERROR, 92}, {38, SHIFT, 52}, {40, SHIFT, 53}, {56, SHIFT, 54}, },
			{{-1, ERROR, 93}, {38, SHIFT, 52}, {40, SHIFT, 53}, {56, SHIFT, 54}, },
			{{-1, ERROR, 94}, {38, SHIFT, 52}, {40, SHIFT, 53}, {56, SHIFT, 54}, },
			{{-1, ERROR, 95}, {38, SHIFT, 52}, {40, SHIFT, 53}, {56, SHIFT, 54}, },
			{{-1, ERROR, 96}, {38, SHIFT, 52}, {40, SHIFT, 53}, {56, SHIFT, 54}, },
			{{-1, ERROR, 97}, {38, SHIFT, 52}, {40, SHIFT, 53}, {56, SHIFT, 54}, },
			{{-1, ERROR, 98}, {38, SHIFT, 52}, {40, SHIFT, 53}, {56, SHIFT, 54}, },
			{{-1, ERROR, 99}, {21, SHIFT, 144}, },
			{{-1, ERROR, 100}, {34, SHIFT, 145}, },
			{{-1, ERROR, 101}, {34, SHIFT, 146}, },
			{{-1, ERROR, 102}, {41, SHIFT, 147}, },
			{{-1, ERROR, 103}, {21, SHIFT, 148}, },
			{{-1, REDUCE, 20}, },
			{{-1, ERROR, 105}, {17, SHIFT, 62}, {18, SHIFT, 63}, {38, SHIFT, 52}, {40, SHIFT, 64}, {55, SHIFT, 65}, {56, SHIFT, 54}, {57, SHIFT, 66}, },
			{{-1, ERROR, 106}, {17, SHIFT, 62}, {18, SHIFT, 63}, {38, SHIFT, 52}, {40, SHIFT, 64}, {55, SHIFT, 65}, {56, SHIFT, 54}, {57, SHIFT, 66}, },
			{{-1, REDUCE, 86}, },
			{{-1, ERROR, 108}, {21, SHIFT, 151}, {24, SHIFT, 105}, {25, SHIFT, 106}, },
			{{-1, ERROR, 109}, {38, SHIFT, 52}, {40, SHIFT, 64}, {55, SHIFT, 65}, {56, SHIFT, 54}, {57, SHIFT, 66}, },
			{{-1, ERROR, 110}, {38, SHIFT, 52}, {40, SHIFT, 64}, {55, SHIFT, 65}, {56, SHIFT, 54}, {57, SHIFT, 66}, },
			{{-1, ERROR, 111}, {38, SHIFT, 52}, {40, SHIFT, 53}, {56, SHIFT, 54}, },
			{{-1, ERROR, 112}, {40, SHIFT, 84}, {55, SHIFT, 65}, {57, SHIFT, 66}, },
			{{-1, ERROR, 113}, {40, SHIFT, 84}, {55, SHIFT, 65}, {57, SHIFT, 66}, },
			{{-1, ERROR, 114}, {40, SHIFT, 84}, {55, SHIFT, 65}, {57, SHIFT, 66}, },
			{{-1, ERROR, 115}, {40, SHIFT, 84}, {55, SHIFT, 65}, {57, SHIFT, 66}, },
			{{-1, ERROR, 116}, {40, SHIFT, 84}, {55, SHIFT, 65}, {57, SHIFT, 66}, },
			{{-1, ERROR, 117}, {40, SHIFT, 84}, {55, SHIFT, 65}, {57, SHIFT, 66}, },
			{{-1, ERROR, 118}, {40, SHIFT, 84}, {55, SHIFT, 65}, {57, SHIFT, 66}, },
			{{-1, ERROR, 119}, {40, SHIFT, 84}, {55, SHIFT, 65}, {57, SHIFT, 66}, },
			{{-1, ERROR, 120}, {40, SHIFT, 84}, {55, SHIFT, 65}, {57, SHIFT, 66}, },
			{{-1, ERROR, 121}, {40, SHIFT, 84}, {55, SHIFT, 65}, {57, SHIFT, 66}, },
			{{-1, ERROR, 122}, {40, SHIFT, 84}, {55, SHIFT, 65}, {57, SHIFT, 66}, },
			{{-1, ERROR, 123}, {40, SHIFT, 84}, {55, SHIFT, 65}, {57, SHIFT, 66}, },
			{{-1, ERROR, 124}, {40, SHIFT, 84}, {55, SHIFT, 65}, {57, SHIFT, 66}, },
			{{-1, ERROR, 125}, {40, SHIFT, 84}, {55, SHIFT, 65}, {57, SHIFT, 66}, },
			{{-1, ERROR, 126}, {40, SHIFT, 84}, {55, SHIFT, 65}, {57, SHIFT, 66}, },
			{{-1, REDUCE, 85}, },
			{{-1, ERROR, 128}, {19, SHIFT, 171}, },
			{{-1, ERROR, 129}, {40, SHIFT, 84}, {55, SHIFT, 65}, {57, SHIFT, 66}, },
			{{-1, REDUCE, 54}, },
			{{-1, REDUCE, 55}, },
			{{-1, REDUCE, 40}, {8, SHIFT, 93}, {14, SHIFT, 94}, {28, SHIFT, 95}, {29, SHIFT, 96}, },
			{{-1, REDUCE, 42}, {8, SHIFT, 93}, {14, SHIFT, 94}, {28, SHIFT, 95}, {29, SHIFT, 96}, },
			{{-1, REDUCE, 41}, {8, SHIFT, 93}, {14, SHIFT, 94}, {28, SHIFT, 95}, {29, SHIFT, 96}, },
			{{-1, REDUCE, 43}, {8, SHIFT, 93}, {14, SHIFT, 94}, {28, SHIFT, 95}, {29, SHIFT, 96}, },
			{{-1, REDUCE, 38}, {8, SHIFT, 93}, {14, SHIFT, 94}, {28, SHIFT, 95}, {29, SHIFT, 96}, },
			{{-1, REDUCE, 39}, {8, SHIFT, 93}, {14, SHIFT, 94}, {28, SHIFT, 95}, {29, SHIFT, 96}, },
			{{-1, REDUCE, 46}, {11, SHIFT, 97}, },
			{{-1, REDUCE, 45}, {11, SHIFT, 97}, },
			{{-1, REDUCE, 47}, {11, SHIFT, 97}, },
			{{-1, REDUCE, 48}, {11, SHIFT, 97}, },
			{{-1, REDUCE, 50}, {16, SHIFT, 98}, },
			{{-1, REDUCE, 52}, },
			{{-1, REDUCE, 22}, },
			{{-1, ERROR, 145}, {38, SHIFT, 52}, {40, SHIFT, 53}, {56, SHIFT, 54}, },
			{{-1, ERROR, 146}, {38, SHIFT, 52}, {40, SHIFT, 53}, {56, SHIFT, 54}, },
			{{-1, REDUCE, 77}, },
			{{-1, REDUCE, 18}, },
			{{-1, REDUCE, 23}, },
			{{-1, REDUCE, 24}, },
			{{-1, REDUCE, 21}, },
			{{-1, REDUCE, 87}, },
			{{-1, REDUCE, 30}, {27, SHIFT, 110}, },
			{{-1, REDUCE, 32}, },
			{{-1, REDUCE, 33}, },
			{{-1, REDUCE, 58}, {14, SHIFT, 122}, {15, SHIFT, 123}, },
			{{-1, REDUCE, 60}, {14, SHIFT, 122}, {15, SHIFT, 123}, },
			{{-1, REDUCE, 62}, {14, SHIFT, 122}, {15, SHIFT, 123}, },
			{{-1, REDUCE, 64}, {14, SHIFT, 122}, {15, SHIFT, 123}, },
			{{-1, REDUCE, 66}, {14, SHIFT, 122}, {15, SHIFT, 123}, },
			{{-1, REDUCE, 59}, {14, SHIFT, 122}, {15, SHIFT, 123}, },
			{{-1, REDUCE, 61}, {14, SHIFT, 122}, {15, SHIFT, 123}, },
			{{-1, REDUCE, 63}, {14, SHIFT, 122}, {15, SHIFT, 123}, },
			{{-1, REDUCE, 65}, {14, SHIFT, 122}, {15, SHIFT, 123}, },
			{{-1, REDUCE, 67}, {14, SHIFT, 122}, {15, SHIFT, 123}, },
			{{-1, REDUCE, 69}, {11, SHIFT, 124}, {12, SHIFT, 125}, {13, SHIFT, 126}, },
			{{-1, REDUCE, 70}, {11, SHIFT, 124}, {12, SHIFT, 125}, {13, SHIFT, 126}, },
			{{-1, REDUCE, 72}, },
			{{-1, REDUCE, 73}, },
			{{-1, REDUCE, 74}, },
			{{-1, ERROR, 171}, {40, SHIFT, 84}, {55, SHIFT, 65}, {57, SHIFT, 66}, },
			{{-1, ERROR, 172}, {39, SHIFT, 176}, },
			{{-1, ERROR, 173}, {20, SHIFT, 177}, },
			{{-1, ERROR, 174}, {20, SHIFT, 178}, },
			{{-1, ERROR, 175}, {39, SHIFT, 179}, },
			{{-1, REDUCE, 9}, },
			{{-1, ERROR, 177}, {38, SHIFT, 52}, {40, SHIFT, 64}, {55, SHIFT, 65}, {56, SHIFT, 54}, {57, SHIFT, 66}, },
			{{-1, ERROR, 178}, {38, SHIFT, 52}, {40, SHIFT, 64}, {55, SHIFT, 65}, {56, SHIFT, 54}, {57, SHIFT, 66}, },
			{{-1, REDUCE, 10}, },
			{{-1, REDUCE, 26}, },
			{{-1, REDUCE, 27}, },
        };*/
    private static int[][][] gotoTable;
/*      {
			{{-1, 2}, },
			{{-1, 5}, },
			{{-1, 6}, },
			{{-1, 9}, },
			{{-1, 16}, },
			{{-1, 12}, },
			{{-1, 21}, {22, 31}, },
			{{-1, 13}, {19, 29}, },
			{{-1, 24}, },
			{{-1, 35}, {36, 45}, },
			{{-1, 25}, {33, 43}, },
			{{-1, 38}, },
			{{-1, 47}, {49, 81}, },
			{{-1, 48}, {26, 39}, },
			{{-1, 67}, },
			{{-1, 68}, {80, 127}, },
			{{-1, 107}, {108, 152}, },
			{{-1, 69}, {105, 149}, {106, 150}, },
			{{-1, 70}, {61, 99}, {177, 180}, {178, 181}, },
			{{-1, 71}, },
			{{-1, 72}, {109, 153}, },
			{{-1, 73}, {110, 154}, },
			{{-1, 74}, {42, 55}, {53, 86}, {64, 86}, {111, 155}, {145, 173}, {146, 174}, },
			{{-1, 56}, },
			{{-1, 57}, {87, 132}, {88, 133}, {89, 134}, {90, 135}, {91, 136}, {92, 137}, },
			{{-1, 58}, {93, 138}, {94, 139}, {95, 140}, {96, 141}, },
			{{-1, 59}, {97, 142}, },
			{{-1, 60}, {98, 143}, },
			{{-1, 75}, {64, 102}, {84, 102}, {129, 172}, {171, 175}, },
			{{-1, 76}, },
			{{-1, 77}, {112, 156}, {113, 157}, {114, 158}, {115, 159}, {116, 160}, {117, 161}, {118, 162}, {119, 163}, {120, 164}, {121, 165}, },
			{{-1, 78}, {122, 166}, {123, 167}, },
			{{-1, 79}, {52, 85}, {124, 168}, {125, 169}, {126, 170}, },
			{{-1, 22}, },
			{{-1, 36}, },
			{{-1, 49}, },
			{{-1, 80}, },
			{{-1, 108}, },
        };*/
    private static String[] errorMessages;
/*      {
			"expecting: category",
			"expecting: ';'",
			"expecting: EOF",
			"expecting: 'statement'",
			"expecting: ':'",
			"expecting: 'ask'",
			"expecting: 'let', set identifier",
			"expecting: 'proof'",
			"expecting: set identifier",
			"expecting: '='",
			"expecting: ',', ';'",
			"expecting: tag number",
			"expecting: ',', ';', '='",
			"expecting: '{'",
			"expecting: element identifier",
			"expecting: 'show'",
			"expecting: tag number, EOF",
			"expecting: '∈'",
			"expecting: '{', '(', set identifier",
			"expecting: 'thus', '∀', '∃', '{', '(', number, set identifier, element identifier",
			"expecting: '(', number, element identifier",
			"expecting: '\', '*', '+', '^', ',', ';', '=>', '<=>', '∧', '∨', '∪', '∩', '⊂', '⊃', '⊄', '⊅', ')', '=', not equal to",
			"expecting: ',', ';', '=>', '<=>', '∧', '∨', '⊂', '⊃', '⊄', '⊅', ')', '=', not equal to",
			"expecting: '\', '+', ',', ';', '=>', '<=>', '∧', '∨', '∪', '∩', '⊂', '⊃', '⊄', '⊅', ')', '=', not equal to",
			"expecting: '\', '*', '+', ',', ';', '=>', '<=>', '∧', '∨', '∪', '∩', '⊂', '⊃', '⊄', '⊅', ')', '=', not equal to",
			"expecting: '{', '(', number, set identifier, element identifier",
			"expecting: '*', '/', '%', '+', '-', ';', '=>', '<=>', '∧', '∨', '∈', '}', ')', '=', '>', '<', greater than or equal to, less than or equal to, not equal to, not greater than, not less than, neither greater than nor equal to, neither less than nor equal to",
			"expecting: 'done'",
			"expecting: 'done', 'thus', '∀', '∃', '{', '(', number, set identifier, element identifier",
			"expecting: ';', '=>', '<=>'",
			"expecting: ';', '=>', '<=>', '∧'",
			"expecting: ';', '=>', '<=>', '∧', '∨'",
			"expecting: ';', '=>', '<=>', '∧', '∨', '∈'",
			"expecting: ';', '=>', '<=>', '∧', '∨', '∈', '}', ')', '=', '>', '<', greater than or equal to, less than or equal to, not equal to, not greater than, not less than, neither greater than nor equal to, neither less than nor equal to",
			"expecting: '+', '-', ';', '=>', '<=>', '∧', '∨', '∈', '}', ')', '=', '>', '<', greater than or equal to, less than or equal to, not equal to, not greater than, not less than, neither greater than nor equal to, neither less than nor equal to",
			"expecting: '|'",
			"expecting: '}'",
			"expecting: ')'",
			"expecting: '∀', '∃', '{', '(', number, set identifier, element identifier",
			"expecting: ','",
        };*/
    private static int[] errors;
/*      {
			0, 1, 2, 3, 4, 2, 5, 6, 4, 7, 8, 9, 5, 10, 11, 4, 2, 12, 13, 6, 5, 10, 10, 4, 7, 10, 11, 13, 14, 10, 5, 10, 15, 11, 7, 10, 10, 4, 2, 16, 14, 17, 18, 10, 7, 10, 19, 16, 16, 16, 17, 8, 20, 18, 21, 10, 22, 23, 24, 21, 21, 25, 14, 14, 25, 26, 26, 27, 28, 29, 29, 30, 31, 31, 31, 32, 33, 34, 26, 26, 28, 16, 8, 35, 20, 36, 37, 18, 18, 18, 18, 18, 18, 18, 18, 18, 18, 18, 18, 1, 17, 17, 37, 1, 28, 38, 38, 29, 29, 25, 25, 18, 20, 20, 20, 20, 20, 20, 20, 20, 20, 20, 20, 20, 20, 20, 20, 28, 35, 20, 21, 21, 23, 23, 23, 23, 23, 23, 24, 24, 24, 24, 21, 21, 28, 18, 18, 26, 16, 29, 29, 28, 29, 31, 31, 31, 34, 34, 34, 34, 34, 34, 34, 34, 34, 34, 26, 26, 26, 26, 26, 20, 36, 39, 39, 36, 10, 25, 25, 10, 29, 29, 
        };*/

    static 
    {
        try
        {
            DataInputStream s = new DataInputStream(
                new BufferedInputStream(
                Parser.class.getResourceAsStream("parser.dat")));

            // read actionTable
            int length = s.readInt();
            Parser.actionTable = new int[length][][];
            for(int i = 0; i < Parser.actionTable.length; i++)
            {
                length = s.readInt();
                Parser.actionTable[i] = new int[length][3];
                for(int j = 0; j < Parser.actionTable[i].length; j++)
                {
                for(int k = 0; k < 3; k++)
                {
                    Parser.actionTable[i][j][k] = s.readInt();
                }
                }
            }

            // read gotoTable
            length = s.readInt();
            gotoTable = new int[length][][];
            for(int i = 0; i < gotoTable.length; i++)
            {
                length = s.readInt();
                gotoTable[i] = new int[length][2];
                for(int j = 0; j < gotoTable[i].length; j++)
                {
                for(int k = 0; k < 2; k++)
                {
                    gotoTable[i][j][k] = s.readInt();
                }
                }
            }

            // read errorMessages
            length = s.readInt();
            errorMessages = new String[length];
            for(int i = 0; i < errorMessages.length; i++)
            {
                length = s.readInt();
                StringBuffer buffer = new StringBuffer();

                for(int j = 0; j < length; j++)
                {
                buffer.append(s.readChar());
                }
                errorMessages[i] = buffer.toString();
            }

            // read errors
            length = s.readInt();
            errors = new int[length];
            for(int i = 0; i < errors.length; i++)
            {
                errors[i] = s.readInt();
            }

            s.close();
        }
        catch(Exception e)
        {
            throw new RuntimeException("The file \"parser.dat\" is either missing or corrupted.");
        }
    }
}
