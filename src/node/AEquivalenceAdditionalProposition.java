/* This file was generated by SableCC (http://www.sablecc.org/). */

package node;

import analysis.*;

@SuppressWarnings("nls")
public final class AEquivalenceAdditionalProposition extends PAdditionalProposition
{
    private TEquivalenceSign _equivalenceSign_;
    private PProposition _proposition_;

    public AEquivalenceAdditionalProposition()
    {
        // Constructor
    }

    public AEquivalenceAdditionalProposition(
        @SuppressWarnings("hiding") TEquivalenceSign _equivalenceSign_,
        @SuppressWarnings("hiding") PProposition _proposition_)
    {
        // Constructor
        setEquivalenceSign(_equivalenceSign_);

        setProposition(_proposition_);

    }

    @Override
    public Object clone()
    {
        return new AEquivalenceAdditionalProposition(
            cloneNode(this._equivalenceSign_),
            cloneNode(this._proposition_));
    }

    @Override
    public void apply(Switch sw)
    {
        ((Analysis) sw).caseAEquivalenceAdditionalProposition(this);
    }

    public TEquivalenceSign getEquivalenceSign()
    {
        return this._equivalenceSign_;
    }

    public void setEquivalenceSign(TEquivalenceSign node)
    {
        if(this._equivalenceSign_ != null)
        {
            this._equivalenceSign_.parent(null);
        }

        if(node != null)
        {
            if(node.parent() != null)
            {
                node.parent().removeChild(node);
            }

            node.parent(this);
        }

        this._equivalenceSign_ = node;
    }

    public PProposition getProposition()
    {
        return this._proposition_;
    }

    public void setProposition(PProposition node)
    {
        if(this._proposition_ != null)
        {
            this._proposition_.parent(null);
        }

        if(node != null)
        {
            if(node.parent() != null)
            {
                node.parent().removeChild(node);
            }

            node.parent(this);
        }

        this._proposition_ = node;
    }

    @Override
    public String toString()
    {
        return ""
            + toString(this._equivalenceSign_)
            + toString(this._proposition_);
    }

    @Override
    void removeChild(@SuppressWarnings("unused") Node child)
    {
        // Remove child
        if(this._equivalenceSign_ == child)
        {
            this._equivalenceSign_ = null;
            return;
        }

        if(this._proposition_ == child)
        {
            this._proposition_ = null;
            return;
        }

        throw new RuntimeException("Not a child.");
    }

    @Override
    void replaceChild(@SuppressWarnings("unused") Node oldChild, @SuppressWarnings("unused") Node newChild)
    {
        // Replace child
        if(this._equivalenceSign_ == oldChild)
        {
            setEquivalenceSign((TEquivalenceSign) newChild);
            return;
        }

        if(this._proposition_ == oldChild)
        {
            setProposition((PProposition) newChild);
            return;
        }

        throw new RuntimeException("Not a child.");
    }
}
