/* This file was generated by SableCC (http://www.sablecc.org/). */

package node;

import analysis.*;

@SuppressWarnings("nls")
public final class AInstructions extends PInstructions
{
    private PStatementBlock _statementBlock_;
    private PQuestionBlock _questionBlock_;
    private PProofBlock _proofBlock_;

    public AInstructions()
    {
        // Constructor
    }

    public AInstructions(
        @SuppressWarnings("hiding") PStatementBlock _statementBlock_,
        @SuppressWarnings("hiding") PQuestionBlock _questionBlock_,
        @SuppressWarnings("hiding") PProofBlock _proofBlock_)
    {
        // Constructor
        setStatementBlock(_statementBlock_);

        setQuestionBlock(_questionBlock_);

        setProofBlock(_proofBlock_);

    }

    @Override
    public Object clone()
    {
        return new AInstructions(
            cloneNode(this._statementBlock_),
            cloneNode(this._questionBlock_),
            cloneNode(this._proofBlock_));
    }

    @Override
    public void apply(Switch sw)
    {
        ((Analysis) sw).caseAInstructions(this);
    }

    public PStatementBlock getStatementBlock()
    {
        return this._statementBlock_;
    }

    public void setStatementBlock(PStatementBlock node)
    {
        if(this._statementBlock_ != null)
        {
            this._statementBlock_.parent(null);
        }

        if(node != null)
        {
            if(node.parent() != null)
            {
                node.parent().removeChild(node);
            }

            node.parent(this);
        }

        this._statementBlock_ = node;
    }

    public PQuestionBlock getQuestionBlock()
    {
        return this._questionBlock_;
    }

    public void setQuestionBlock(PQuestionBlock node)
    {
        if(this._questionBlock_ != null)
        {
            this._questionBlock_.parent(null);
        }

        if(node != null)
        {
            if(node.parent() != null)
            {
                node.parent().removeChild(node);
            }

            node.parent(this);
        }

        this._questionBlock_ = node;
    }

    public PProofBlock getProofBlock()
    {
        return this._proofBlock_;
    }

    public void setProofBlock(PProofBlock node)
    {
        if(this._proofBlock_ != null)
        {
            this._proofBlock_.parent(null);
        }

        if(node != null)
        {
            if(node.parent() != null)
            {
                node.parent().removeChild(node);
            }

            node.parent(this);
        }

        this._proofBlock_ = node;
    }

    @Override
    public String toString()
    {
        return ""
            + toString(this._statementBlock_)
            + toString(this._questionBlock_)
            + toString(this._proofBlock_);
    }

    @Override
    void removeChild(@SuppressWarnings("unused") Node child)
    {
        // Remove child
        if(this._statementBlock_ == child)
        {
            this._statementBlock_ = null;
            return;
        }

        if(this._questionBlock_ == child)
        {
            this._questionBlock_ = null;
            return;
        }

        if(this._proofBlock_ == child)
        {
            this._proofBlock_ = null;
            return;
        }

        throw new RuntimeException("Not a child.");
    }

    @Override
    void replaceChild(@SuppressWarnings("unused") Node oldChild, @SuppressWarnings("unused") Node newChild)
    {
        // Replace child
        if(this._statementBlock_ == oldChild)
        {
            setStatementBlock((PStatementBlock) newChild);
            return;
        }

        if(this._questionBlock_ == oldChild)
        {
            setQuestionBlock((PQuestionBlock) newChild);
            return;
        }

        if(this._proofBlock_ == oldChild)
        {
            setProofBlock((PProofBlock) newChild);
            return;
        }

        throw new RuntimeException("Not a child.");
    }
}
