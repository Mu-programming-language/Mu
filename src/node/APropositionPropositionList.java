/* This file was generated by SableCC (http://www.sablecc.org/). */

package node;

import java.util.*;
import analysis.*;

@SuppressWarnings("nls")
public final class APropositionPropositionList extends PPropositionList
{
    private PProposition _proposition_;
    private final LinkedList<PAdditionalProposition> _additionalProposition_ = new LinkedList<PAdditionalProposition>();
    private TSemicolon _semicolon_;

    public APropositionPropositionList()
    {
        // Constructor
    }

    public APropositionPropositionList(
        @SuppressWarnings("hiding") PProposition _proposition_,
        @SuppressWarnings("hiding") List<?> _additionalProposition_,
        @SuppressWarnings("hiding") TSemicolon _semicolon_)
    {
        // Constructor
        setProposition(_proposition_);

        setAdditionalProposition(_additionalProposition_);

        setSemicolon(_semicolon_);

    }

    @Override
    public Object clone()
    {
        return new APropositionPropositionList(
            cloneNode(this._proposition_),
            cloneList(this._additionalProposition_),
            cloneNode(this._semicolon_));
    }

    @Override
    public void apply(Switch sw)
    {
        ((Analysis) sw).caseAPropositionPropositionList(this);
    }

    public PProposition getProposition()
    {
        return this._proposition_;
    }

    public void setProposition(PProposition node)
    {
        if(this._proposition_ != null)
        {
            this._proposition_.parent(null);
        }

        if(node != null)
        {
            if(node.parent() != null)
            {
                node.parent().removeChild(node);
            }

            node.parent(this);
        }

        this._proposition_ = node;
    }

    public LinkedList<PAdditionalProposition> getAdditionalProposition()
    {
        return this._additionalProposition_;
    }

    public void setAdditionalProposition(List<?> list)
    {
        for(PAdditionalProposition e : this._additionalProposition_)
        {
            e.parent(null);
        }
        this._additionalProposition_.clear();

        for(Object obj_e : list)
        {
            PAdditionalProposition e = (PAdditionalProposition) obj_e;
            if(e.parent() != null)
            {
                e.parent().removeChild(e);
            }

            e.parent(this);
            this._additionalProposition_.add(e);
        }
    }

    public TSemicolon getSemicolon()
    {
        return this._semicolon_;
    }

    public void setSemicolon(TSemicolon node)
    {
        if(this._semicolon_ != null)
        {
            this._semicolon_.parent(null);
        }

        if(node != null)
        {
            if(node.parent() != null)
            {
                node.parent().removeChild(node);
            }

            node.parent(this);
        }

        this._semicolon_ = node;
    }

    @Override
    public String toString()
    {
        return ""
            + toString(this._proposition_)
            + toString(this._additionalProposition_)
            + toString(this._semicolon_);
    }

    @Override
    void removeChild(@SuppressWarnings("unused") Node child)
    {
        // Remove child
        if(this._proposition_ == child)
        {
            this._proposition_ = null;
            return;
        }

        if(this._additionalProposition_.remove(child))
        {
            return;
        }

        if(this._semicolon_ == child)
        {
            this._semicolon_ = null;
            return;
        }

        throw new RuntimeException("Not a child.");
    }

    @Override
    void replaceChild(@SuppressWarnings("unused") Node oldChild, @SuppressWarnings("unused") Node newChild)
    {
        // Replace child
        if(this._proposition_ == oldChild)
        {
            setProposition((PProposition) newChild);
            return;
        }

        for(ListIterator<PAdditionalProposition> i = this._additionalProposition_.listIterator(); i.hasNext();)
        {
            if(i.next() == oldChild)
            {
                if(newChild != null)
                {
                    i.set((PAdditionalProposition) newChild);
                    newChild.parent(this);
                    oldChild.parent(null);
                    return;
                }

                i.remove();
                oldChild.parent(null);
                return;
            }
        }

        if(this._semicolon_ == oldChild)
        {
            setSemicolon((TSemicolon) newChild);
            return;
        }

        throw new RuntimeException("Not a child.");
    }
}
