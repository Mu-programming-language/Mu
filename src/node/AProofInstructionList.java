/* This file was generated by SableCC (http://www.sablecc.org/). */

package node;

import java.util.*;
import analysis.*;

@SuppressWarnings("nls")
public final class AProofInstructionList extends PProofInstructionList
{
    private PProofInstruction _proofInstruction_;
    private final LinkedList<PAdditionalProofInstruction> _additionalProofInstruction_ = new LinkedList<PAdditionalProofInstruction>();

    public AProofInstructionList()
    {
        // Constructor
    }

    public AProofInstructionList(
        @SuppressWarnings("hiding") PProofInstruction _proofInstruction_,
        @SuppressWarnings("hiding") List<?> _additionalProofInstruction_)
    {
        // Constructor
        setProofInstruction(_proofInstruction_);

        setAdditionalProofInstruction(_additionalProofInstruction_);

    }

    @Override
    public Object clone()
    {
        return new AProofInstructionList(
            cloneNode(this._proofInstruction_),
            cloneList(this._additionalProofInstruction_));
    }

    @Override
    public void apply(Switch sw)
    {
        ((Analysis) sw).caseAProofInstructionList(this);
    }

    public PProofInstruction getProofInstruction()
    {
        return this._proofInstruction_;
    }

    public void setProofInstruction(PProofInstruction node)
    {
        if(this._proofInstruction_ != null)
        {
            this._proofInstruction_.parent(null);
        }

        if(node != null)
        {
            if(node.parent() != null)
            {
                node.parent().removeChild(node);
            }

            node.parent(this);
        }

        this._proofInstruction_ = node;
    }

    public LinkedList<PAdditionalProofInstruction> getAdditionalProofInstruction()
    {
        return this._additionalProofInstruction_;
    }

    public void setAdditionalProofInstruction(List<?> list)
    {
        for(PAdditionalProofInstruction e : this._additionalProofInstruction_)
        {
            e.parent(null);
        }
        this._additionalProofInstruction_.clear();

        for(Object obj_e : list)
        {
            PAdditionalProofInstruction e = (PAdditionalProofInstruction) obj_e;
            if(e.parent() != null)
            {
                e.parent().removeChild(e);
            }

            e.parent(this);
            this._additionalProofInstruction_.add(e);
        }
    }

    @Override
    public String toString()
    {
        return ""
            + toString(this._proofInstruction_)
            + toString(this._additionalProofInstruction_);
    }

    @Override
    void removeChild(@SuppressWarnings("unused") Node child)
    {
        // Remove child
        if(this._proofInstruction_ == child)
        {
            this._proofInstruction_ = null;
            return;
        }

        if(this._additionalProofInstruction_.remove(child))
        {
            return;
        }

        throw new RuntimeException("Not a child.");
    }

    @Override
    void replaceChild(@SuppressWarnings("unused") Node oldChild, @SuppressWarnings("unused") Node newChild)
    {
        // Replace child
        if(this._proofInstruction_ == oldChild)
        {
            setProofInstruction((PProofInstruction) newChild);
            return;
        }

        for(ListIterator<PAdditionalProofInstruction> i = this._additionalProofInstruction_.listIterator(); i.hasNext();)
        {
            if(i.next() == oldChild)
            {
                if(newChild != null)
                {
                    i.set((PAdditionalProofInstruction) newChild);
                    newChild.parent(this);
                    oldChild.parent(null);
                    return;
                }

                i.remove();
                oldChild.parent(null);
                return;
            }
        }

        throw new RuntimeException("Not a child.");
    }
}
