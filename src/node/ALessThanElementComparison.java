/* This file was generated by SableCC (http://www.sablecc.org/). */

package node;

import analysis.*;

@SuppressWarnings("nls")
public final class ALessThanElementComparison extends PElementComparison
{
    private PElementComparison _elementComparison_;
    private TLessThan _lessThan_;
    private PElementArithmetic _elementArithmetic_;

    public ALessThanElementComparison()
    {
        // Constructor
    }

    public ALessThanElementComparison(
        @SuppressWarnings("hiding") PElementComparison _elementComparison_,
        @SuppressWarnings("hiding") TLessThan _lessThan_,
        @SuppressWarnings("hiding") PElementArithmetic _elementArithmetic_)
    {
        // Constructor
        setElementComparison(_elementComparison_);

        setLessThan(_lessThan_);

        setElementArithmetic(_elementArithmetic_);

    }

    @Override
    public Object clone()
    {
        return new ALessThanElementComparison(
            cloneNode(this._elementComparison_),
            cloneNode(this._lessThan_),
            cloneNode(this._elementArithmetic_));
    }

    @Override
    public void apply(Switch sw)
    {
        ((Analysis) sw).caseALessThanElementComparison(this);
    }

    public PElementComparison getElementComparison()
    {
        return this._elementComparison_;
    }

    public void setElementComparison(PElementComparison node)
    {
        if(this._elementComparison_ != null)
        {
            this._elementComparison_.parent(null);
        }

        if(node != null)
        {
            if(node.parent() != null)
            {
                node.parent().removeChild(node);
            }

            node.parent(this);
        }

        this._elementComparison_ = node;
    }

    public TLessThan getLessThan()
    {
        return this._lessThan_;
    }

    public void setLessThan(TLessThan node)
    {
        if(this._lessThan_ != null)
        {
            this._lessThan_.parent(null);
        }

        if(node != null)
        {
            if(node.parent() != null)
            {
                node.parent().removeChild(node);
            }

            node.parent(this);
        }

        this._lessThan_ = node;
    }

    public PElementArithmetic getElementArithmetic()
    {
        return this._elementArithmetic_;
    }

    public void setElementArithmetic(PElementArithmetic node)
    {
        if(this._elementArithmetic_ != null)
        {
            this._elementArithmetic_.parent(null);
        }

        if(node != null)
        {
            if(node.parent() != null)
            {
                node.parent().removeChild(node);
            }

            node.parent(this);
        }

        this._elementArithmetic_ = node;
    }

    @Override
    public String toString()
    {
        return ""
            + toString(this._elementComparison_)
            + toString(this._lessThan_)
            + toString(this._elementArithmetic_);
    }

    @Override
    void removeChild(@SuppressWarnings("unused") Node child)
    {
        // Remove child
        if(this._elementComparison_ == child)
        {
            this._elementComparison_ = null;
            return;
        }

        if(this._lessThan_ == child)
        {
            this._lessThan_ = null;
            return;
        }

        if(this._elementArithmetic_ == child)
        {
            this._elementArithmetic_ = null;
            return;
        }

        throw new RuntimeException("Not a child.");
    }

    @Override
    void replaceChild(@SuppressWarnings("unused") Node oldChild, @SuppressWarnings("unused") Node newChild)
    {
        // Replace child
        if(this._elementComparison_ == oldChild)
        {
            setElementComparison((PElementComparison) newChild);
            return;
        }

        if(this._lessThan_ == oldChild)
        {
            setLessThan((TLessThan) newChild);
            return;
        }

        if(this._elementArithmetic_ == oldChild)
        {
            setElementArithmetic((PElementArithmetic) newChild);
            return;
        }

        throw new RuntimeException("Not a child.");
    }
}
