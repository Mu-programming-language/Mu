/* This file was generated by SableCC (http://www.sablecc.org/). */

package node;

import analysis.*;

@SuppressWarnings("nls")
public final class ALogicalOrOrExpression extends POrExpression
{
    private POrExpression _orExpression_;
    private TLogicalOr _logicalOr_;
    private PSimpleExpression _simpleExpression_;

    public ALogicalOrOrExpression()
    {
        // Constructor
    }

    public ALogicalOrOrExpression(
        @SuppressWarnings("hiding") POrExpression _orExpression_,
        @SuppressWarnings("hiding") TLogicalOr _logicalOr_,
        @SuppressWarnings("hiding") PSimpleExpression _simpleExpression_)
    {
        // Constructor
        setOrExpression(_orExpression_);

        setLogicalOr(_logicalOr_);

        setSimpleExpression(_simpleExpression_);

    }

    @Override
    public Object clone()
    {
        return new ALogicalOrOrExpression(
            cloneNode(this._orExpression_),
            cloneNode(this._logicalOr_),
            cloneNode(this._simpleExpression_));
    }

    @Override
    public void apply(Switch sw)
    {
        ((Analysis) sw).caseALogicalOrOrExpression(this);
    }

    public POrExpression getOrExpression()
    {
        return this._orExpression_;
    }

    public void setOrExpression(POrExpression node)
    {
        if(this._orExpression_ != null)
        {
            this._orExpression_.parent(null);
        }

        if(node != null)
        {
            if(node.parent() != null)
            {
                node.parent().removeChild(node);
            }

            node.parent(this);
        }

        this._orExpression_ = node;
    }

    public TLogicalOr getLogicalOr()
    {
        return this._logicalOr_;
    }

    public void setLogicalOr(TLogicalOr node)
    {
        if(this._logicalOr_ != null)
        {
            this._logicalOr_.parent(null);
        }

        if(node != null)
        {
            if(node.parent() != null)
            {
                node.parent().removeChild(node);
            }

            node.parent(this);
        }

        this._logicalOr_ = node;
    }

    public PSimpleExpression getSimpleExpression()
    {
        return this._simpleExpression_;
    }

    public void setSimpleExpression(PSimpleExpression node)
    {
        if(this._simpleExpression_ != null)
        {
            this._simpleExpression_.parent(null);
        }

        if(node != null)
        {
            if(node.parent() != null)
            {
                node.parent().removeChild(node);
            }

            node.parent(this);
        }

        this._simpleExpression_ = node;
    }

    @Override
    public String toString()
    {
        return ""
            + toString(this._orExpression_)
            + toString(this._logicalOr_)
            + toString(this._simpleExpression_);
    }

    @Override
    void removeChild(@SuppressWarnings("unused") Node child)
    {
        // Remove child
        if(this._orExpression_ == child)
        {
            this._orExpression_ = null;
            return;
        }

        if(this._logicalOr_ == child)
        {
            this._logicalOr_ = null;
            return;
        }

        if(this._simpleExpression_ == child)
        {
            this._simpleExpression_ = null;
            return;
        }

        throw new RuntimeException("Not a child.");
    }

    @Override
    void replaceChild(@SuppressWarnings("unused") Node oldChild, @SuppressWarnings("unused") Node newChild)
    {
        // Replace child
        if(this._orExpression_ == oldChild)
        {
            setOrExpression((POrExpression) newChild);
            return;
        }

        if(this._logicalOr_ == oldChild)
        {
            setLogicalOr((TLogicalOr) newChild);
            return;
        }

        if(this._simpleExpression_ == oldChild)
        {
            setSimpleExpression((PSimpleExpression) newChild);
            return;
        }

        throw new RuntimeException("Not a child.");
    }
}
