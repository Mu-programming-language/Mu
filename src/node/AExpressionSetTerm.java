/* This file was generated by SableCC (http://www.sablecc.org/). */

package node;

import analysis.*;

@SuppressWarnings("nls")
public final class AExpressionSetTerm extends PSetTerm
{
    private TLeftParenthesis _leftParenthesis_;
    private PSetExpression _setExpression_;
    private TRightParenthesis _rightParenthesis_;

    public AExpressionSetTerm()
    {
        // Constructor
    }

    public AExpressionSetTerm(
        @SuppressWarnings("hiding") TLeftParenthesis _leftParenthesis_,
        @SuppressWarnings("hiding") PSetExpression _setExpression_,
        @SuppressWarnings("hiding") TRightParenthesis _rightParenthesis_)
    {
        // Constructor
        setLeftParenthesis(_leftParenthesis_);

        setSetExpression(_setExpression_);

        setRightParenthesis(_rightParenthesis_);

    }

    @Override
    public Object clone()
    {
        return new AExpressionSetTerm(
            cloneNode(this._leftParenthesis_),
            cloneNode(this._setExpression_),
            cloneNode(this._rightParenthesis_));
    }

    @Override
    public void apply(Switch sw)
    {
        ((Analysis) sw).caseAExpressionSetTerm(this);
    }

    public TLeftParenthesis getLeftParenthesis()
    {
        return this._leftParenthesis_;
    }

    public void setLeftParenthesis(TLeftParenthesis node)
    {
        if(this._leftParenthesis_ != null)
        {
            this._leftParenthesis_.parent(null);
        }

        if(node != null)
        {
            if(node.parent() != null)
            {
                node.parent().removeChild(node);
            }

            node.parent(this);
        }

        this._leftParenthesis_ = node;
    }

    public PSetExpression getSetExpression()
    {
        return this._setExpression_;
    }

    public void setSetExpression(PSetExpression node)
    {
        if(this._setExpression_ != null)
        {
            this._setExpression_.parent(null);
        }

        if(node != null)
        {
            if(node.parent() != null)
            {
                node.parent().removeChild(node);
            }

            node.parent(this);
        }

        this._setExpression_ = node;
    }

    public TRightParenthesis getRightParenthesis()
    {
        return this._rightParenthesis_;
    }

    public void setRightParenthesis(TRightParenthesis node)
    {
        if(this._rightParenthesis_ != null)
        {
            this._rightParenthesis_.parent(null);
        }

        if(node != null)
        {
            if(node.parent() != null)
            {
                node.parent().removeChild(node);
            }

            node.parent(this);
        }

        this._rightParenthesis_ = node;
    }

    @Override
    public String toString()
    {
        return ""
            + toString(this._leftParenthesis_)
            + toString(this._setExpression_)
            + toString(this._rightParenthesis_);
    }

    @Override
    void removeChild(@SuppressWarnings("unused") Node child)
    {
        // Remove child
        if(this._leftParenthesis_ == child)
        {
            this._leftParenthesis_ = null;
            return;
        }

        if(this._setExpression_ == child)
        {
            this._setExpression_ = null;
            return;
        }

        if(this._rightParenthesis_ == child)
        {
            this._rightParenthesis_ = null;
            return;
        }

        throw new RuntimeException("Not a child.");
    }

    @Override
    void replaceChild(@SuppressWarnings("unused") Node oldChild, @SuppressWarnings("unused") Node newChild)
    {
        // Replace child
        if(this._leftParenthesis_ == oldChild)
        {
            setLeftParenthesis((TLeftParenthesis) newChild);
            return;
        }

        if(this._setExpression_ == oldChild)
        {
            setSetExpression((PSetExpression) newChild);
            return;
        }

        if(this._rightParenthesis_ == oldChild)
        {
            setRightParenthesis((TRightParenthesis) newChild);
            return;
        }

        throw new RuntimeException("Not a child.");
    }
}
