/* This file was generated by SableCC (http://www.sablecc.org/). */

package node;

import analysis.*;

@SuppressWarnings("nls")
public final class ADivisionElementFactor extends PElementFactor
{
    private PElementFactor _elementFactor_;
    private TDivision _division_;
    private PElementTerm _elementTerm_;

    public ADivisionElementFactor()
    {
        // Constructor
    }

    public ADivisionElementFactor(
        @SuppressWarnings("hiding") PElementFactor _elementFactor_,
        @SuppressWarnings("hiding") TDivision _division_,
        @SuppressWarnings("hiding") PElementTerm _elementTerm_)
    {
        // Constructor
        setElementFactor(_elementFactor_);

        setDivision(_division_);

        setElementTerm(_elementTerm_);

    }

    @Override
    public Object clone()
    {
        return new ADivisionElementFactor(
            cloneNode(this._elementFactor_),
            cloneNode(this._division_),
            cloneNode(this._elementTerm_));
    }

    @Override
    public void apply(Switch sw)
    {
        ((Analysis) sw).caseADivisionElementFactor(this);
    }

    public PElementFactor getElementFactor()
    {
        return this._elementFactor_;
    }

    public void setElementFactor(PElementFactor node)
    {
        if(this._elementFactor_ != null)
        {
            this._elementFactor_.parent(null);
        }

        if(node != null)
        {
            if(node.parent() != null)
            {
                node.parent().removeChild(node);
            }

            node.parent(this);
        }

        this._elementFactor_ = node;
    }

    public TDivision getDivision()
    {
        return this._division_;
    }

    public void setDivision(TDivision node)
    {
        if(this._division_ != null)
        {
            this._division_.parent(null);
        }

        if(node != null)
        {
            if(node.parent() != null)
            {
                node.parent().removeChild(node);
            }

            node.parent(this);
        }

        this._division_ = node;
    }

    public PElementTerm getElementTerm()
    {
        return this._elementTerm_;
    }

    public void setElementTerm(PElementTerm node)
    {
        if(this._elementTerm_ != null)
        {
            this._elementTerm_.parent(null);
        }

        if(node != null)
        {
            if(node.parent() != null)
            {
                node.parent().removeChild(node);
            }

            node.parent(this);
        }

        this._elementTerm_ = node;
    }

    @Override
    public String toString()
    {
        return ""
            + toString(this._elementFactor_)
            + toString(this._division_)
            + toString(this._elementTerm_);
    }

    @Override
    void removeChild(@SuppressWarnings("unused") Node child)
    {
        // Remove child
        if(this._elementFactor_ == child)
        {
            this._elementFactor_ = null;
            return;
        }

        if(this._division_ == child)
        {
            this._division_ = null;
            return;
        }

        if(this._elementTerm_ == child)
        {
            this._elementTerm_ = null;
            return;
        }

        throw new RuntimeException("Not a child.");
    }

    @Override
    void replaceChild(@SuppressWarnings("unused") Node oldChild, @SuppressWarnings("unused") Node newChild)
    {
        // Replace child
        if(this._elementFactor_ == oldChild)
        {
            setElementFactor((PElementFactor) newChild);
            return;
        }

        if(this._division_ == oldChild)
        {
            setDivision((TDivision) newChild);
            return;
        }

        if(this._elementTerm_ == oldChild)
        {
            setElementTerm((PElementTerm) newChild);
            return;
        }

        throw new RuntimeException("Not a child.");
    }
}
