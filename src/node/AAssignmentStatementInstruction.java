/* This file was generated by SableCC (http://www.sablecc.org/). */

package node;

import analysis.*;

@SuppressWarnings("nls")
public final class AAssignmentStatementInstruction extends PStatementInstruction
{
    private TSetIdentifier _new_;
    private TEqualTo _equalTo_;
    private TLeftBrace _leftBrace_;
    private TElementIdentifier _elementIdentifier_;
    private TElementOf _elementOf_;
    private PSetTerm _setTerm_;
    private TSuchAs _suchAs_;
    private PElementExpression _elementExpression_;
    private TRightBrace _rightBrace_;

    public AAssignmentStatementInstruction()
    {
        // Constructor
    }

    public AAssignmentStatementInstruction(
        @SuppressWarnings("hiding") TSetIdentifier _new_,
        @SuppressWarnings("hiding") TEqualTo _equalTo_,
        @SuppressWarnings("hiding") TLeftBrace _leftBrace_,
        @SuppressWarnings("hiding") TElementIdentifier _elementIdentifier_,
        @SuppressWarnings("hiding") TElementOf _elementOf_,
        @SuppressWarnings("hiding") PSetTerm _setTerm_,
        @SuppressWarnings("hiding") TSuchAs _suchAs_,
        @SuppressWarnings("hiding") PElementExpression _elementExpression_,
        @SuppressWarnings("hiding") TRightBrace _rightBrace_)
    {
        // Constructor
        setNew(_new_);

        setEqualTo(_equalTo_);

        setLeftBrace(_leftBrace_);

        setElementIdentifier(_elementIdentifier_);

        setElementOf(_elementOf_);

        setSetTerm(_setTerm_);

        setSuchAs(_suchAs_);

        setElementExpression(_elementExpression_);

        setRightBrace(_rightBrace_);

    }

    @Override
    public Object clone()
    {
        return new AAssignmentStatementInstruction(
            cloneNode(this._new_),
            cloneNode(this._equalTo_),
            cloneNode(this._leftBrace_),
            cloneNode(this._elementIdentifier_),
            cloneNode(this._elementOf_),
            cloneNode(this._setTerm_),
            cloneNode(this._suchAs_),
            cloneNode(this._elementExpression_),
            cloneNode(this._rightBrace_));
    }

    @Override
    public void apply(Switch sw)
    {
        ((Analysis) sw).caseAAssignmentStatementInstruction(this);
    }

    public TSetIdentifier getNew()
    {
        return this._new_;
    }

    public void setNew(TSetIdentifier node)
    {
        if(this._new_ != null)
        {
            this._new_.parent(null);
        }

        if(node != null)
        {
            if(node.parent() != null)
            {
                node.parent().removeChild(node);
            }

            node.parent(this);
        }

        this._new_ = node;
    }

    public TEqualTo getEqualTo()
    {
        return this._equalTo_;
    }

    public void setEqualTo(TEqualTo node)
    {
        if(this._equalTo_ != null)
        {
            this._equalTo_.parent(null);
        }

        if(node != null)
        {
            if(node.parent() != null)
            {
                node.parent().removeChild(node);
            }

            node.parent(this);
        }

        this._equalTo_ = node;
    }

    public TLeftBrace getLeftBrace()
    {
        return this._leftBrace_;
    }

    public void setLeftBrace(TLeftBrace node)
    {
        if(this._leftBrace_ != null)
        {
            this._leftBrace_.parent(null);
        }

        if(node != null)
        {
            if(node.parent() != null)
            {
                node.parent().removeChild(node);
            }

            node.parent(this);
        }

        this._leftBrace_ = node;
    }

    public TElementIdentifier getElementIdentifier()
    {
        return this._elementIdentifier_;
    }

    public void setElementIdentifier(TElementIdentifier node)
    {
        if(this._elementIdentifier_ != null)
        {
            this._elementIdentifier_.parent(null);
        }

        if(node != null)
        {
            if(node.parent() != null)
            {
                node.parent().removeChild(node);
            }

            node.parent(this);
        }

        this._elementIdentifier_ = node;
    }

    public TElementOf getElementOf()
    {
        return this._elementOf_;
    }

    public void setElementOf(TElementOf node)
    {
        if(this._elementOf_ != null)
        {
            this._elementOf_.parent(null);
        }

        if(node != null)
        {
            if(node.parent() != null)
            {
                node.parent().removeChild(node);
            }

            node.parent(this);
        }

        this._elementOf_ = node;
    }

    public PSetTerm getSetTerm()
    {
        return this._setTerm_;
    }

    public void setSetTerm(PSetTerm node)
    {
        if(this._setTerm_ != null)
        {
            this._setTerm_.parent(null);
        }

        if(node != null)
        {
            if(node.parent() != null)
            {
                node.parent().removeChild(node);
            }

            node.parent(this);
        }

        this._setTerm_ = node;
    }

    public TSuchAs getSuchAs()
    {
        return this._suchAs_;
    }

    public void setSuchAs(TSuchAs node)
    {
        if(this._suchAs_ != null)
        {
            this._suchAs_.parent(null);
        }

        if(node != null)
        {
            if(node.parent() != null)
            {
                node.parent().removeChild(node);
            }

            node.parent(this);
        }

        this._suchAs_ = node;
    }

    public PElementExpression getElementExpression()
    {
        return this._elementExpression_;
    }

    public void setElementExpression(PElementExpression node)
    {
        if(this._elementExpression_ != null)
        {
            this._elementExpression_.parent(null);
        }

        if(node != null)
        {
            if(node.parent() != null)
            {
                node.parent().removeChild(node);
            }

            node.parent(this);
        }

        this._elementExpression_ = node;
    }

    public TRightBrace getRightBrace()
    {
        return this._rightBrace_;
    }

    public void setRightBrace(TRightBrace node)
    {
        if(this._rightBrace_ != null)
        {
            this._rightBrace_.parent(null);
        }

        if(node != null)
        {
            if(node.parent() != null)
            {
                node.parent().removeChild(node);
            }

            node.parent(this);
        }

        this._rightBrace_ = node;
    }

    @Override
    public String toString()
    {
        return ""
            + toString(this._new_)
            + toString(this._equalTo_)
            + toString(this._leftBrace_)
            + toString(this._elementIdentifier_)
            + toString(this._elementOf_)
            + toString(this._setTerm_)
            + toString(this._suchAs_)
            + toString(this._elementExpression_)
            + toString(this._rightBrace_);
    }

    @Override
    void removeChild(@SuppressWarnings("unused") Node child)
    {
        // Remove child
        if(this._new_ == child)
        {
            this._new_ = null;
            return;
        }

        if(this._equalTo_ == child)
        {
            this._equalTo_ = null;
            return;
        }

        if(this._leftBrace_ == child)
        {
            this._leftBrace_ = null;
            return;
        }

        if(this._elementIdentifier_ == child)
        {
            this._elementIdentifier_ = null;
            return;
        }

        if(this._elementOf_ == child)
        {
            this._elementOf_ = null;
            return;
        }

        if(this._setTerm_ == child)
        {
            this._setTerm_ = null;
            return;
        }

        if(this._suchAs_ == child)
        {
            this._suchAs_ = null;
            return;
        }

        if(this._elementExpression_ == child)
        {
            this._elementExpression_ = null;
            return;
        }

        if(this._rightBrace_ == child)
        {
            this._rightBrace_ = null;
            return;
        }

        throw new RuntimeException("Not a child.");
    }

    @Override
    void replaceChild(@SuppressWarnings("unused") Node oldChild, @SuppressWarnings("unused") Node newChild)
    {
        // Replace child
        if(this._new_ == oldChild)
        {
            setNew((TSetIdentifier) newChild);
            return;
        }

        if(this._equalTo_ == oldChild)
        {
            setEqualTo((TEqualTo) newChild);
            return;
        }

        if(this._leftBrace_ == oldChild)
        {
            setLeftBrace((TLeftBrace) newChild);
            return;
        }

        if(this._elementIdentifier_ == oldChild)
        {
            setElementIdentifier((TElementIdentifier) newChild);
            return;
        }

        if(this._elementOf_ == oldChild)
        {
            setElementOf((TElementOf) newChild);
            return;
        }

        if(this._setTerm_ == oldChild)
        {
            setSetTerm((PSetTerm) newChild);
            return;
        }

        if(this._suchAs_ == oldChild)
        {
            setSuchAs((TSuchAs) newChild);
            return;
        }

        if(this._elementExpression_ == oldChild)
        {
            setElementExpression((PElementExpression) newChild);
            return;
        }

        if(this._rightBrace_ == oldChild)
        {
            setRightBrace((TRightBrace) newChild);
            return;
        }

        throw new RuntimeException("Not a child.");
    }
}
