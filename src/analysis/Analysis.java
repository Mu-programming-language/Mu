/* This file was generated by SableCC (http://www.sablecc.org/). */

package analysis;

import node.*;

public interface Analysis extends Switch
{
    Object getIn(Node node);
    void setIn(Node node, Object o);
    Object getOut(Node node);
    void setOut(Node node, Object o);

    void caseStart(Start node);
    void caseAProgram(AProgram node);
    void caseAInstructions(AInstructions node);
    void caseAStatementBlock(AStatementBlock node);
    void caseAQuestionBlock(AQuestionBlock node);
    void caseAProofBlock(AProofBlock node);
    void caseAStatementInstructionList(AStatementInstructionList node);
    void caseAAdditionalStatementInstruction(AAdditionalStatementInstruction node);
    void caseADeclarationStatementInstruction(ADeclarationStatementInstruction node);
    void caseAAssignmentStatementInstruction(AAssignmentStatementInstruction node);
    void caseADefinitionStatementInstruction(ADefinitionStatementInstruction node);
    void caseAQuestionInstructionList(AQuestionInstructionList node);
    void caseAAdditionalQuestionInstruction(AAdditionalQuestionInstruction node);
    void caseAQuestionInstruction(AQuestionInstruction node);
    void caseAProofInstructionList(AProofInstructionList node);
    void caseAAdditionalProofInstruction(AAdditionalProofInstruction node);
    void caseAProofInstruction(AProofInstruction node);
    void caseADemonstration(ADemonstration node);
    void caseAPropositionList(APropositionList node);
    void caseAImplicationAdditionalProposition(AImplicationAdditionalProposition node);
    void caseAEquivalenceAdditionalProposition(AEquivalenceAdditionalProposition node);
    void caseAExpressionProposition(AExpressionProposition node);
    void caseAForAllProposition(AForAllProposition node);
    void caseAExistProposition(AExistProposition node);
    void caseAExpressionExpression(AExpressionExpression node);
    void caseASetExpressionExpression(ASetExpressionExpression node);
    void caseAElementExpressionExpression(AElementExpressionExpression node);
    void caseAComparisonSetExpression(AComparisonSetExpression node);
    void caseALogicalAndSetExpression(ALogicalAndSetExpression node);
    void caseALogicalOrSetExpression(ALogicalOrSetExpression node);
    void caseAArithmeticSetComparison(AArithmeticSetComparison node);
    void caseAEqualToSetComparison(AEqualToSetComparison node);
    void caseANotEqualToSetComparison(ANotEqualToSetComparison node);
    void caseASubsetOfSetComparison(ASubsetOfSetComparison node);
    void caseANotASubsetOfSetComparison(ANotASubsetOfSetComparison node);
    void caseASupersetOfSetComparison(ASupersetOfSetComparison node);
    void caseANotASupersetOfSetComparison(ANotASupersetOfSetComparison node);
    void caseAFactorSetArithmetic(AFactorSetArithmetic node);
    void caseAPlusSetArithmetic(APlusSetArithmetic node);
    void caseADeprivedOfSetArithmetic(ADeprivedOfSetArithmetic node);
    void caseATermSetFactor(ATermSetFactor node);
    void caseAMultSetFactor(AMultSetFactor node);
    void caseATermSetExponent(ATermSetExponent node);
    void caseAExpSetExponent(AExpSetExponent node);
    void caseASetSetTerm(ASetSetTerm node);
    void caseAExpressionSetTerm(AExpressionSetTerm node);
    void caseAComparisonElementExpression(AComparisonElementExpression node);
    void caseALogicalAndElementExpression(ALogicalAndElementExpression node);
    void caseALogicalOrElementExpression(ALogicalOrElementExpression node);
    void caseAArithmeticElementComparison(AArithmeticElementComparison node);
    void caseAEqualToElementComparison(AEqualToElementComparison node);
    void caseANotEqualToElementComparison(ANotEqualToElementComparison node);
    void caseAGreaterThanElementComparison(AGreaterThanElementComparison node);
    void caseANotGreaterThanElementComparison(ANotGreaterThanElementComparison node);
    void caseALessThanElementComparison(ALessThanElementComparison node);
    void caseANotLessThanElementComparison(ANotLessThanElementComparison node);
    void caseAGreaterThanOrEqualToElementComparison(AGreaterThanOrEqualToElementComparison node);
    void caseANeitherGreaterThanNorEqualToElementComparison(ANeitherGreaterThanNorEqualToElementComparison node);
    void caseALessThanOrEqualToElementComparison(ALessThanOrEqualToElementComparison node);
    void caseANeitherLessThanNorEqualToElementComparison(ANeitherLessThanNorEqualToElementComparison node);
    void caseAFactorElementArithmetic(AFactorElementArithmetic node);
    void caseAPlusElementArithmetic(APlusElementArithmetic node);
    void caseAMinusElementArithmetic(AMinusElementArithmetic node);
    void caseATermElementFactor(ATermElementFactor node);
    void caseAMultiplicationElementFactor(AMultiplicationElementFactor node);
    void caseADivisionElementFactor(ADivisionElementFactor node);
    void caseAModuloElementFactor(AModuloElementFactor node);
    void caseANumberElementTerm(ANumberElementTerm node);
    void caseAElementElementTerm(AElementElementTerm node);
    void caseAExpressionElementTerm(AExpressionElementTerm node);

    void caseTCategory(TCategory node);
    void caseTProof(TProof node);
    void caseTStatement(TStatement node);
    void caseTQuestion(TQuestion node);
    void caseTLet(TLet node);
    void caseTDone(TDone node);
    void caseTShow(TShow node);
    void caseTDeprivedOf(TDeprivedOf node);
    void caseTNot(TNot node);
    void caseTEmptySet(TEmptySet node);
    void caseTMultiplication(TMultiplication node);
    void caseTDivision(TDivision node);
    void caseTModulo(TModulo node);
    void caseTPlus(TPlus node);
    void caseTMinus(TMinus node);
    void caseTPower(TPower node);
    void caseTForAll(TForAll node);
    void caseTExist(TExist node);
    void caseTSuchAs(TSuchAs node);
    void caseTComma(TComma node);
    void caseTSemicolon(TSemicolon node);
    void caseTColumn(TColumn node);
    void caseTDiesis(TDiesis node);
    void caseTImplicationSign(TImplicationSign node);
    void caseTEquivalenceSign(TEquivalenceSign node);
    void caseTLogicalAnd(TLogicalAnd node);
    void caseTLogicalOr(TLogicalOr node);
    void caseTUnion(TUnion node);
    void caseTIntersection(TIntersection node);
    void caseTSubsetOf(TSubsetOf node);
    void caseTSupersetOf(TSupersetOf node);
    void caseTNotASubsetOf(TNotASubsetOf node);
    void caseTNotASupersetOf(TNotASupersetOf node);
    void caseTElementOf(TElementOf node);
    void caseTContainsAsMember(TContainsAsMember node);
    void caseTNotAnElementOf(TNotAnElementOf node);
    void caseTDoesNotContainAsMember(TDoesNotContainAsMember node);
    void caseTLeftBrace(TLeftBrace node);
    void caseTRightBrace(TRightBrace node);
    void caseTLeftParenthesis(TLeftParenthesis node);
    void caseTRightParenthesis(TRightParenthesis node);
    void caseTLelftBracket(TLelftBracket node);
    void caseTRightBracket(TRightBracket node);
    void caseTEqualTo(TEqualTo node);
    void caseTGreaterThan(TGreaterThan node);
    void caseTLessThan(TLessThan node);
    void caseTGreaterThanOrEqualTo(TGreaterThanOrEqualTo node);
    void caseTLessThanOrEqualTo(TLessThanOrEqualTo node);
    void caseTNotEqualTo(TNotEqualTo node);
    void caseTNotGreaterThan(TNotGreaterThan node);
    void caseTNotLessThan(TNotLessThan node);
    void caseTNeitherGreaterThanNorEqualTo(TNeitherGreaterThanNorEqualTo node);
    void caseTNeitherLessThanNorEqualTo(TNeitherLessThanNorEqualTo node);
    void caseTTagNumber(TTagNumber node);
    void caseTNumber(TNumber node);
    void caseTSetIdentifier(TSetIdentifier node);
    void caseTElementIdentifier(TElementIdentifier node);
    void caseTString(TString node);
    void caseTBlank(TBlank node);
    void caseTShortComment(TShortComment node);
    void caseTLongComment(TLongComment node);
    void caseEOF(EOF node);
    void caseInvalidToken(InvalidToken node);
}
