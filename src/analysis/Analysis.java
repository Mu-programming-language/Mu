/* This file was generated by SableCC (http://www.sablecc.org/). */

package analysis;

import node.*;

public interface Analysis extends Switch
{
    Object getIn(Node node);
    void setIn(Node node, Object o);
    Object getOut(Node node);
    void setOut(Node node, Object o);

    void caseStart(Start node);
    void caseAProgram(AProgram node);
    void caseABlock(ABlock node);
    void caseAComparisonExpression(AComparisonExpression node);
    void caseALogicalAndExpression(ALogicalAndExpression node);
    void caseALogicalOrExpression(ALogicalOrExpression node);
    void caseAArithmeticComparison(AArithmeticComparison node);
    void caseAEqualToComparison(AEqualToComparison node);
    void caseAGreaterThanComparison(AGreaterThanComparison node);
    void caseALessThanComparison(ALessThanComparison node);
    void caseAGreaterThanOrEqualToComparison(AGreaterThanOrEqualToComparison node);
    void caseALessThanOrEqualToComparison(ALessThanOrEqualToComparison node);
    void caseANotEqualToComparison(ANotEqualToComparison node);
    void caseANotGreaterThanComparison(ANotGreaterThanComparison node);
    void caseANotLessThanComparison(ANotLessThanComparison node);
    void caseANeitherGreaterThanNorEqualToComparison(ANeitherGreaterThanNorEqualToComparison node);
    void caseANeitherLessThanNorEqualToComparison(ANeitherLessThanNorEqualToComparison node);
    void caseAFactorArithmetic(AFactorArithmetic node);
    void caseAPlusArithmetic(APlusArithmetic node);
    void caseAMinusArithmetic(AMinusArithmetic node);
    void caseATermFactor(ATermFactor node);
    void caseAMultiplicationFactor(AMultiplicationFactor node);
    void caseADivisionFactor(ADivisionFactor node);
    void caseAModuloFactor(AModuloFactor node);
    void caseANumberTerm(ANumberTerm node);
    void caseAElementTerm(AElementTerm node);
    void caseAExpressionTerm(AExpressionTerm node);

    void caseTLet(TLet node);
    void caseTProof(TProof node);
    void caseTStatement(TStatement node);
    void caseTNot(TNot node);
    void caseTEmptySet(TEmptySet node);
    void caseTMultiplication(TMultiplication node);
    void caseTDivision(TDivision node);
    void caseTModulo(TModulo node);
    void caseTPlus(TPlus node);
    void caseTMinus(TMinus node);
    void caseTForAll(TForAll node);
    void caseTExist(TExist node);
    void caseTSuchAs(TSuchAs node);
    void caseTComma(TComma node);
    void caseTSemicolon(TSemicolon node);
    void caseTLogicalAnd(TLogicalAnd node);
    void caseTLogicalOr(TLogicalOr node);
    void caseTUnion(TUnion node);
    void caseTIntersection(TIntersection node);
    void caseTSubsetOf(TSubsetOf node);
    void caseTSupersetOf(TSupersetOf node);
    void caseTElementOf(TElementOf node);
    void caseTContainsAsMember(TContainsAsMember node);
    void caseTLeftBrace(TLeftBrace node);
    void caseTRightBrace(TRightBrace node);
    void caseTLeftParenthesis(TLeftParenthesis node);
    void caseTRightParenthesis(TRightParenthesis node);
    void caseTLelftBracket(TLelftBracket node);
    void caseTRightBracket(TRightBracket node);
    void caseTEqualTo(TEqualTo node);
    void caseTGreaterThan(TGreaterThan node);
    void caseTLessThan(TLessThan node);
    void caseTGreaterThanOrEqualTo(TGreaterThanOrEqualTo node);
    void caseTLessThanOrEqualTo(TLessThanOrEqualTo node);
    void caseTNotEqualTo(TNotEqualTo node);
    void caseTNotGreaterThan(TNotGreaterThan node);
    void caseTNotLessThan(TNotLessThan node);
    void caseTNeitherGreaterThanNorEqualTo(TNeitherGreaterThanNorEqualTo node);
    void caseTNeitherLessThanNorEqualTo(TNeitherLessThanNorEqualTo node);
    void caseTSet(TSet node);
    void caseTElement(TElement node);
    void caseTNumber(TNumber node);
    void caseTIdentifier(TIdentifier node);
    void caseTBlank(TBlank node);
    void caseTShortComment(TShortComment node);
    void caseTLongComment(TLongComment node);
    void caseEOF(EOF node);
    void caseInvalidToken(InvalidToken node);
}
