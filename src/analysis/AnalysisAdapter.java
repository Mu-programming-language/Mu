/* This file was generated by SableCC (http://www.sablecc.org/). */

package analysis;

import java.util.*;
import node.*;

public class AnalysisAdapter implements Analysis
{
    private Hashtable<Node,Object> in;
    private Hashtable<Node,Object> out;

    @Override
    public Object getIn(Node node)
    {
        if(this.in == null)
        {
            return null;
        }

        return this.in.get(node);
    }

    @Override
    public void setIn(Node node, Object o)
    {
        if(this.in == null)
        {
            this.in = new Hashtable<Node,Object>(1);
        }

        if(o != null)
        {
            this.in.put(node, o);
        }
        else
        {
            this.in.remove(node);
        }
    }

    @Override
    public Object getOut(Node node)
    {
        if(this.out == null)
        {
            return null;
        }

        return this.out.get(node);
    }

    @Override
    public void setOut(Node node, Object o)
    {
        if(this.out == null)
        {
            this.out = new Hashtable<Node,Object>(1);
        }

        if(o != null)
        {
            this.out.put(node, o);
        }
        else
        {
            this.out.remove(node);
        }
    }

    @Override
    public void caseStart(Start node)
    {
        defaultCase(node);
    }

    @Override
    public void caseAProgram(AProgram node)
    {
        defaultCase(node);
    }

    @Override
    public void caseABlock(ABlock node)
    {
        defaultCase(node);
    }

    @Override
    public void caseAComparisonExpression(AComparisonExpression node)
    {
        defaultCase(node);
    }

    @Override
    public void caseALogicalAndExpression(ALogicalAndExpression node)
    {
        defaultCase(node);
    }

    @Override
    public void caseALogicalOrExpression(ALogicalOrExpression node)
    {
        defaultCase(node);
    }

    @Override
    public void caseAArithmeticComparison(AArithmeticComparison node)
    {
        defaultCase(node);
    }

    @Override
    public void caseAEqualToComparison(AEqualToComparison node)
    {
        defaultCase(node);
    }

    @Override
    public void caseAGreaterThanComparison(AGreaterThanComparison node)
    {
        defaultCase(node);
    }

    @Override
    public void caseALessThanComparison(ALessThanComparison node)
    {
        defaultCase(node);
    }

    @Override
    public void caseAGreaterThanOrEqualToComparison(AGreaterThanOrEqualToComparison node)
    {
        defaultCase(node);
    }

    @Override
    public void caseALessThanOrEqualToComparison(ALessThanOrEqualToComparison node)
    {
        defaultCase(node);
    }

    @Override
    public void caseANotEqualToComparison(ANotEqualToComparison node)
    {
        defaultCase(node);
    }

    @Override
    public void caseANotGreaterThanComparison(ANotGreaterThanComparison node)
    {
        defaultCase(node);
    }

    @Override
    public void caseANotLessThanComparison(ANotLessThanComparison node)
    {
        defaultCase(node);
    }

    @Override
    public void caseANeitherGreaterThanNorEqualToComparison(ANeitherGreaterThanNorEqualToComparison node)
    {
        defaultCase(node);
    }

    @Override
    public void caseANeitherLessThanNorEqualToComparison(ANeitherLessThanNorEqualToComparison node)
    {
        defaultCase(node);
    }

    @Override
    public void caseAFactorArithmetic(AFactorArithmetic node)
    {
        defaultCase(node);
    }

    @Override
    public void caseAPlusArithmetic(APlusArithmetic node)
    {
        defaultCase(node);
    }

    @Override
    public void caseAMinusArithmetic(AMinusArithmetic node)
    {
        defaultCase(node);
    }

    @Override
    public void caseATermFactor(ATermFactor node)
    {
        defaultCase(node);
    }

    @Override
    public void caseAMultiplicationFactor(AMultiplicationFactor node)
    {
        defaultCase(node);
    }

    @Override
    public void caseADivisionFactor(ADivisionFactor node)
    {
        defaultCase(node);
    }

    @Override
    public void caseAModuloFactor(AModuloFactor node)
    {
        defaultCase(node);
    }

    @Override
    public void caseANumberTerm(ANumberTerm node)
    {
        defaultCase(node);
    }

    @Override
    public void caseAElementTerm(AElementTerm node)
    {
        defaultCase(node);
    }

    @Override
    public void caseAExpressionTerm(AExpressionTerm node)
    {
        defaultCase(node);
    }

    @Override
    public void caseTLet(TLet node)
    {
        defaultCase(node);
    }

    @Override
    public void caseTProof(TProof node)
    {
        defaultCase(node);
    }

    @Override
    public void caseTStatement(TStatement node)
    {
        defaultCase(node);
    }

    @Override
    public void caseTNot(TNot node)
    {
        defaultCase(node);
    }

    @Override
    public void caseTEmptySet(TEmptySet node)
    {
        defaultCase(node);
    }

    @Override
    public void caseTMultiplication(TMultiplication node)
    {
        defaultCase(node);
    }

    @Override
    public void caseTDivision(TDivision node)
    {
        defaultCase(node);
    }

    @Override
    public void caseTModulo(TModulo node)
    {
        defaultCase(node);
    }

    @Override
    public void caseTPlus(TPlus node)
    {
        defaultCase(node);
    }

    @Override
    public void caseTMinus(TMinus node)
    {
        defaultCase(node);
    }

    @Override
    public void caseTForAll(TForAll node)
    {
        defaultCase(node);
    }

    @Override
    public void caseTExist(TExist node)
    {
        defaultCase(node);
    }

    @Override
    public void caseTSuchAs(TSuchAs node)
    {
        defaultCase(node);
    }

    @Override
    public void caseTComma(TComma node)
    {
        defaultCase(node);
    }

    @Override
    public void caseTSemicolon(TSemicolon node)
    {
        defaultCase(node);
    }

    @Override
    public void caseTLogicalAnd(TLogicalAnd node)
    {
        defaultCase(node);
    }

    @Override
    public void caseTLogicalOr(TLogicalOr node)
    {
        defaultCase(node);
    }

    @Override
    public void caseTUnion(TUnion node)
    {
        defaultCase(node);
    }

    @Override
    public void caseTIntersection(TIntersection node)
    {
        defaultCase(node);
    }

    @Override
    public void caseTSubsetOf(TSubsetOf node)
    {
        defaultCase(node);
    }

    @Override
    public void caseTSupersetOf(TSupersetOf node)
    {
        defaultCase(node);
    }

    @Override
    public void caseTElementOf(TElementOf node)
    {
        defaultCase(node);
    }

    @Override
    public void caseTContainsAsMember(TContainsAsMember node)
    {
        defaultCase(node);
    }

    @Override
    public void caseTLeftBrace(TLeftBrace node)
    {
        defaultCase(node);
    }

    @Override
    public void caseTRightBrace(TRightBrace node)
    {
        defaultCase(node);
    }

    @Override
    public void caseTLeftParenthesis(TLeftParenthesis node)
    {
        defaultCase(node);
    }

    @Override
    public void caseTRightParenthesis(TRightParenthesis node)
    {
        defaultCase(node);
    }

    @Override
    public void caseTLelftBracket(TLelftBracket node)
    {
        defaultCase(node);
    }

    @Override
    public void caseTRightBracket(TRightBracket node)
    {
        defaultCase(node);
    }

    @Override
    public void caseTEqualTo(TEqualTo node)
    {
        defaultCase(node);
    }

    @Override
    public void caseTGreaterThan(TGreaterThan node)
    {
        defaultCase(node);
    }

    @Override
    public void caseTLessThan(TLessThan node)
    {
        defaultCase(node);
    }

    @Override
    public void caseTGreaterThanOrEqualTo(TGreaterThanOrEqualTo node)
    {
        defaultCase(node);
    }

    @Override
    public void caseTLessThanOrEqualTo(TLessThanOrEqualTo node)
    {
        defaultCase(node);
    }

    @Override
    public void caseTNotEqualTo(TNotEqualTo node)
    {
        defaultCase(node);
    }

    @Override
    public void caseTNotGreaterThan(TNotGreaterThan node)
    {
        defaultCase(node);
    }

    @Override
    public void caseTNotLessThan(TNotLessThan node)
    {
        defaultCase(node);
    }

    @Override
    public void caseTNeitherGreaterThanNorEqualTo(TNeitherGreaterThanNorEqualTo node)
    {
        defaultCase(node);
    }

    @Override
    public void caseTNeitherLessThanNorEqualTo(TNeitherLessThanNorEqualTo node)
    {
        defaultCase(node);
    }

    @Override
    public void caseTSet(TSet node)
    {
        defaultCase(node);
    }

    @Override
    public void caseTElement(TElement node)
    {
        defaultCase(node);
    }

    @Override
    public void caseTNumber(TNumber node)
    {
        defaultCase(node);
    }

    @Override
    public void caseTIdentifier(TIdentifier node)
    {
        defaultCase(node);
    }

    @Override
    public void caseTBlank(TBlank node)
    {
        defaultCase(node);
    }

    @Override
    public void caseTShortComment(TShortComment node)
    {
        defaultCase(node);
    }

    @Override
    public void caseTLongComment(TLongComment node)
    {
        defaultCase(node);
    }

    @Override
    public void caseEOF(EOF node)
    {
        defaultCase(node);
    }

    @Override
    public void caseInvalidToken(InvalidToken node)
    {
        defaultCase(node);
    }

    public void defaultCase(@SuppressWarnings("unused") Node node)
    {
        // do nothing
    }
}
