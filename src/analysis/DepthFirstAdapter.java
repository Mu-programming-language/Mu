/* This file was generated by SableCC (http://www.sablecc.org/). */

package analysis;

import java.util.*;
import node.*;

public class DepthFirstAdapter extends AnalysisAdapter
{
    public void inStart(Start node)
    {
        defaultIn(node);
    }

    public void outStart(Start node)
    {
        defaultOut(node);
    }

    public void defaultIn(@SuppressWarnings("unused") Node node)
    {
        // Do nothing
    }

    public void defaultOut(@SuppressWarnings("unused") Node node)
    {
        // Do nothing
    }

    @Override
    public void caseStart(Start node)
    {
        inStart(node);
        node.getPProgram().apply(this);
        node.getEOF().apply(this);
        outStart(node);
    }

    public void inAProgram(AProgram node)
    {
        defaultIn(node);
    }

    public void outAProgram(AProgram node)
    {
        defaultOut(node);
    }

    @Override
    public void caseAProgram(AProgram node)
    {
        inAProgram(node);
        if(node.getCategory() != null)
        {
            node.getCategory().apply(this);
        }
        if(node.getSemicolon() != null)
        {
            node.getSemicolon().apply(this);
        }
        if(node.getInstructions() != null)
        {
            node.getInstructions().apply(this);
        }
        outAProgram(node);
    }

    public void inAInstructions(AInstructions node)
    {
        defaultIn(node);
    }

    public void outAInstructions(AInstructions node)
    {
        defaultOut(node);
    }

    @Override
    public void caseAInstructions(AInstructions node)
    {
        inAInstructions(node);
        if(node.getStatementBlock() != null)
        {
            node.getStatementBlock().apply(this);
        }
        if(node.getQuestionBlock() != null)
        {
            node.getQuestionBlock().apply(this);
        }
        if(node.getProofBlock() != null)
        {
            node.getProofBlock().apply(this);
        }
        outAInstructions(node);
    }

    public void inAStatementBlock(AStatementBlock node)
    {
        defaultIn(node);
    }

    public void outAStatementBlock(AStatementBlock node)
    {
        defaultOut(node);
    }

    @Override
    public void caseAStatementBlock(AStatementBlock node)
    {
        inAStatementBlock(node);
        if(node.getStatement() != null)
        {
            node.getStatement().apply(this);
        }
        if(node.getColumn() != null)
        {
            node.getColumn().apply(this);
        }
        if(node.getStatementInstructionList() != null)
        {
            node.getStatementInstructionList().apply(this);
        }
        outAStatementBlock(node);
    }

    public void inAQuestionBlock(AQuestionBlock node)
    {
        defaultIn(node);
    }

    public void outAQuestionBlock(AQuestionBlock node)
    {
        defaultOut(node);
    }

    @Override
    public void caseAQuestionBlock(AQuestionBlock node)
    {
        inAQuestionBlock(node);
        if(node.getQuestion() != null)
        {
            node.getQuestion().apply(this);
        }
        if(node.getColumn() != null)
        {
            node.getColumn().apply(this);
        }
        if(node.getQuestionInstructionList() != null)
        {
            node.getQuestionInstructionList().apply(this);
        }
        outAQuestionBlock(node);
    }

    public void inAProofBlock(AProofBlock node)
    {
        defaultIn(node);
    }

    public void outAProofBlock(AProofBlock node)
    {
        defaultOut(node);
    }

    @Override
    public void caseAProofBlock(AProofBlock node)
    {
        inAProofBlock(node);
        if(node.getProof() != null)
        {
            node.getProof().apply(this);
        }
        if(node.getColumn() != null)
        {
            node.getColumn().apply(this);
        }
        if(node.getProofInstructionList() != null)
        {
            node.getProofInstructionList().apply(this);
        }
        outAProofBlock(node);
    }

    public void inAStatementInstructionList(AStatementInstructionList node)
    {
        defaultIn(node);
    }

    public void outAStatementInstructionList(AStatementInstructionList node)
    {
        defaultOut(node);
    }

    @Override
    public void caseAStatementInstructionList(AStatementInstructionList node)
    {
        inAStatementInstructionList(node);
        if(node.getStatementInstruction() != null)
        {
            node.getStatementInstruction().apply(this);
        }
        {
            List<PAdditionalStatementInstruction> copy = new ArrayList<PAdditionalStatementInstruction>(node.getAdditionalStatementInstruction());
            for(PAdditionalStatementInstruction e : copy)
            {
                e.apply(this);
            }
        }
        if(node.getSemicolon() != null)
        {
            node.getSemicolon().apply(this);
        }
        outAStatementInstructionList(node);
    }

    public void inAAdditionalStatementInstruction(AAdditionalStatementInstruction node)
    {
        defaultIn(node);
    }

    public void outAAdditionalStatementInstruction(AAdditionalStatementInstruction node)
    {
        defaultOut(node);
    }

    @Override
    public void caseAAdditionalStatementInstruction(AAdditionalStatementInstruction node)
    {
        inAAdditionalStatementInstruction(node);
        if(node.getComma() != null)
        {
            node.getComma().apply(this);
        }
        if(node.getStatementInstruction() != null)
        {
            node.getStatementInstruction().apply(this);
        }
        outAAdditionalStatementInstruction(node);
    }

    public void inADeclarationStatementInstruction(ADeclarationStatementInstruction node)
    {
        defaultIn(node);
    }

    public void outADeclarationStatementInstruction(ADeclarationStatementInstruction node)
    {
        defaultOut(node);
    }

    @Override
    public void caseADeclarationStatementInstruction(ADeclarationStatementInstruction node)
    {
        inADeclarationStatementInstruction(node);
        if(node.getLet() != null)
        {
            node.getLet().apply(this);
        }
        if(node.getSetIdentifier() != null)
        {
            node.getSetIdentifier().apply(this);
        }
        outADeclarationStatementInstruction(node);
    }

    public void inAAssignmentStatementInstruction(AAssignmentStatementInstruction node)
    {
        defaultIn(node);
    }

    public void outAAssignmentStatementInstruction(AAssignmentStatementInstruction node)
    {
        defaultOut(node);
    }

    @Override
    public void caseAAssignmentStatementInstruction(AAssignmentStatementInstruction node)
    {
        inAAssignmentStatementInstruction(node);
        if(node.getNew() != null)
        {
            node.getNew().apply(this);
        }
        if(node.getEqualTo() != null)
        {
            node.getEqualTo().apply(this);
        }
        if(node.getLeftBrace() != null)
        {
            node.getLeftBrace().apply(this);
        }
        if(node.getElementIdentifier() != null)
        {
            node.getElementIdentifier().apply(this);
        }
        if(node.getElementOf() != null)
        {
            node.getElementOf().apply(this);
        }
        if(node.getSetIdentifier() != null)
        {
            node.getSetIdentifier().apply(this);
        }
        if(node.getSuchAs() != null)
        {
            node.getSuchAs().apply(this);
        }
        if(node.getElementExpression() != null)
        {
            node.getElementExpression().apply(this);
        }
        if(node.getRightBrace() != null)
        {
            node.getRightBrace().apply(this);
        }
        outAAssignmentStatementInstruction(node);
    }

    public void inADefinitionStatementInstruction(ADefinitionStatementInstruction node)
    {
        defaultIn(node);
    }

    public void outADefinitionStatementInstruction(ADefinitionStatementInstruction node)
    {
        defaultOut(node);
    }

    @Override
    public void caseADefinitionStatementInstruction(ADefinitionStatementInstruction node)
    {
        inADefinitionStatementInstruction(node);
        if(node.getLet() != null)
        {
            node.getLet().apply(this);
        }
        if(node.getNew() != null)
        {
            node.getNew().apply(this);
        }
        if(node.getEqualTo() != null)
        {
            node.getEqualTo().apply(this);
        }
        if(node.getLeftBrace() != null)
        {
            node.getLeftBrace().apply(this);
        }
        if(node.getElementIdentifier() != null)
        {
            node.getElementIdentifier().apply(this);
        }
        if(node.getElementOf() != null)
        {
            node.getElementOf().apply(this);
        }
        if(node.getSetIdentifier() != null)
        {
            node.getSetIdentifier().apply(this);
        }
        if(node.getSuchAs() != null)
        {
            node.getSuchAs().apply(this);
        }
        if(node.getElementExpression() != null)
        {
            node.getElementExpression().apply(this);
        }
        if(node.getRightBrace() != null)
        {
            node.getRightBrace().apply(this);
        }
        outADefinitionStatementInstruction(node);
    }

    public void inAQuestionInstructionList(AQuestionInstructionList node)
    {
        defaultIn(node);
    }

    public void outAQuestionInstructionList(AQuestionInstructionList node)
    {
        defaultOut(node);
    }

    @Override
    public void caseAQuestionInstructionList(AQuestionInstructionList node)
    {
        inAQuestionInstructionList(node);
        if(node.getQuestionInstruction() != null)
        {
            node.getQuestionInstruction().apply(this);
        }
        {
            List<PAdditionalQuestionInstruction> copy = new ArrayList<PAdditionalQuestionInstruction>(node.getAdditionalQuestionInstruction());
            for(PAdditionalQuestionInstruction e : copy)
            {
                e.apply(this);
            }
        }
        if(node.getSemicolon() != null)
        {
            node.getSemicolon().apply(this);
        }
        outAQuestionInstructionList(node);
    }

    public void inAAdditionalQuestionInstruction(AAdditionalQuestionInstruction node)
    {
        defaultIn(node);
    }

    public void outAAdditionalQuestionInstruction(AAdditionalQuestionInstruction node)
    {
        defaultOut(node);
    }

    @Override
    public void caseAAdditionalQuestionInstruction(AAdditionalQuestionInstruction node)
    {
        inAAdditionalQuestionInstruction(node);
        if(node.getComma() != null)
        {
            node.getComma().apply(this);
        }
        if(node.getQuestionInstruction() != null)
        {
            node.getQuestionInstruction().apply(this);
        }
        outAAdditionalQuestionInstruction(node);
    }

    public void inAQuestionInstruction(AQuestionInstruction node)
    {
        defaultIn(node);
    }

    public void outAQuestionInstruction(AQuestionInstruction node)
    {
        defaultOut(node);
    }

    @Override
    public void caseAQuestionInstruction(AQuestionInstruction node)
    {
        inAQuestionInstruction(node);
        if(node.getTagNumber() != null)
        {
            node.getTagNumber().apply(this);
        }
        if(node.getColumn() != null)
        {
            node.getColumn().apply(this);
        }
        if(node.getShow() != null)
        {
            node.getShow().apply(this);
        }
        if(node.getSetExpression() != null)
        {
            node.getSetExpression().apply(this);
        }
        outAQuestionInstruction(node);
    }

    public void inAProofInstructionList(AProofInstructionList node)
    {
        defaultIn(node);
    }

    public void outAProofInstructionList(AProofInstructionList node)
    {
        defaultOut(node);
    }

    @Override
    public void caseAProofInstructionList(AProofInstructionList node)
    {
        inAProofInstructionList(node);
        if(node.getProofInstruction() != null)
        {
            node.getProofInstruction().apply(this);
        }
        {
            List<PAdditionalProofInstruction> copy = new ArrayList<PAdditionalProofInstruction>(node.getAdditionalProofInstruction());
            for(PAdditionalProofInstruction e : copy)
            {
                e.apply(this);
            }
        }
        outAProofInstructionList(node);
    }

    public void inAAdditionalProofInstruction(AAdditionalProofInstruction node)
    {
        defaultIn(node);
    }

    public void outAAdditionalProofInstruction(AAdditionalProofInstruction node)
    {
        defaultOut(node);
    }

    @Override
    public void caseAAdditionalProofInstruction(AAdditionalProofInstruction node)
    {
        inAAdditionalProofInstruction(node);
        if(node.getProofInstruction() != null)
        {
            node.getProofInstruction().apply(this);
        }
        outAAdditionalProofInstruction(node);
    }

    public void inAProofInstruction(AProofInstruction node)
    {
        defaultIn(node);
    }

    public void outAProofInstruction(AProofInstruction node)
    {
        defaultOut(node);
    }

    @Override
    public void caseAProofInstruction(AProofInstruction node)
    {
        inAProofInstruction(node);
        if(node.getTagNumber() != null)
        {
            node.getTagNumber().apply(this);
        }
        if(node.getColumn() != null)
        {
            node.getColumn().apply(this);
        }
        if(node.getDemonstration() != null)
        {
            node.getDemonstration().apply(this);
        }
        if(node.getDone() != null)
        {
            node.getDone().apply(this);
        }
        if(node.getSemicolon() != null)
        {
            node.getSemicolon().apply(this);
        }
        outAProofInstruction(node);
    }

    public void inADemonstration(ADemonstration node)
    {
        defaultIn(node);
    }

    public void outADemonstration(ADemonstration node)
    {
        defaultOut(node);
    }

    @Override
    public void caseADemonstration(ADemonstration node)
    {
        inADemonstration(node);
        {
            List<PPropositionList> copy = new ArrayList<PPropositionList>(node.getPropositionList());
            for(PPropositionList e : copy)
            {
                e.apply(this);
            }
        }
        outADemonstration(node);
    }

    public void inAPropositionList(APropositionList node)
    {
        defaultIn(node);
    }

    public void outAPropositionList(APropositionList node)
    {
        defaultOut(node);
    }

    @Override
    public void caseAPropositionList(APropositionList node)
    {
        inAPropositionList(node);
        if(node.getProposition() != null)
        {
            node.getProposition().apply(this);
        }
        {
            List<PAdditionalProposition> copy = new ArrayList<PAdditionalProposition>(node.getAdditionalProposition());
            for(PAdditionalProposition e : copy)
            {
                e.apply(this);
            }
        }
        if(node.getSemicolon() != null)
        {
            node.getSemicolon().apply(this);
        }
        outAPropositionList(node);
    }

    public void inAImplicationAdditionalProposition(AImplicationAdditionalProposition node)
    {
        defaultIn(node);
    }

    public void outAImplicationAdditionalProposition(AImplicationAdditionalProposition node)
    {
        defaultOut(node);
    }

    @Override
    public void caseAImplicationAdditionalProposition(AImplicationAdditionalProposition node)
    {
        inAImplicationAdditionalProposition(node);
        if(node.getImplicationSign() != null)
        {
            node.getImplicationSign().apply(this);
        }
        if(node.getProposition() != null)
        {
            node.getProposition().apply(this);
        }
        outAImplicationAdditionalProposition(node);
    }

    public void inAEquivalenceAdditionalProposition(AEquivalenceAdditionalProposition node)
    {
        defaultIn(node);
    }

    public void outAEquivalenceAdditionalProposition(AEquivalenceAdditionalProposition node)
    {
        defaultOut(node);
    }

    @Override
    public void caseAEquivalenceAdditionalProposition(AEquivalenceAdditionalProposition node)
    {
        inAEquivalenceAdditionalProposition(node);
        if(node.getEquivalenceSign() != null)
        {
            node.getEquivalenceSign().apply(this);
        }
        if(node.getProposition() != null)
        {
            node.getProposition().apply(this);
        }
        outAEquivalenceAdditionalProposition(node);
    }

    public void inAExpressionProposition(AExpressionProposition node)
    {
        defaultIn(node);
    }

    public void outAExpressionProposition(AExpressionProposition node)
    {
        defaultOut(node);
    }

    @Override
    public void caseAExpressionProposition(AExpressionProposition node)
    {
        inAExpressionProposition(node);
        if(node.getExpression() != null)
        {
            node.getExpression().apply(this);
        }
        outAExpressionProposition(node);
    }

    public void inAForAllProposition(AForAllProposition node)
    {
        defaultIn(node);
    }

    public void outAForAllProposition(AForAllProposition node)
    {
        defaultOut(node);
    }

    @Override
    public void caseAForAllProposition(AForAllProposition node)
    {
        inAForAllProposition(node);
        if(node.getForAll() != null)
        {
            node.getForAll().apply(this);
        }
        if(node.getElementIdentifier() != null)
        {
            node.getElementIdentifier().apply(this);
        }
        if(node.getElementOf() != null)
        {
            node.getElementOf().apply(this);
        }
        if(node.getSetIdentifier() != null)
        {
            node.getSetIdentifier().apply(this);
        }
        if(node.getComma() != null)
        {
            node.getComma().apply(this);
        }
        if(node.getExpression() != null)
        {
            node.getExpression().apply(this);
        }
        outAForAllProposition(node);
    }

    public void inAExistProposition(AExistProposition node)
    {
        defaultIn(node);
    }

    public void outAExistProposition(AExistProposition node)
    {
        defaultOut(node);
    }

    @Override
    public void caseAExistProposition(AExistProposition node)
    {
        inAExistProposition(node);
        if(node.getExist() != null)
        {
            node.getExist().apply(this);
        }
        if(node.getElementIdentifier() != null)
        {
            node.getElementIdentifier().apply(this);
        }
        if(node.getElementOf() != null)
        {
            node.getElementOf().apply(this);
        }
        if(node.getSetIdentifier() != null)
        {
            node.getSetIdentifier().apply(this);
        }
        if(node.getComma() != null)
        {
            node.getComma().apply(this);
        }
        if(node.getExpression() != null)
        {
            node.getExpression().apply(this);
        }
        outAExistProposition(node);
    }

    public void inAExpressionExpression(AExpressionExpression node)
    {
        defaultIn(node);
    }

    public void outAExpressionExpression(AExpressionExpression node)
    {
        defaultOut(node);
    }

    @Override
    public void caseAExpressionExpression(AExpressionExpression node)
    {
        inAExpressionExpression(node);
        if(node.getElementExpression() != null)
        {
            node.getElementExpression().apply(this);
        }
        if(node.getElementOf() != null)
        {
            node.getElementOf().apply(this);
        }
        if(node.getSetExpression() != null)
        {
            node.getSetExpression().apply(this);
        }
        outAExpressionExpression(node);
    }

    public void inASetExpressionExpression(ASetExpressionExpression node)
    {
        defaultIn(node);
    }

    public void outASetExpressionExpression(ASetExpressionExpression node)
    {
        defaultOut(node);
    }

    @Override
    public void caseASetExpressionExpression(ASetExpressionExpression node)
    {
        inASetExpressionExpression(node);
        if(node.getSetExpression() != null)
        {
            node.getSetExpression().apply(this);
        }
        outASetExpressionExpression(node);
    }

    public void inAElementExpressionExpression(AElementExpressionExpression node)
    {
        defaultIn(node);
    }

    public void outAElementExpressionExpression(AElementExpressionExpression node)
    {
        defaultOut(node);
    }

    @Override
    public void caseAElementExpressionExpression(AElementExpressionExpression node)
    {
        inAElementExpressionExpression(node);
        if(node.getElementExpression() != null)
        {
            node.getElementExpression().apply(this);
        }
        outAElementExpressionExpression(node);
    }

    public void inAComparisonSetExpression(AComparisonSetExpression node)
    {
        defaultIn(node);
    }

    public void outAComparisonSetExpression(AComparisonSetExpression node)
    {
        defaultOut(node);
    }

    @Override
    public void caseAComparisonSetExpression(AComparisonSetExpression node)
    {
        inAComparisonSetExpression(node);
        if(node.getSetComparison() != null)
        {
            node.getSetComparison().apply(this);
        }
        outAComparisonSetExpression(node);
    }

    public void inALogicalAndSetExpression(ALogicalAndSetExpression node)
    {
        defaultIn(node);
    }

    public void outALogicalAndSetExpression(ALogicalAndSetExpression node)
    {
        defaultOut(node);
    }

    @Override
    public void caseALogicalAndSetExpression(ALogicalAndSetExpression node)
    {
        inALogicalAndSetExpression(node);
        if(node.getSetExpression() != null)
        {
            node.getSetExpression().apply(this);
        }
        if(node.getLogicalAnd() != null)
        {
            node.getLogicalAnd().apply(this);
        }
        if(node.getSetComparison() != null)
        {
            node.getSetComparison().apply(this);
        }
        outALogicalAndSetExpression(node);
    }

    public void inALogicalOrSetExpression(ALogicalOrSetExpression node)
    {
        defaultIn(node);
    }

    public void outALogicalOrSetExpression(ALogicalOrSetExpression node)
    {
        defaultOut(node);
    }

    @Override
    public void caseALogicalOrSetExpression(ALogicalOrSetExpression node)
    {
        inALogicalOrSetExpression(node);
        if(node.getSetExpression() != null)
        {
            node.getSetExpression().apply(this);
        }
        if(node.getLogicalOr() != null)
        {
            node.getLogicalOr().apply(this);
        }
        if(node.getSetComparison() != null)
        {
            node.getSetComparison().apply(this);
        }
        outALogicalOrSetExpression(node);
    }

    public void inAArithmeticSetComparison(AArithmeticSetComparison node)
    {
        defaultIn(node);
    }

    public void outAArithmeticSetComparison(AArithmeticSetComparison node)
    {
        defaultOut(node);
    }

    @Override
    public void caseAArithmeticSetComparison(AArithmeticSetComparison node)
    {
        inAArithmeticSetComparison(node);
        if(node.getSetArithmetic() != null)
        {
            node.getSetArithmetic().apply(this);
        }
        outAArithmeticSetComparison(node);
    }

    public void inAEqualToSetComparison(AEqualToSetComparison node)
    {
        defaultIn(node);
    }

    public void outAEqualToSetComparison(AEqualToSetComparison node)
    {
        defaultOut(node);
    }

    @Override
    public void caseAEqualToSetComparison(AEqualToSetComparison node)
    {
        inAEqualToSetComparison(node);
        if(node.getSetComparison() != null)
        {
            node.getSetComparison().apply(this);
        }
        if(node.getEqualTo() != null)
        {
            node.getEqualTo().apply(this);
        }
        if(node.getSetArithmetic() != null)
        {
            node.getSetArithmetic().apply(this);
        }
        outAEqualToSetComparison(node);
    }

    public void inANotEqualToSetComparison(ANotEqualToSetComparison node)
    {
        defaultIn(node);
    }

    public void outANotEqualToSetComparison(ANotEqualToSetComparison node)
    {
        defaultOut(node);
    }

    @Override
    public void caseANotEqualToSetComparison(ANotEqualToSetComparison node)
    {
        inANotEqualToSetComparison(node);
        if(node.getSetComparison() != null)
        {
            node.getSetComparison().apply(this);
        }
        if(node.getNotEqualTo() != null)
        {
            node.getNotEqualTo().apply(this);
        }
        if(node.getSetArithmetic() != null)
        {
            node.getSetArithmetic().apply(this);
        }
        outANotEqualToSetComparison(node);
    }

    public void inASubsetOfSetComparison(ASubsetOfSetComparison node)
    {
        defaultIn(node);
    }

    public void outASubsetOfSetComparison(ASubsetOfSetComparison node)
    {
        defaultOut(node);
    }

    @Override
    public void caseASubsetOfSetComparison(ASubsetOfSetComparison node)
    {
        inASubsetOfSetComparison(node);
        if(node.getSetComparison() != null)
        {
            node.getSetComparison().apply(this);
        }
        if(node.getSubsetOf() != null)
        {
            node.getSubsetOf().apply(this);
        }
        if(node.getSetArithmetic() != null)
        {
            node.getSetArithmetic().apply(this);
        }
        outASubsetOfSetComparison(node);
    }

    public void inANotASubsetOfSetComparison(ANotASubsetOfSetComparison node)
    {
        defaultIn(node);
    }

    public void outANotASubsetOfSetComparison(ANotASubsetOfSetComparison node)
    {
        defaultOut(node);
    }

    @Override
    public void caseANotASubsetOfSetComparison(ANotASubsetOfSetComparison node)
    {
        inANotASubsetOfSetComparison(node);
        if(node.getSetComparison() != null)
        {
            node.getSetComparison().apply(this);
        }
        if(node.getNotASubsetOf() != null)
        {
            node.getNotASubsetOf().apply(this);
        }
        if(node.getSetArithmetic() != null)
        {
            node.getSetArithmetic().apply(this);
        }
        outANotASubsetOfSetComparison(node);
    }

    public void inASupersetOfSetComparison(ASupersetOfSetComparison node)
    {
        defaultIn(node);
    }

    public void outASupersetOfSetComparison(ASupersetOfSetComparison node)
    {
        defaultOut(node);
    }

    @Override
    public void caseASupersetOfSetComparison(ASupersetOfSetComparison node)
    {
        inASupersetOfSetComparison(node);
        if(node.getSetComparison() != null)
        {
            node.getSetComparison().apply(this);
        }
        if(node.getSupersetOf() != null)
        {
            node.getSupersetOf().apply(this);
        }
        if(node.getSetArithmetic() != null)
        {
            node.getSetArithmetic().apply(this);
        }
        outASupersetOfSetComparison(node);
    }

    public void inANotASupersetOfSetComparison(ANotASupersetOfSetComparison node)
    {
        defaultIn(node);
    }

    public void outANotASupersetOfSetComparison(ANotASupersetOfSetComparison node)
    {
        defaultOut(node);
    }

    @Override
    public void caseANotASupersetOfSetComparison(ANotASupersetOfSetComparison node)
    {
        inANotASupersetOfSetComparison(node);
        if(node.getSetComparison() != null)
        {
            node.getSetComparison().apply(this);
        }
        if(node.getNotASupersetOf() != null)
        {
            node.getNotASupersetOf().apply(this);
        }
        if(node.getSetArithmetic() != null)
        {
            node.getSetArithmetic().apply(this);
        }
        outANotASupersetOfSetComparison(node);
    }

    public void inAFactorSetArithmetic(AFactorSetArithmetic node)
    {
        defaultIn(node);
    }

    public void outAFactorSetArithmetic(AFactorSetArithmetic node)
    {
        defaultOut(node);
    }

    @Override
    public void caseAFactorSetArithmetic(AFactorSetArithmetic node)
    {
        inAFactorSetArithmetic(node);
        if(node.getSetFactor() != null)
        {
            node.getSetFactor().apply(this);
        }
        outAFactorSetArithmetic(node);
    }

    public void inAPlusSetArithmetic(APlusSetArithmetic node)
    {
        defaultIn(node);
    }

    public void outAPlusSetArithmetic(APlusSetArithmetic node)
    {
        defaultOut(node);
    }

    @Override
    public void caseAPlusSetArithmetic(APlusSetArithmetic node)
    {
        inAPlusSetArithmetic(node);
        if(node.getSetArithmetic() != null)
        {
            node.getSetArithmetic().apply(this);
        }
        if(node.getPlus() != null)
        {
            node.getPlus().apply(this);
        }
        if(node.getSetFactor() != null)
        {
            node.getSetFactor().apply(this);
        }
        outAPlusSetArithmetic(node);
    }

    public void inADeprivedOfSetArithmetic(ADeprivedOfSetArithmetic node)
    {
        defaultIn(node);
    }

    public void outADeprivedOfSetArithmetic(ADeprivedOfSetArithmetic node)
    {
        defaultOut(node);
    }

    @Override
    public void caseADeprivedOfSetArithmetic(ADeprivedOfSetArithmetic node)
    {
        inADeprivedOfSetArithmetic(node);
        if(node.getSetArithmetic() != null)
        {
            node.getSetArithmetic().apply(this);
        }
        if(node.getDeprivedOf() != null)
        {
            node.getDeprivedOf().apply(this);
        }
        if(node.getSetFactor() != null)
        {
            node.getSetFactor().apply(this);
        }
        outADeprivedOfSetArithmetic(node);
    }

    public void inATermSetFactor(ATermSetFactor node)
    {
        defaultIn(node);
    }

    public void outATermSetFactor(ATermSetFactor node)
    {
        defaultOut(node);
    }

    @Override
    public void caseATermSetFactor(ATermSetFactor node)
    {
        inATermSetFactor(node);
        if(node.getSetExponent() != null)
        {
            node.getSetExponent().apply(this);
        }
        outATermSetFactor(node);
    }

    public void inAMultSetFactor(AMultSetFactor node)
    {
        defaultIn(node);
    }

    public void outAMultSetFactor(AMultSetFactor node)
    {
        defaultOut(node);
    }

    @Override
    public void caseAMultSetFactor(AMultSetFactor node)
    {
        inAMultSetFactor(node);
        if(node.getSetFactor() != null)
        {
            node.getSetFactor().apply(this);
        }
        if(node.getMultiplication() != null)
        {
            node.getMultiplication().apply(this);
        }
        if(node.getSetExponent() != null)
        {
            node.getSetExponent().apply(this);
        }
        outAMultSetFactor(node);
    }

    public void inATermSetExponent(ATermSetExponent node)
    {
        defaultIn(node);
    }

    public void outATermSetExponent(ATermSetExponent node)
    {
        defaultOut(node);
    }

    @Override
    public void caseATermSetExponent(ATermSetExponent node)
    {
        inATermSetExponent(node);
        if(node.getSetTerm() != null)
        {
            node.getSetTerm().apply(this);
        }
        outATermSetExponent(node);
    }

    public void inAExpSetExponent(AExpSetExponent node)
    {
        defaultIn(node);
    }

    public void outAExpSetExponent(AExpSetExponent node)
    {
        defaultOut(node);
    }

    @Override
    public void caseAExpSetExponent(AExpSetExponent node)
    {
        inAExpSetExponent(node);
        if(node.getSetExponent() != null)
        {
            node.getSetExponent().apply(this);
        }
        if(node.getPower() != null)
        {
            node.getPower().apply(this);
        }
        if(node.getSetTerm() != null)
        {
            node.getSetTerm().apply(this);
        }
        outAExpSetExponent(node);
    }

    public void inASetSetTerm(ASetSetTerm node)
    {
        defaultIn(node);
    }

    public void outASetSetTerm(ASetSetTerm node)
    {
        defaultOut(node);
    }

    @Override
    public void caseASetSetTerm(ASetSetTerm node)
    {
        inASetSetTerm(node);
        if(node.getSetIdentifier() != null)
        {
            node.getSetIdentifier().apply(this);
        }
        outASetSetTerm(node);
    }

    public void inAExpressionSetTerm(AExpressionSetTerm node)
    {
        defaultIn(node);
    }

    public void outAExpressionSetTerm(AExpressionSetTerm node)
    {
        defaultOut(node);
    }

    @Override
    public void caseAExpressionSetTerm(AExpressionSetTerm node)
    {
        inAExpressionSetTerm(node);
        if(node.getLeftParenthesis() != null)
        {
            node.getLeftParenthesis().apply(this);
        }
        if(node.getSetExpression() != null)
        {
            node.getSetExpression().apply(this);
        }
        if(node.getRightParenthesis() != null)
        {
            node.getRightParenthesis().apply(this);
        }
        outAExpressionSetTerm(node);
    }

    public void inAComparisonElementExpression(AComparisonElementExpression node)
    {
        defaultIn(node);
    }

    public void outAComparisonElementExpression(AComparisonElementExpression node)
    {
        defaultOut(node);
    }

    @Override
    public void caseAComparisonElementExpression(AComparisonElementExpression node)
    {
        inAComparisonElementExpression(node);
        if(node.getElementComparison() != null)
        {
            node.getElementComparison().apply(this);
        }
        outAComparisonElementExpression(node);
    }

    public void inALogicalAndElementExpression(ALogicalAndElementExpression node)
    {
        defaultIn(node);
    }

    public void outALogicalAndElementExpression(ALogicalAndElementExpression node)
    {
        defaultOut(node);
    }

    @Override
    public void caseALogicalAndElementExpression(ALogicalAndElementExpression node)
    {
        inALogicalAndElementExpression(node);
        if(node.getElementExpression() != null)
        {
            node.getElementExpression().apply(this);
        }
        if(node.getLogicalAnd() != null)
        {
            node.getLogicalAnd().apply(this);
        }
        if(node.getElementComparison() != null)
        {
            node.getElementComparison().apply(this);
        }
        outALogicalAndElementExpression(node);
    }

    public void inALogicalOrElementExpression(ALogicalOrElementExpression node)
    {
        defaultIn(node);
    }

    public void outALogicalOrElementExpression(ALogicalOrElementExpression node)
    {
        defaultOut(node);
    }

    @Override
    public void caseALogicalOrElementExpression(ALogicalOrElementExpression node)
    {
        inALogicalOrElementExpression(node);
        if(node.getElementExpression() != null)
        {
            node.getElementExpression().apply(this);
        }
        if(node.getLogicalOr() != null)
        {
            node.getLogicalOr().apply(this);
        }
        if(node.getElementComparison() != null)
        {
            node.getElementComparison().apply(this);
        }
        outALogicalOrElementExpression(node);
    }

    public void inAArithmeticElementComparison(AArithmeticElementComparison node)
    {
        defaultIn(node);
    }

    public void outAArithmeticElementComparison(AArithmeticElementComparison node)
    {
        defaultOut(node);
    }

    @Override
    public void caseAArithmeticElementComparison(AArithmeticElementComparison node)
    {
        inAArithmeticElementComparison(node);
        if(node.getElementArithmetic() != null)
        {
            node.getElementArithmetic().apply(this);
        }
        outAArithmeticElementComparison(node);
    }

    public void inAEqualToElementComparison(AEqualToElementComparison node)
    {
        defaultIn(node);
    }

    public void outAEqualToElementComparison(AEqualToElementComparison node)
    {
        defaultOut(node);
    }

    @Override
    public void caseAEqualToElementComparison(AEqualToElementComparison node)
    {
        inAEqualToElementComparison(node);
        if(node.getElementComparison() != null)
        {
            node.getElementComparison().apply(this);
        }
        if(node.getEqualTo() != null)
        {
            node.getEqualTo().apply(this);
        }
        if(node.getElementArithmetic() != null)
        {
            node.getElementArithmetic().apply(this);
        }
        outAEqualToElementComparison(node);
    }

    public void inANotEqualToElementComparison(ANotEqualToElementComparison node)
    {
        defaultIn(node);
    }

    public void outANotEqualToElementComparison(ANotEqualToElementComparison node)
    {
        defaultOut(node);
    }

    @Override
    public void caseANotEqualToElementComparison(ANotEqualToElementComparison node)
    {
        inANotEqualToElementComparison(node);
        if(node.getElementComparison() != null)
        {
            node.getElementComparison().apply(this);
        }
        if(node.getNotEqualTo() != null)
        {
            node.getNotEqualTo().apply(this);
        }
        if(node.getElementArithmetic() != null)
        {
            node.getElementArithmetic().apply(this);
        }
        outANotEqualToElementComparison(node);
    }

    public void inAGreaterThanElementComparison(AGreaterThanElementComparison node)
    {
        defaultIn(node);
    }

    public void outAGreaterThanElementComparison(AGreaterThanElementComparison node)
    {
        defaultOut(node);
    }

    @Override
    public void caseAGreaterThanElementComparison(AGreaterThanElementComparison node)
    {
        inAGreaterThanElementComparison(node);
        if(node.getElementComparison() != null)
        {
            node.getElementComparison().apply(this);
        }
        if(node.getGreaterThan() != null)
        {
            node.getGreaterThan().apply(this);
        }
        if(node.getElementArithmetic() != null)
        {
            node.getElementArithmetic().apply(this);
        }
        outAGreaterThanElementComparison(node);
    }

    public void inANotGreaterThanElementComparison(ANotGreaterThanElementComparison node)
    {
        defaultIn(node);
    }

    public void outANotGreaterThanElementComparison(ANotGreaterThanElementComparison node)
    {
        defaultOut(node);
    }

    @Override
    public void caseANotGreaterThanElementComparison(ANotGreaterThanElementComparison node)
    {
        inANotGreaterThanElementComparison(node);
        if(node.getElementComparison() != null)
        {
            node.getElementComparison().apply(this);
        }
        if(node.getNotGreaterThan() != null)
        {
            node.getNotGreaterThan().apply(this);
        }
        if(node.getElementArithmetic() != null)
        {
            node.getElementArithmetic().apply(this);
        }
        outANotGreaterThanElementComparison(node);
    }

    public void inALessThanElementComparison(ALessThanElementComparison node)
    {
        defaultIn(node);
    }

    public void outALessThanElementComparison(ALessThanElementComparison node)
    {
        defaultOut(node);
    }

    @Override
    public void caseALessThanElementComparison(ALessThanElementComparison node)
    {
        inALessThanElementComparison(node);
        if(node.getElementComparison() != null)
        {
            node.getElementComparison().apply(this);
        }
        if(node.getLessThan() != null)
        {
            node.getLessThan().apply(this);
        }
        if(node.getElementArithmetic() != null)
        {
            node.getElementArithmetic().apply(this);
        }
        outALessThanElementComparison(node);
    }

    public void inANotLessThanElementComparison(ANotLessThanElementComparison node)
    {
        defaultIn(node);
    }

    public void outANotLessThanElementComparison(ANotLessThanElementComparison node)
    {
        defaultOut(node);
    }

    @Override
    public void caseANotLessThanElementComparison(ANotLessThanElementComparison node)
    {
        inANotLessThanElementComparison(node);
        if(node.getElementComparison() != null)
        {
            node.getElementComparison().apply(this);
        }
        if(node.getNotLessThan() != null)
        {
            node.getNotLessThan().apply(this);
        }
        if(node.getElementArithmetic() != null)
        {
            node.getElementArithmetic().apply(this);
        }
        outANotLessThanElementComparison(node);
    }

    public void inAGreaterThanOrEqualToElementComparison(AGreaterThanOrEqualToElementComparison node)
    {
        defaultIn(node);
    }

    public void outAGreaterThanOrEqualToElementComparison(AGreaterThanOrEqualToElementComparison node)
    {
        defaultOut(node);
    }

    @Override
    public void caseAGreaterThanOrEqualToElementComparison(AGreaterThanOrEqualToElementComparison node)
    {
        inAGreaterThanOrEqualToElementComparison(node);
        if(node.getElementComparison() != null)
        {
            node.getElementComparison().apply(this);
        }
        if(node.getGreaterThanOrEqualTo() != null)
        {
            node.getGreaterThanOrEqualTo().apply(this);
        }
        if(node.getElementArithmetic() != null)
        {
            node.getElementArithmetic().apply(this);
        }
        outAGreaterThanOrEqualToElementComparison(node);
    }

    public void inANeitherGreaterThanNorEqualToElementComparison(ANeitherGreaterThanNorEqualToElementComparison node)
    {
        defaultIn(node);
    }

    public void outANeitherGreaterThanNorEqualToElementComparison(ANeitherGreaterThanNorEqualToElementComparison node)
    {
        defaultOut(node);
    }

    @Override
    public void caseANeitherGreaterThanNorEqualToElementComparison(ANeitherGreaterThanNorEqualToElementComparison node)
    {
        inANeitherGreaterThanNorEqualToElementComparison(node);
        if(node.getElementComparison() != null)
        {
            node.getElementComparison().apply(this);
        }
        if(node.getNeitherGreaterThanNorEqualTo() != null)
        {
            node.getNeitherGreaterThanNorEqualTo().apply(this);
        }
        if(node.getElementArithmetic() != null)
        {
            node.getElementArithmetic().apply(this);
        }
        outANeitherGreaterThanNorEqualToElementComparison(node);
    }

    public void inALessThanOrEqualToElementComparison(ALessThanOrEqualToElementComparison node)
    {
        defaultIn(node);
    }

    public void outALessThanOrEqualToElementComparison(ALessThanOrEqualToElementComparison node)
    {
        defaultOut(node);
    }

    @Override
    public void caseALessThanOrEqualToElementComparison(ALessThanOrEqualToElementComparison node)
    {
        inALessThanOrEqualToElementComparison(node);
        if(node.getElementComparison() != null)
        {
            node.getElementComparison().apply(this);
        }
        if(node.getLessThanOrEqualTo() != null)
        {
            node.getLessThanOrEqualTo().apply(this);
        }
        if(node.getElementArithmetic() != null)
        {
            node.getElementArithmetic().apply(this);
        }
        outALessThanOrEqualToElementComparison(node);
    }

    public void inANeitherLessThanNorEqualToElementComparison(ANeitherLessThanNorEqualToElementComparison node)
    {
        defaultIn(node);
    }

    public void outANeitherLessThanNorEqualToElementComparison(ANeitherLessThanNorEqualToElementComparison node)
    {
        defaultOut(node);
    }

    @Override
    public void caseANeitherLessThanNorEqualToElementComparison(ANeitherLessThanNorEqualToElementComparison node)
    {
        inANeitherLessThanNorEqualToElementComparison(node);
        if(node.getElementComparison() != null)
        {
            node.getElementComparison().apply(this);
        }
        if(node.getNeitherLessThanNorEqualTo() != null)
        {
            node.getNeitherLessThanNorEqualTo().apply(this);
        }
        if(node.getElementArithmetic() != null)
        {
            node.getElementArithmetic().apply(this);
        }
        outANeitherLessThanNorEqualToElementComparison(node);
    }

    public void inAFactorElementArithmetic(AFactorElementArithmetic node)
    {
        defaultIn(node);
    }

    public void outAFactorElementArithmetic(AFactorElementArithmetic node)
    {
        defaultOut(node);
    }

    @Override
    public void caseAFactorElementArithmetic(AFactorElementArithmetic node)
    {
        inAFactorElementArithmetic(node);
        if(node.getElementFactor() != null)
        {
            node.getElementFactor().apply(this);
        }
        outAFactorElementArithmetic(node);
    }

    public void inAPlusElementArithmetic(APlusElementArithmetic node)
    {
        defaultIn(node);
    }

    public void outAPlusElementArithmetic(APlusElementArithmetic node)
    {
        defaultOut(node);
    }

    @Override
    public void caseAPlusElementArithmetic(APlusElementArithmetic node)
    {
        inAPlusElementArithmetic(node);
        if(node.getElementArithmetic() != null)
        {
            node.getElementArithmetic().apply(this);
        }
        if(node.getPlus() != null)
        {
            node.getPlus().apply(this);
        }
        if(node.getElementFactor() != null)
        {
            node.getElementFactor().apply(this);
        }
        outAPlusElementArithmetic(node);
    }

    public void inAMinusElementArithmetic(AMinusElementArithmetic node)
    {
        defaultIn(node);
    }

    public void outAMinusElementArithmetic(AMinusElementArithmetic node)
    {
        defaultOut(node);
    }

    @Override
    public void caseAMinusElementArithmetic(AMinusElementArithmetic node)
    {
        inAMinusElementArithmetic(node);
        if(node.getElementArithmetic() != null)
        {
            node.getElementArithmetic().apply(this);
        }
        if(node.getMinus() != null)
        {
            node.getMinus().apply(this);
        }
        if(node.getElementFactor() != null)
        {
            node.getElementFactor().apply(this);
        }
        outAMinusElementArithmetic(node);
    }

    public void inATermElementFactor(ATermElementFactor node)
    {
        defaultIn(node);
    }

    public void outATermElementFactor(ATermElementFactor node)
    {
        defaultOut(node);
    }

    @Override
    public void caseATermElementFactor(ATermElementFactor node)
    {
        inATermElementFactor(node);
        if(node.getElementTerm() != null)
        {
            node.getElementTerm().apply(this);
        }
        outATermElementFactor(node);
    }

    public void inAMultiplicationElementFactor(AMultiplicationElementFactor node)
    {
        defaultIn(node);
    }

    public void outAMultiplicationElementFactor(AMultiplicationElementFactor node)
    {
        defaultOut(node);
    }

    @Override
    public void caseAMultiplicationElementFactor(AMultiplicationElementFactor node)
    {
        inAMultiplicationElementFactor(node);
        if(node.getElementFactor() != null)
        {
            node.getElementFactor().apply(this);
        }
        if(node.getMultiplication() != null)
        {
            node.getMultiplication().apply(this);
        }
        if(node.getElementTerm() != null)
        {
            node.getElementTerm().apply(this);
        }
        outAMultiplicationElementFactor(node);
    }

    public void inADivisionElementFactor(ADivisionElementFactor node)
    {
        defaultIn(node);
    }

    public void outADivisionElementFactor(ADivisionElementFactor node)
    {
        defaultOut(node);
    }

    @Override
    public void caseADivisionElementFactor(ADivisionElementFactor node)
    {
        inADivisionElementFactor(node);
        if(node.getElementFactor() != null)
        {
            node.getElementFactor().apply(this);
        }
        if(node.getDivision() != null)
        {
            node.getDivision().apply(this);
        }
        if(node.getElementTerm() != null)
        {
            node.getElementTerm().apply(this);
        }
        outADivisionElementFactor(node);
    }

    public void inAModuloElementFactor(AModuloElementFactor node)
    {
        defaultIn(node);
    }

    public void outAModuloElementFactor(AModuloElementFactor node)
    {
        defaultOut(node);
    }

    @Override
    public void caseAModuloElementFactor(AModuloElementFactor node)
    {
        inAModuloElementFactor(node);
        if(node.getElementFactor() != null)
        {
            node.getElementFactor().apply(this);
        }
        if(node.getModulo() != null)
        {
            node.getModulo().apply(this);
        }
        if(node.getElementTerm() != null)
        {
            node.getElementTerm().apply(this);
        }
        outAModuloElementFactor(node);
    }

    public void inANumberElementTerm(ANumberElementTerm node)
    {
        defaultIn(node);
    }

    public void outANumberElementTerm(ANumberElementTerm node)
    {
        defaultOut(node);
    }

    @Override
    public void caseANumberElementTerm(ANumberElementTerm node)
    {
        inANumberElementTerm(node);
        if(node.getNumber() != null)
        {
            node.getNumber().apply(this);
        }
        outANumberElementTerm(node);
    }

    public void inAElementElementTerm(AElementElementTerm node)
    {
        defaultIn(node);
    }

    public void outAElementElementTerm(AElementElementTerm node)
    {
        defaultOut(node);
    }

    @Override
    public void caseAElementElementTerm(AElementElementTerm node)
    {
        inAElementElementTerm(node);
        if(node.getElementIdentifier() != null)
        {
            node.getElementIdentifier().apply(this);
        }
        outAElementElementTerm(node);
    }

    public void inAExpressionElementTerm(AExpressionElementTerm node)
    {
        defaultIn(node);
    }

    public void outAExpressionElementTerm(AExpressionElementTerm node)
    {
        defaultOut(node);
    }

    @Override
    public void caseAExpressionElementTerm(AExpressionElementTerm node)
    {
        inAExpressionElementTerm(node);
        if(node.getLeftParenthesis() != null)
        {
            node.getLeftParenthesis().apply(this);
        }
        if(node.getElementExpression() != null)
        {
            node.getElementExpression().apply(this);
        }
        if(node.getRightParenthesis() != null)
        {
            node.getRightParenthesis().apply(this);
        }
        outAExpressionElementTerm(node);
    }
}
