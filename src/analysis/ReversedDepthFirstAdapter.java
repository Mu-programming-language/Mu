/* This file was generated by SableCC (http://www.sablecc.org/). */

package analysis;

import java.util.*;
import node.*;

public class ReversedDepthFirstAdapter extends AnalysisAdapter
{
    public void inStart(Start node)
    {
        defaultIn(node);
    }

    public void outStart(Start node)
    {
        defaultOut(node);
    }

    public void defaultIn(@SuppressWarnings("unused") Node node)
    {
        // Do nothing
    }

    public void defaultOut(@SuppressWarnings("unused") Node node)
    {
        // Do nothing
    }

    @Override
    public void caseStart(Start node)
    {
        inStart(node);
        node.getEOF().apply(this);
        node.getPProgram().apply(this);
        outStart(node);
    }

    public void inAProgram(AProgram node)
    {
        defaultIn(node);
    }

    public void outAProgram(AProgram node)
    {
        defaultOut(node);
    }

    @Override
    public void caseAProgram(AProgram node)
    {
        inAProgram(node);
        if(node.getBlock() != null)
        {
            node.getBlock().apply(this);
        }
        outAProgram(node);
    }

    public void inABlock(ABlock node)
    {
        defaultIn(node);
    }

    public void outABlock(ABlock node)
    {
        defaultOut(node);
    }

    @Override
    public void caseABlock(ABlock node)
    {
        inABlock(node);
        if(node.getRightBrace() != null)
        {
            node.getRightBrace().apply(this);
        }
        if(node.getExpression() != null)
        {
            node.getExpression().apply(this);
        }
        if(node.getSuchAs() != null)
        {
            node.getSuchAs().apply(this);
        }
        if(node.getSet() != null)
        {
            node.getSet().apply(this);
        }
        if(node.getElementOf() != null)
        {
            node.getElementOf().apply(this);
        }
        if(node.getElement() != null)
        {
            node.getElement().apply(this);
        }
        if(node.getLeftBrace() != null)
        {
            node.getLeftBrace().apply(this);
        }
        outABlock(node);
    }

    public void inAComparisonExpression(AComparisonExpression node)
    {
        defaultIn(node);
    }

    public void outAComparisonExpression(AComparisonExpression node)
    {
        defaultOut(node);
    }

    @Override
    public void caseAComparisonExpression(AComparisonExpression node)
    {
        inAComparisonExpression(node);
        if(node.getComparison() != null)
        {
            node.getComparison().apply(this);
        }
        outAComparisonExpression(node);
    }

    public void inALogicalAndExpression(ALogicalAndExpression node)
    {
        defaultIn(node);
    }

    public void outALogicalAndExpression(ALogicalAndExpression node)
    {
        defaultOut(node);
    }

    @Override
    public void caseALogicalAndExpression(ALogicalAndExpression node)
    {
        inALogicalAndExpression(node);
        if(node.getComparison() != null)
        {
            node.getComparison().apply(this);
        }
        if(node.getLogicalAnd() != null)
        {
            node.getLogicalAnd().apply(this);
        }
        if(node.getExpression() != null)
        {
            node.getExpression().apply(this);
        }
        outALogicalAndExpression(node);
    }

    public void inALogicalOrExpression(ALogicalOrExpression node)
    {
        defaultIn(node);
    }

    public void outALogicalOrExpression(ALogicalOrExpression node)
    {
        defaultOut(node);
    }

    @Override
    public void caseALogicalOrExpression(ALogicalOrExpression node)
    {
        inALogicalOrExpression(node);
        if(node.getComparison() != null)
        {
            node.getComparison().apply(this);
        }
        if(node.getLogicalOr() != null)
        {
            node.getLogicalOr().apply(this);
        }
        if(node.getExpression() != null)
        {
            node.getExpression().apply(this);
        }
        outALogicalOrExpression(node);
    }

    public void inAArithmeticComparison(AArithmeticComparison node)
    {
        defaultIn(node);
    }

    public void outAArithmeticComparison(AArithmeticComparison node)
    {
        defaultOut(node);
    }

    @Override
    public void caseAArithmeticComparison(AArithmeticComparison node)
    {
        inAArithmeticComparison(node);
        if(node.getArithmetic() != null)
        {
            node.getArithmetic().apply(this);
        }
        outAArithmeticComparison(node);
    }

    public void inAEqualToComparison(AEqualToComparison node)
    {
        defaultIn(node);
    }

    public void outAEqualToComparison(AEqualToComparison node)
    {
        defaultOut(node);
    }

    @Override
    public void caseAEqualToComparison(AEqualToComparison node)
    {
        inAEqualToComparison(node);
        if(node.getArithmetic() != null)
        {
            node.getArithmetic().apply(this);
        }
        if(node.getEqualTo() != null)
        {
            node.getEqualTo().apply(this);
        }
        if(node.getComparison() != null)
        {
            node.getComparison().apply(this);
        }
        outAEqualToComparison(node);
    }

    public void inAGreaterThanComparison(AGreaterThanComparison node)
    {
        defaultIn(node);
    }

    public void outAGreaterThanComparison(AGreaterThanComparison node)
    {
        defaultOut(node);
    }

    @Override
    public void caseAGreaterThanComparison(AGreaterThanComparison node)
    {
        inAGreaterThanComparison(node);
        if(node.getArithmetic() != null)
        {
            node.getArithmetic().apply(this);
        }
        if(node.getGreaterThan() != null)
        {
            node.getGreaterThan().apply(this);
        }
        if(node.getComparison() != null)
        {
            node.getComparison().apply(this);
        }
        outAGreaterThanComparison(node);
    }

    public void inALessThanComparison(ALessThanComparison node)
    {
        defaultIn(node);
    }

    public void outALessThanComparison(ALessThanComparison node)
    {
        defaultOut(node);
    }

    @Override
    public void caseALessThanComparison(ALessThanComparison node)
    {
        inALessThanComparison(node);
        if(node.getArithmetic() != null)
        {
            node.getArithmetic().apply(this);
        }
        if(node.getLessThan() != null)
        {
            node.getLessThan().apply(this);
        }
        if(node.getComparison() != null)
        {
            node.getComparison().apply(this);
        }
        outALessThanComparison(node);
    }

    public void inAGreaterThanOrEqualToComparison(AGreaterThanOrEqualToComparison node)
    {
        defaultIn(node);
    }

    public void outAGreaterThanOrEqualToComparison(AGreaterThanOrEqualToComparison node)
    {
        defaultOut(node);
    }

    @Override
    public void caseAGreaterThanOrEqualToComparison(AGreaterThanOrEqualToComparison node)
    {
        inAGreaterThanOrEqualToComparison(node);
        if(node.getArithmetic() != null)
        {
            node.getArithmetic().apply(this);
        }
        if(node.getGreaterThanOrEqualTo() != null)
        {
            node.getGreaterThanOrEqualTo().apply(this);
        }
        if(node.getComparison() != null)
        {
            node.getComparison().apply(this);
        }
        outAGreaterThanOrEqualToComparison(node);
    }

    public void inALessThanOrEqualToComparison(ALessThanOrEqualToComparison node)
    {
        defaultIn(node);
    }

    public void outALessThanOrEqualToComparison(ALessThanOrEqualToComparison node)
    {
        defaultOut(node);
    }

    @Override
    public void caseALessThanOrEqualToComparison(ALessThanOrEqualToComparison node)
    {
        inALessThanOrEqualToComparison(node);
        if(node.getArithmetic() != null)
        {
            node.getArithmetic().apply(this);
        }
        if(node.getLessThanOrEqualTo() != null)
        {
            node.getLessThanOrEqualTo().apply(this);
        }
        if(node.getComparison() != null)
        {
            node.getComparison().apply(this);
        }
        outALessThanOrEqualToComparison(node);
    }

    public void inANotEqualToComparison(ANotEqualToComparison node)
    {
        defaultIn(node);
    }

    public void outANotEqualToComparison(ANotEqualToComparison node)
    {
        defaultOut(node);
    }

    @Override
    public void caseANotEqualToComparison(ANotEqualToComparison node)
    {
        inANotEqualToComparison(node);
        if(node.getArithmetic() != null)
        {
            node.getArithmetic().apply(this);
        }
        if(node.getNotEqualTo() != null)
        {
            node.getNotEqualTo().apply(this);
        }
        if(node.getComparison() != null)
        {
            node.getComparison().apply(this);
        }
        outANotEqualToComparison(node);
    }

    public void inANotGreaterThanComparison(ANotGreaterThanComparison node)
    {
        defaultIn(node);
    }

    public void outANotGreaterThanComparison(ANotGreaterThanComparison node)
    {
        defaultOut(node);
    }

    @Override
    public void caseANotGreaterThanComparison(ANotGreaterThanComparison node)
    {
        inANotGreaterThanComparison(node);
        if(node.getArithmetic() != null)
        {
            node.getArithmetic().apply(this);
        }
        if(node.getNotGreaterThan() != null)
        {
            node.getNotGreaterThan().apply(this);
        }
        if(node.getComparison() != null)
        {
            node.getComparison().apply(this);
        }
        outANotGreaterThanComparison(node);
    }

    public void inANotLessThanComparison(ANotLessThanComparison node)
    {
        defaultIn(node);
    }

    public void outANotLessThanComparison(ANotLessThanComparison node)
    {
        defaultOut(node);
    }

    @Override
    public void caseANotLessThanComparison(ANotLessThanComparison node)
    {
        inANotLessThanComparison(node);
        if(node.getArithmetic() != null)
        {
            node.getArithmetic().apply(this);
        }
        if(node.getNotLessThan() != null)
        {
            node.getNotLessThan().apply(this);
        }
        if(node.getComparison() != null)
        {
            node.getComparison().apply(this);
        }
        outANotLessThanComparison(node);
    }

    public void inANeitherGreaterThanNorEqualToComparison(ANeitherGreaterThanNorEqualToComparison node)
    {
        defaultIn(node);
    }

    public void outANeitherGreaterThanNorEqualToComparison(ANeitherGreaterThanNorEqualToComparison node)
    {
        defaultOut(node);
    }

    @Override
    public void caseANeitherGreaterThanNorEqualToComparison(ANeitherGreaterThanNorEqualToComparison node)
    {
        inANeitherGreaterThanNorEqualToComparison(node);
        if(node.getArithmetic() != null)
        {
            node.getArithmetic().apply(this);
        }
        if(node.getNeitherGreaterThanNorEqualTo() != null)
        {
            node.getNeitherGreaterThanNorEqualTo().apply(this);
        }
        if(node.getComparison() != null)
        {
            node.getComparison().apply(this);
        }
        outANeitherGreaterThanNorEqualToComparison(node);
    }

    public void inANeitherLessThanNorEqualToComparison(ANeitherLessThanNorEqualToComparison node)
    {
        defaultIn(node);
    }

    public void outANeitherLessThanNorEqualToComparison(ANeitherLessThanNorEqualToComparison node)
    {
        defaultOut(node);
    }

    @Override
    public void caseANeitherLessThanNorEqualToComparison(ANeitherLessThanNorEqualToComparison node)
    {
        inANeitherLessThanNorEqualToComparison(node);
        if(node.getArithmetic() != null)
        {
            node.getArithmetic().apply(this);
        }
        if(node.getNeitherLessThanNorEqualTo() != null)
        {
            node.getNeitherLessThanNorEqualTo().apply(this);
        }
        if(node.getComparison() != null)
        {
            node.getComparison().apply(this);
        }
        outANeitherLessThanNorEqualToComparison(node);
    }

    public void inAFactorArithmetic(AFactorArithmetic node)
    {
        defaultIn(node);
    }

    public void outAFactorArithmetic(AFactorArithmetic node)
    {
        defaultOut(node);
    }

    @Override
    public void caseAFactorArithmetic(AFactorArithmetic node)
    {
        inAFactorArithmetic(node);
        if(node.getFactor() != null)
        {
            node.getFactor().apply(this);
        }
        outAFactorArithmetic(node);
    }

    public void inAPlusArithmetic(APlusArithmetic node)
    {
        defaultIn(node);
    }

    public void outAPlusArithmetic(APlusArithmetic node)
    {
        defaultOut(node);
    }

    @Override
    public void caseAPlusArithmetic(APlusArithmetic node)
    {
        inAPlusArithmetic(node);
        if(node.getFactor() != null)
        {
            node.getFactor().apply(this);
        }
        if(node.getPlus() != null)
        {
            node.getPlus().apply(this);
        }
        if(node.getArithmetic() != null)
        {
            node.getArithmetic().apply(this);
        }
        outAPlusArithmetic(node);
    }

    public void inAMinusArithmetic(AMinusArithmetic node)
    {
        defaultIn(node);
    }

    public void outAMinusArithmetic(AMinusArithmetic node)
    {
        defaultOut(node);
    }

    @Override
    public void caseAMinusArithmetic(AMinusArithmetic node)
    {
        inAMinusArithmetic(node);
        if(node.getFactor() != null)
        {
            node.getFactor().apply(this);
        }
        if(node.getMinus() != null)
        {
            node.getMinus().apply(this);
        }
        if(node.getArithmetic() != null)
        {
            node.getArithmetic().apply(this);
        }
        outAMinusArithmetic(node);
    }

    public void inATermFactor(ATermFactor node)
    {
        defaultIn(node);
    }

    public void outATermFactor(ATermFactor node)
    {
        defaultOut(node);
    }

    @Override
    public void caseATermFactor(ATermFactor node)
    {
        inATermFactor(node);
        if(node.getTerm() != null)
        {
            node.getTerm().apply(this);
        }
        outATermFactor(node);
    }

    public void inAMultiplicationFactor(AMultiplicationFactor node)
    {
        defaultIn(node);
    }

    public void outAMultiplicationFactor(AMultiplicationFactor node)
    {
        defaultOut(node);
    }

    @Override
    public void caseAMultiplicationFactor(AMultiplicationFactor node)
    {
        inAMultiplicationFactor(node);
        if(node.getTerm() != null)
        {
            node.getTerm().apply(this);
        }
        if(node.getMultiplication() != null)
        {
            node.getMultiplication().apply(this);
        }
        if(node.getFactor() != null)
        {
            node.getFactor().apply(this);
        }
        outAMultiplicationFactor(node);
    }

    public void inADivisionFactor(ADivisionFactor node)
    {
        defaultIn(node);
    }

    public void outADivisionFactor(ADivisionFactor node)
    {
        defaultOut(node);
    }

    @Override
    public void caseADivisionFactor(ADivisionFactor node)
    {
        inADivisionFactor(node);
        if(node.getTerm() != null)
        {
            node.getTerm().apply(this);
        }
        if(node.getDivision() != null)
        {
            node.getDivision().apply(this);
        }
        if(node.getFactor() != null)
        {
            node.getFactor().apply(this);
        }
        outADivisionFactor(node);
    }

    public void inAModuloFactor(AModuloFactor node)
    {
        defaultIn(node);
    }

    public void outAModuloFactor(AModuloFactor node)
    {
        defaultOut(node);
    }

    @Override
    public void caseAModuloFactor(AModuloFactor node)
    {
        inAModuloFactor(node);
        if(node.getTerm() != null)
        {
            node.getTerm().apply(this);
        }
        if(node.getModulo() != null)
        {
            node.getModulo().apply(this);
        }
        if(node.getFactor() != null)
        {
            node.getFactor().apply(this);
        }
        outAModuloFactor(node);
    }

    public void inANumberTerm(ANumberTerm node)
    {
        defaultIn(node);
    }

    public void outANumberTerm(ANumberTerm node)
    {
        defaultOut(node);
    }

    @Override
    public void caseANumberTerm(ANumberTerm node)
    {
        inANumberTerm(node);
        if(node.getNumber() != null)
        {
            node.getNumber().apply(this);
        }
        outANumberTerm(node);
    }

    public void inAElementTerm(AElementTerm node)
    {
        defaultIn(node);
    }

    public void outAElementTerm(AElementTerm node)
    {
        defaultOut(node);
    }

    @Override
    public void caseAElementTerm(AElementTerm node)
    {
        inAElementTerm(node);
        if(node.getElement() != null)
        {
            node.getElement().apply(this);
        }
        outAElementTerm(node);
    }

    public void inAExpressionTerm(AExpressionTerm node)
    {
        defaultIn(node);
    }

    public void outAExpressionTerm(AExpressionTerm node)
    {
        defaultOut(node);
    }

    @Override
    public void caseAExpressionTerm(AExpressionTerm node)
    {
        inAExpressionTerm(node);
        if(node.getRightParenthesis() != null)
        {
            node.getRightParenthesis().apply(this);
        }
        if(node.getExpression() != null)
        {
            node.getExpression().apply(this);
        }
        if(node.getLeftParenthesis() != null)
        {
            node.getLeftParenthesis().apply(this);
        }
        outAExpressionTerm(node);
    }
}
