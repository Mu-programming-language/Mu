Helpers
	lower_case = ['a'..'z'];
	upper_case = ['A'..'Z'];
	letter = lower_case | upper_case;
	digit = ['0'..'9'];
	space = ' ';
	tab = 9;
	lf = 10;
	cr = 13;
	all = [0..0xFFFF];
	eol = cr lf | cr | lf;
	blank = (space | tab | eol);
	all_except_eol = [all - [cr + lf]];
	all_except_double_quote = [all - '"'];

Tokens
	let = 'let';
	proof = 'proof';
	statement = 'statement';
	question = 'question';

	not = '¬' | 'not';

	empty_set = '∅';

	multiplication = '*';
	division = '/';
	modulo = '%';
	plus = '+';
	minus = '-';

	for_all = '∀' | 'forall';
	exist = '∃' | 'exists';

	such_as = '|' | 'suchas';
	comma = ',';
	semicolon = ';';
	column = ':';
	diesis = '#';
	implication = '=>';

	logical_and = '∧' | 'and';
	logical_or = '∨' | 'or';

	union = '∪' | 'union';
	intersection = '∩' | 'intersection';

	subset_of = '⊂' | 'subsetof';
	superset_of = '⊃' | 'supersetof';
	element_of = '∈' | 'elementof';
	contains_as_member = '∋' | 'containsasmember';
	not_a_subset_of = '⊄';
	not_a_superset_of = '⊅';
	not_an_element_of = '∉';
	does_not_contain_as_member = '∌';

	left_brace = '{';
	right_brace = '}';
	left_parenthesis = '(';
	right_parenthesis = ')';
	lelft_bracket = '[';
	right_bracket = ']';

	equal_to = '=';
	greater_than = '>';
	less_than = '<';
	greater_than_or_equal_to = '≥' | '>=';
	less_than_or_equal_to = '≤' | '<=';
	not_equal_to = '≠' | '!=';
	not_greater_than = '≯' | '!>';
	not_less_than = '≮' | '!<';
	neither_greater_than_nor_equal_to = '≱' | '!>=';
	neither_less_than_nor_equal_to = '≰' | '!<=';

	number = '0' | (['1'..'9'] ['0'..'9']*);
	set_identifier = upper_case;
	element_identifier = lower_case;
	identifier = letter (letter | digit)*;
	question_number = '#' digit letter?;
	string = '"' all_except_double_quote* '"';

	blank = blank+;
	short_comment = '//' all_except_eol* eol;
	long_comment = '/*' all '*/';

Ignored Tokens
	blank,
	short_comment,
	long_comment;

Productions
	program =
		{statement_instruction} statement column statement_instruction_list |
		{question_instruction} question column question_instruction_list |
		{proof_instruction} proof column proof_instruction;
	statement_instruction_list =
		statement_instruction additional_statement_instruction* semicolon;
	additional_statement_instruction =
		comma statement_instruction;
	statement_instruction =
		{declaration} let set |
		{assignment} set_identifier equal_to set |
		{definition} let set_identifier equal_to set;
	question_instruction_list =
		question_instruction additional_question_instruction* semicolon;
	additional_question_instruction =
		comma question_instruction;
	question_instruction =
		question_number column string;

	proof_instruction =
		;

	set =
		left_brace element_identifier element_of set_identifier such_as expression right_brace;
	expression =
		{comparison} comparison |
		{logical_and} expression logical_and comparison |
		{logical_or} expression logical_or comparison;
	comparison =
		{arithmetic} arithmetic |
		{equal_to} comparison equal_to arithmetic |
		{greater_than} comparison greater_than arithmetic |
		{less_than} comparison less_than arithmetic |
		{greater_than_or_equal_to} comparison greater_than_or_equal_to arithmetic |
		{less_than_or_equal_to} comparison less_than_or_equal_to arithmetic |
		{not_equal_to} comparison not_equal_to arithmetic |
		{not_greater_than} comparison not_greater_than arithmetic |
		{not_less_than} comparison not_less_than arithmetic |
		{neither_greater_than_nor_equal_to} comparison neither_greater_than_nor_equal_to arithmetic |
		{neither_less_than_nor_equal_to} comparison neither_less_than_nor_equal_to arithmetic;
	arithmetic =
		{factor} factor |
		{plus} arithmetic plus factor |
		{minus} arithmetic minus factor;
	factor =
		{term} term |
		{multiplication} factor multiplication term |
		{division} factor division term |
		{modulo} factor modulo term;
	term =
		{number} number |
		{element} element_identifier |
		{expression} left_parenthesis expression right_parenthesis;
